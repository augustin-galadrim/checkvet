components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <style>\n      /* Global styles */\n      * {\n        box-sizing: border-box;\n        font-family: Arial, sans-serif;\n        margin: 0;\n        padding: 0;\n      }\n      body {\n        background-color: #f5f5f5;\n        height: 100vh;\n        overflow: hidden;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        height: 100vh;\n        max-width: 1200px;\n        margin: 0 auto;\n        background-color: white;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n      .header {\n        background: white;\n        padding: 20px;\n        border-bottom: 1px solid #ddd;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .header h1 {\n        color: #333;\n        font-size: 24px;\n      }\n      .back-button {\n        background-color: #f1f1f1;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        padding: 8px 16px;\n        cursor: pointer;\n        transition: background-color 0.3s;\n      }\n      .back-button:hover {\n        background-color: #e1e1e1;\n      }\n\n      /* Fixed section with time */\n      .fixed-section {\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        padding: 15px 20px;\n        background: white;\n        border-bottom: 1px solid #ddd;\n      }\n      .time {\n        color: #666;\n        font-size: 14px;\n      }\n\n      /* Tab Navigation */\n      .tabs {\n        display: flex;\n        background-color: #f8f8f8;\n        border-bottom: 1px solid #ddd;\n      }\n      .tab-btn {\n        padding: 12px 24px;\n        background: transparent;\n        border: none;\n        border-bottom: 3px solid transparent;\n        cursor: pointer;\n        font-size: 16px;\n        font-weight: 500;\n        transition: all 0.3s;\n      }\n      .tab-btn:hover {\n        background-color: #f1f1f1;\n      }\n      .tab-btn.active {\n        border-bottom-color: #4285f4;\n        color: #4285f4;\n      }\n\n      /* Content area */\n      .content {\n        flex: 1;\n        overflow-y: auto;\n        padding: 20px;\n        position: relative;\n      }\n\n      /* Tab panels */\n      .tab-panel {\n        display: none;\n      }\n      .tab-panel.active {\n        display: block;\n      }\n\n      /* Common components */\n      .action-bar {\n        margin-bottom: 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .search-box {\n        padding: 8px 12px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        width: 300px;\n        font-size: 14px;\n      }\n      .action-button {\n        background-color: #4285f4;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        padding: 8px 16px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.3s;\n      }\n      .action-button:hover {\n        background-color: #3367d6;\n      }\n      .secondary-button {\n        background-color: #f1f1f1;\n        color: #333;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        padding: 8px 16px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.3s;\n      }\n      .secondary-button:hover {\n        background-color: #e1e1e1;\n      }\n\n      /* Table styles */\n      .data-table {\n        width: 100%;\n        border-collapse: collapse;\n        margin-bottom: 20px;\n      }\n      .data-table th {\n        background-color: #f8f8f8;\n        padding: 12px;\n        text-align: left;\n        font-weight: 600;\n        border-bottom: 2px solid #ddd;\n      }\n      .data-table td {\n        padding: 12px;\n        border-bottom: 1px solid #eee;\n      }\n      .data-table tr:hover {\n        background-color: #f5f5f5;\n      }\n      .data-table .action-cell {\n        white-space: nowrap;\n        text-align: right;\n      }\n      .table-action {\n        background-color: transparent;\n        border: none;\n        color: #4285f4;\n        cursor: pointer;\n        margin-left: 10px;\n        font-size: 14px;\n      }\n      .table-action:hover {\n        text-decoration: underline;\n      }\n\n      /* Form styles */\n      .form-container {\n        background-color: white;\n        border: 1px solid #ddd;\n        border-radius: 8px;\n        padding: 20px;\n        margin-bottom: 20px;\n      }\n      .form-title {\n        font-size: 18px;\n        font-weight: 600;\n        margin-bottom: 20px;\n        color: #333;\n      }\n      .form-group {\n        margin-bottom: 15px;\n      }\n      .form-group label {\n        display: block;\n        margin-bottom: 5px;\n        font-weight: 500;\n        color: #333;\n      }\n      .form-control {\n        width: 100%;\n        padding: 8px 12px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-size: 14px;\n      }\n      .form-check {\n        display: flex;\n        align-items: center;\n        margin-bottom: 15px;\n      }\n      .form-check input[type=\"checkbox\"] {\n        margin-right: 8px;\n      }\n      .form-actions {\n        display: flex;\n        justify-content: flex-end;\n        gap: 10px;\n        margin-top: 20px;\n      }\n\n      /* Form sections */\n      .form-section {\n        margin-bottom: 20px;\n        padding-bottom: 20px;\n        border-bottom: 1px solid #eee;\n      }\n      .form-section-title {\n        font-size: 16px;\n        font-weight: 600;\n        margin-bottom: 15px;\n        color: #555;\n      }\n      .form-row {\n        display: flex;\n        gap: 15px;\n        margin-bottom: 15px;\n      }\n      .form-col {\n        flex: 1;\n      }\n\n      /* Footer */\n      .footer {\n        padding: 20px;\n        border-top: 1px solid #ddd;\n        text-align: center;\n        background-color: #f8f8f8;\n      }\n      .footer-text {\n        color: #666;\n        font-size: 14px;\n      }\n\n      /* Priority colors */\n      .priority-yellow {\n        color: #f39c12;\n        font-weight: bold;\n      }\n      .priority-green {\n        color: #27ae60;\n        font-weight: bold;\n      }\n\n      /* User assignment container */\n      .user-assignment-container {\n        max-height: 200px;\n        overflow-y: auto;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        padding: 10px;\n        background-color: #f9f9f9;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\" id=\"admin-container\">\n      <!-- Header -->\n      <div class=\"header\">\n        <h1>Administration</h1>\n        <button id=\"back-btn\" class=\"back-button\">Retour</button>\n      </div>\n\n      <!-- Fixed section with time -->\n      <div class=\"fixed-section\">\n        <div class=\"time\">--:--</div>\n      </div>\n\n      <!-- Tabs -->\n      <div class=\"tabs\">\n        <button class=\"tab-btn active\" data-tab=\"structures\">Structures</button>\n        <button class=\"tab-btn\" data-tab=\"users\">Utilisateurs</button>\n        <button class=\"tab-btn\" data-tab=\"templates\">Templates</button>\n      </div>\n\n      <div class=\"content\">\n        <!-- Structures Tab Panel -->\n        <div id=\"structures-panel\" class=\"tab-panel active\">\n          <div class=\"action-bar\">\n            <input type=\"text\" class=\"search-box\" id=\"structure-search\" placeholder=\"Rechercher une structure...\">\n            <button id=\"new-structure-btn\" class=\"action-button\">Nouvelle Structure</button>\n          </div>\n\n          <!-- Structure List -->\n          <table class=\"data-table\" id=\"structures-table\">\n            <thead>\n              <tr>\n                <th>Nom</th>\n                <th>Téléphone</th>\n                <th>Email</th>\n                <th>Vétérinaires Affiliés</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody id=\"structures-list\">\n              <!-- Structures will be populated here -->\n            </tbody>\n          </table>\n\n          <!-- Structure Form (hidden by default) -->\n          <div id=\"structure-form\" class=\"form-container\" style=\"display: none;\">\n            <h2 class=\"form-title\" id=\"structure-form-title\">Nouvelle Structure</h2>\n\n            <div class=\"form-group\">\n              <label for=\"structure-name\">Nom de la Structure*</label>\n              <input type=\"text\" id=\"structure-name\" class=\"form-control\" required>\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"structure-phone\">Téléphone</label>\n              <input type=\"tel\" id=\"structure-phone\" class=\"form-control\">\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"structure-email\">Email</label>\n              <input type=\"email\" id=\"structure-email\" class=\"form-control\">\n            </div>\n\n            <div class=\"form-group\">\n              <label for=\"structure-address\">Adresse</label>\n              <textarea id=\"structure-address\" class=\"form-control\" rows=\"3\"></textarea>\n            </div>\n\n            <div class=\"form-actions\">\n              <button id=\"cancel-structure-btn\" class=\"secondary-button\">Annuler</button>\n              <button id=\"save-structure-btn\" class=\"action-button\">Enregistrer</button>\n            </div>\n          </div>\n\n          <!-- Affiliated Vets (shown when editing a structure) -->\n          <div id=\"structure-vets\" class=\"form-container\" style=\"display: none;\">\n            <h2 class=\"form-title\">Vétérinaires Affiliés</h2>\n\n            <table class=\"data-table\" id=\"affiliated-vets-table\">\n              <thead>\n                <tr>\n                  <th>Nom</th>\n                  <th>Email</th>\n                  <th>Téléphone</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody id=\"affiliated-vets-list\">\n                <!-- Affiliated vets will be populated here -->\n              </tbody>\n            </table>\n\n            <div class=\"form-group\">\n              <label for=\"add-vet-email\">Ajouter un vétérinaire par email</label>\n              <div style=\"display: flex; gap: 10px;\">\n                <input type=\"email\" id=\"add-vet-email\" class=\"form-control\" placeholder=\"email@example.com\">\n                <button id=\"add-vet-btn\" class=\"action-button\">Ajouter</button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Users Tab Panel -->\n        <div id=\"users-panel\" class=\"tab-panel\">\n          <div class=\"action-bar\">\n            <input type=\"text\" class=\"search-box\" id=\"user-search\" placeholder=\"Rechercher un utilisateur...\">\n            <button id=\"new-user-btn\" class=\"action-button\">Nouvel Utilisateur</button>\n          </div>\n\n          <!-- User List -->\n          <table class=\"data-table\" id=\"users-table\">\n            <thead>\n              <tr>\n                <th>Nom</th>\n                <th>Email</th>\n                <th>Téléphone</th>\n                <th>Structure</th>\n                <th>Superviseur</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody id=\"users-list\">\n              <!-- Users will be populated here -->\n            </tbody>\n          </table>\n\n          <!-- User Form (hidden by default) -->\n          <div id=\"user-form\" class=\"form-container\" style=\"display: none;\">\n            <h2 class=\"form-title\" id=\"user-form-title\">Nouvel Utilisateur</h2>\n\n            <div class=\"form-section\">\n              <h3 class=\"form-section-title\">Informations de base</h3>\n\n              <div class=\"form-row\">\n                <div class=\"form-col\">\n                  <div class=\"form-group\">\n                    <label for=\"user-name\">Nom*</label>\n                    <input type=\"text\" id=\"user-name\" class=\"form-control\" required>\n                  </div>\n                </div>\n                <div class=\"form-col\">\n                  <div class=\"form-group\">\n                    <label for=\"user-email\">Email*</label>\n                    <input type=\"email\" id=\"user-email\" class=\"form-control\" required>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"form-row\">\n                <div class=\"form-col\">\n                  <div class=\"form-group\">\n                    <label for=\"user-phone\">Téléphone</label>\n                    <input type=\"tel\" id=\"user-phone\" class=\"form-control\">\n                  </div>\n                </div>\n                <div class=\"form-col\">\n                  <div class=\"form-group\">\n                    <label for=\"user-structure\">Structure</label>\n                    <select id=\"user-structure\" class=\"form-control\">\n                      <option value=\"Indépendant\">Indépendant</option>\n                      <!-- Other structures will be populated dynamically -->\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-section\">\n              <h3 class=\"form-section-title\">Préférences & Autorisations</h3>\n\n              <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"user-supervisor\">\n                <label for=\"user-supervisor\">Superviseur</label>\n              </div>\n\n              <div class=\"form-group\">\n                <label for=\"user-language\">Langue préférée</label>\n                <select id=\"user-language\" class=\"form-control\">\n                  <option value=\"FR\">Français</option>\n                  <option value=\"EN\" selected>Anglais</option>\n                  <option value=\"ES\">Español</option>\n                  <option value=\"DE\">Deutsch</option>\n                </select>\n              </div>\n            </div>\n\n            <div class=\"form-actions\">\n              <button id=\"cancel-user-btn\" class=\"secondary-button\">Annuler</button>\n              <button id=\"save-user-btn\" class=\"action-button\">Enregistrer</button>\n            </div>\n          </div>\n        </div>\n\n        <!-- Templates Tab Panel -->\n        <div id=\"templates-panel\" class=\"tab-panel\">\n          <div class=\"action-bar\">\n            <input type=\"text\" class=\"search-box\" id=\"template-search\" placeholder=\"Rechercher un template...\">\n            <button id=\"new-template-btn\" class=\"action-button\">Nouveau Template</button>\n          </div>\n\n          <!-- Template List -->\n          <table class=\"data-table\" id=\"templates-table\">\n            <thead>\n              <tr>\n                <th>Nom</th>\n                <th>Description</th>\n                <th>Priorité</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody id=\"templates-list\">\n              <!-- Templates will be populated here -->\n            </tbody>\n          </table>\n\n          <!-- Template Form (hidden by default) -->\n          <div id=\"template-form\" class=\"form-container\" style=\"display: none;\">\n            <h2 class=\"form-title\" id=\"template-form-title\">Nouveau Template</h2>\n\n            <div class=\"form-section\">\n              <h3 class=\"form-section-title\">Informations de base</h3>\n\n              <div class=\"form-group\">\n                <label for=\"template-name\">Nom du Template*</label>\n                <input type=\"text\" id=\"template-name\" class=\"form-control\" required>\n              </div>\n\n              <div class=\"form-group\">\n                <label for=\"template-human-readable\">Description</label>\n                <input type=\"text\" id=\"template-human-readable\" class=\"form-control\">\n              </div>\n\n              <div class=\"form-group\">\n                <label for=\"template-priority\">Priorité</label>\n                <select id=\"template-priority\" class=\"form-control\">\n                  <option value=\"0\">Standard</option>\n                  <option value=\"1\">Favoris (Jaune)</option>\n                  <option value=\"2\">Important (Vert)</option>\n                </select>\n              </div>\n            </div>\n\n            <div class=\"form-section\">\n              <h3 class=\"form-section-title\">Contenu du Template</h3>\n\n              <div class=\"form-group\">\n                <label for=\"template-prompt\">Prompt</label>\n                <textarea id=\"template-prompt\" class=\"form-control\" rows=\"5\"></textarea>\n              </div>\n\n              <div class=\"form-group\">\n                <label for=\"template-display\">Affichage du Template</label>\n                <select id=\"template-display\" class=\"form-control\">\n                  <option value=\"true\">Oui</option>\n                  <option value=\"false\">Non</option>\n                </select>\n              </div>\n\n              <div class=\"form-group\">\n                <label for=\"template-text\">Texte à afficher</label>\n                <textarea id=\"template-text\" class=\"form-control\" rows=\"5\"></textarea>\n              </div>\n            </div>\n\n            <div class=\"form-section\">\n              <h3 class=\"form-section-title\">Assigner aux Utilisateurs</h3>\n              <div class=\"form-group\">\n                <label>Utilisateurs disponibles</label>\n                <div id=\"user-assignment-list\" class=\"user-assignment-container\">\n                  <!-- User checkboxes will be populated here -->\n                </div>\n              </div>\n            </div>\n\n            <div class=\"form-actions\">\n              <button id=\"cancel-template-btn\" class=\"secondary-button\">Annuler</button>\n              <button id=\"save-template-btn\" class=\"action-button\">Enregistrer</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"footer\">\n        <div class=\"footer-text\">© 2025 CheckVet Admin</div>\n      </div>\n    </div>\n\n    <script>\n      // ---------------------------------------\n      // 1) Define globals and helper functions (once per session)\n      // ---------------------------------------\n      if (!window.__my_admin_globals) {\n        window.__my_admin_globals = true;\n\n        // Global state\n        window.currentTab = 'structures';\n        window.currentStructure = null;\n        window.currentUser = null;\n        window.currentTemplate = null;\n\n        // ---- Tab Navigation ----\n        window.showTab = function(tabName) {\n          // Update tab buttons\n          document.querySelectorAll('.tab-btn').forEach(btn => {\n            if (btn.getAttribute('data-tab') === tabName) {\n              btn.classList.add('active');\n            } else {\n              btn.classList.remove('active');\n            }\n          });\n\n          // Update tab panels\n          document.querySelectorAll('.tab-panel').forEach(panel => {\n            if (panel.id === tabName + '-panel') {\n              panel.classList.add('active');\n            } else {\n              panel.classList.remove('active');\n            }\n          });\n\n          window.currentTab = tabName;\n        };\n\n        // ---- Structure Management ----\n\n        // Populate the structures table with data\n        window.populateStructures = function(structures) {\n          const tableBody = document.getElementById('structures-list');\n          tableBody.innerHTML = '';\n\n          if (!structures || structures.length === 0) {\n            const row = document.createElement('tr');\n            row.innerHTML = '<td colspan=\"5\" style=\"text-align: center;\">Aucune structure trouvée</td>';\n            tableBody.appendChild(row);\n            return;\n          }\n\n          structures.forEach(structure => {\n            const row = document.createElement('tr');\n\n            // Count affiliated vets or placeholder\n            const vetCount = structure.affiliated_vets ? structure.affiliated_vets.length : 0;\n\n            row.innerHTML = `\n            <td>${structure.structure || ''}</td>\n            <td>${structure.phone || ''}</td>\n            <td>${structure.email || ''}</td>\n            <td>${vetCount} vétérinaires</td>\n            <td class=\"action-cell\">\n              <button class=\"table-action edit-structure\" data-name=\"${structure.structure}\">Modifier</button>\n              <button class=\"table-action manage-vets\" data-name=\"${structure.structure}\">Gérer Vétérinaires</button>\n            </td>\n          `;\n\n            tableBody.appendChild(row);\n          });\n\n          // Attach event listeners to the newly created buttons\n          document.querySelectorAll('.edit-structure').forEach(btn => {\n            btn.addEventListener('click', function() {\n              const structureName = this.getAttribute('data-name');\n              window.editStructure(structureName);\n            });\n          });\n\n          document.querySelectorAll('.manage-vets').forEach(btn => {\n            btn.addEventListener('click', function() {\n              const structureName = this.getAttribute('data-name');\n              window.manageStructureVets(structureName);\n            });\n          });\n        };\n\n        // Show the structure form for creating/editing\n        window.showStructureForm = function(show = true) {\n          const form = document.getElementById('structure-form');\n          form.style.display = show ? 'block' : 'none';\n\n          // Hide the vets management section when showing the form\n          document.getElementById('structure-vets').style.display = 'none';\n        };\n\n        // Clear the structure form\n        window.clearStructureForm = function() {\n          document.getElementById('structure-form-title').textContent = 'Nouvelle Structure';\n          document.getElementById('structure-name').value = '';\n          document.getElementById('structure-phone').value = '';\n          document.getElementById('structure-email').value = '';\n          document.getElementById('structure-address').value = '';\n\n          window.currentStructure = null;\n        };\n\n        // Display structure details in the form\n        window.displayStructureDetails = function(structure) {\n          document.getElementById('structure-form-title').textContent = 'Modifier Structure';\n          document.getElementById('structure-name').value = structure.structure || '';\n          document.getElementById('structure-phone').value = structure.phone || '';\n          document.getElementById('structure-email').value = structure.email || '';\n          // Address might not be available in the structure object\n          if (document.getElementById('structure-address')) {\n            document.getElementById('structure-address').value = structure.address || '';\n          }\n\n          window.currentStructure = structure.structure;\n          showStructureForm(true);\n        };\n\n        // Edit a structure (called from event handlers)\n        window.editStructure = function(structureName) {\n          const formElement = document.getElementById('admin-container');\n          anvil.call(formElement, 'get_structure_details', structureName);\n        };\n\n        // Manage vets for a structure (called from event handlers)\n        window.manageStructureVets = function(structureName) {\n          // Set the current structure\n          window.currentStructure = structureName;\n\n          // Hide the structure form\n          document.getElementById('structure-form').style.display = 'none';\n\n          // Show the vets management section\n          const vetsSection = document.getElementById('structure-vets');\n          vetsSection.style.display = 'block';\n\n          // For now, just show a placeholder\n          const vetsList = document.getElementById('affiliated-vets-list');\n          vetsList.innerHTML = '<tr><td colspan=\"4\" style=\"text-align: center;\">Chargement des vétérinaires...</td></tr>';\n        };\n\n        // Save structure data (called from event handlers)\n        window.saveStructure = function() {\n          const structureData = {\n            name: document.getElementById('structure-name').value,\n            phone: document.getElementById('structure-phone').value,\n            email: document.getElementById('structure-email').value,\n            address: document.getElementById('structure-address').value\n          };\n\n          const formElement = document.getElementById('admin-container');\n          anvil.call(formElement, 'save_structure', structureData);\n        };\n\n        // ---- User Management ----\n\n        // Populate the users table with data\n        window.populateUsers = function(users) {\n          const tableBody = document.getElementById('users-list');\n          tableBody.innerHTML = '';\n\n          if (!users || users.length === 0) {\n            const row = document.createElement('tr');\n            row.innerHTML = '<td colspan=\"6\" style=\"text-align: center;\">Aucun utilisateur trouvé</td>';\n            tableBody.appendChild(row);\n            return;\n          }\n\n          users.forEach(user => {\n            const row = document.createElement('tr');\n\n            row.innerHTML = `\n            <td>${user.name || ''}</td>\n            <td>${user.email || ''}</td>\n            <td>${user.phone || ''}</td>\n            <td>${user.structure || 'Indépendant'}</td>\n            <td>${user.supervisor ? 'Oui' : 'Non'}</td>\n            <td class=\"action-cell\">\n              <button class=\"table-action edit-user\" data-id=\"${user.id}\">Modifier</button>\n            </td>\n          `;\n\n            tableBody.appendChild(row);\n          });\n\n          // Attach event listeners to the newly created buttons\n          document.querySelectorAll('.edit-user').forEach(btn => {\n            btn.addEventListener('click', function() {\n              const userId = this.getAttribute('data-id');\n              window.editUser(userId);\n            });\n          });\n        };\n\n        // Show the user form for creating/editing\n        window.showUserForm = function(show = true, structures = []) {\n          const form = document.getElementById('user-form');\n          form.style.display = show ? 'block' : 'none';\n\n          // If structures are provided, populate the dropdown\n          if (structures && structures.length > 0) {\n            const structureSelect = document.getElementById('user-structure');\n\n            // Clear existing options except the first one (Indépendant)\n            while (structureSelect.options.length > 1) {\n              structureSelect.remove(1);\n            }\n\n            // Add the new options\n            structures.forEach(structure => {\n              if (structure !== 'Indépendant') {\n                const option = document.createElement('option');\n                option.value = structure;\n                option.textContent = structure;\n                structureSelect.appendChild(option);\n              }\n            });\n          }\n        };\n\n        // Clear the user form\n        window.clearUserForm = function() {\n          document.getElementById('user-form-title').textContent = 'Nouvel Utilisateur';\n          document.getElementById('user-name').value = '';\n          document.getElementById('user-email').value = '';\n          document.getElementById('user-phone').value = '';\n          document.getElementById('user-structure').value = 'Indépendant';\n          document.getElementById('user-supervisor').checked = false;\n          document.getElementById('user-language').value = 'EN';\n\n          window.currentUser = null;\n        };\n\n        // Display user details in the form\n        window.displayUserDetails = function(user, structures = []) {\n          console.log(\"Displaying user details:\", user);\n          console.log(\"Available structures:\", structures);\n          console.log(\"User structure value:\", user.structure);\n\n          document.getElementById('user-form-title').textContent = 'Modifier Utilisateur';\n          document.getElementById('user-name').value = user.name || '';\n          document.getElementById('user-email').value = user.email || '';\n          document.getElementById('user-phone').value = user.phone || '';\n\n          // Handle structure dropdown selection\n          const structureSelect = document.getElementById('user-structure');\n\n          // First populate the dropdown with available structures\n          if (structures && structures.length > 0) {\n            // Clear existing options\n            structureSelect.innerHTML = '';\n\n            // Add all options\n            structures.forEach(structure => {\n              const option = document.createElement('option');\n              option.value = structure;\n              option.textContent = structure;\n              structureSelect.appendChild(option);\n\n              // Debug\n              console.log(`Added structure option: ${structure}`);\n            });\n          }\n\n          // Set the correct structure value\n          const structureValue = user.structure || 'Indépendant';\n          console.log(\"Setting structure dropdown to:\", structureValue);\n\n          // Find and select the matching option\n          let optionFound = false;\n          for (let i = 0; i < structureSelect.options.length; i++) {\n            console.log(`Comparing option ${structureSelect.options[i].value} with ${structureValue}`);\n            if (structureSelect.options[i].value === structureValue) {\n              structureSelect.selectedIndex = i;\n              optionFound = true;\n              console.log(\"Match found! Setting selectedIndex to\", i);\n              break;\n            }\n          }\n\n          if (!optionFound) {\n            console.warn(\"No matching structure option found for:\", structureValue);\n            // Default to \"Indépendant\" if no match\n            for (let i = 0; i < structureSelect.options.length; i++) {\n              if (structureSelect.options[i].value === \"Indépendant\") {\n                structureSelect.selectedIndex = i;\n                break;\n              }\n            }\n          }\n\n          document.getElementById('user-supervisor').checked = user.supervisor || false;\n          document.getElementById('user-language').value = user.favorite_language || 'EN';\n\n          window.currentUser = user.id;\n          showUserForm(true);\n        };\n\n        // Edit a user (called from event handlers)\n        window.editUser = function(userId) {\n          const formElement = document.getElementById('admin-container');\n          anvil.call(formElement, 'get_user_details', userId);\n        };\n\n        // Save user data (called from event handlers)\n        window.saveUser = function() {\n          const userData = {\n            name: document.getElementById('user-name').value,\n            email: document.getElementById('user-email').value,\n            phone: document.getElementById('user-phone').value,\n            structure: document.getElementById('user-structure').value,\n            supervisor: document.getElementById('user-supervisor').checked,\n            favorite_language: document.getElementById('user-language').value\n          };\n\n          const formElement = document.getElementById('admin-container');\n          anvil.call(formElement, 'save_user', userData);\n        };\n\n        // Add vet to structure (called from event handlers)\n        window.addVetToStructure = function() {\n          const email = document.getElementById('add-vet-email').value;\n          if (!email) {\n            alert(\"Veuillez entrer un email valide.\");\n            return;\n          }\n\n          const formElement = document.getElementById('admin-container');\n          anvil.call(formElement, 'add_vet_to_structure', email);\n        };\n\n        // ---- Template Management ----\n\n        // Populate the templates table with data\n        window.populateTemplates = function(templates) {\n          const tableBody = document.getElementById('templates-list');\n          tableBody.innerHTML = '';\n\n          if (!templates || templates.length === 0) {\n            const row = document.createElement('tr');\n            row.innerHTML = '<td colspan=\"4\" style=\"text-align: center;\">Aucun template trouvé</td>';\n            tableBody.appendChild(row);\n            return;\n          }\n\n          templates.forEach(template => {\n            const row = document.createElement('tr');\n\n            // Convert priority to user-friendly text with null check\n            let priorityValue = template.priority != null ? template.priority : 0;\n            let priorityText = 'Standard';\n            let priorityClass = '';\n\n            if (priorityValue === 1) {\n              priorityText = 'Favoris';\n              priorityClass = 'priority-yellow';\n            } else if (priorityValue === 2) {\n              priorityText = 'Important';\n              priorityClass = 'priority-green';\n            }\n\n            row.innerHTML = `\n              <td>${template.template_name || ''}</td>\n              <td>${template.human_readable || ''}</td>\n              <td class=\"${priorityClass}\">${priorityText}</td>\n              <td class=\"action-cell\">\n                <button class=\"table-action edit-template\" data-name=\"${template.template_name}\">Modifier</button>\n              </td>\n            `;\n\n            tableBody.appendChild(row);\n          });\n\n          // Attach event listeners to the newly created buttons\n          document.querySelectorAll('.edit-template').forEach(btn => {\n            btn.addEventListener('click', function() {\n              const templateName = this.getAttribute('data-name');\n              window.editTemplate(templateName);\n            });\n          });\n        };\n\n        // Show the template form for creating/editing\n        window.showTemplateForm = function(show = true, users = []) {\n          const form = document.getElementById('template-form');\n          form.style.display = show ? 'block' : 'none';\n\n          // If users are provided, populate the assignment list\n          if (users && users.length > 0) {\n            const assignmentList = document.getElementById('user-assignment-list');\n            assignmentList.innerHTML = '';\n\n            users.forEach(user => {\n              const userCheckbox = document.createElement('div');\n              userCheckbox.className = 'form-check';\n              userCheckbox.innerHTML = `\n                <input type=\"checkbox\" id=\"user-${user.id}\" class=\"user-checkbox\" data-id=\"${user.id}\">\n                <label for=\"user-${user.id}\">${user.name} (${user.email})</label>\n              `;\n              assignmentList.appendChild(userCheckbox);\n            });\n          }\n        };\n\n        // Clear the template form\n        window.clearTemplateForm = function() {\n          document.getElementById('template-form-title').textContent = 'Nouveau Template';\n          document.getElementById('template-name').value = '';\n          document.getElementById('template-human-readable').value = '';\n          document.getElementById('template-priority').value = '0';\n          document.getElementById('template-prompt').value = '';\n          document.getElementById('template-display').value = 'false';\n          document.getElementById('template-text').value = '';\n\n          // Clear user assignments\n          const checkboxes = document.querySelectorAll('.user-checkbox');\n          checkboxes.forEach(checkbox => {\n            checkbox.checked = false;\n          });\n\n          window.currentTemplate = null;\n        };\n\n        // Display template details in the form\n        window.displayTemplateDetails = function(template, users = []) {\n          document.getElementById('template-form-title').textContent = 'Modifier Template';\n          document.getElementById('template-name').value = template.template_name || '';\n          document.getElementById('template-human-readable').value = template.human_readable || '';\n          document.getElementById('template-priority').value = template.priority != null ? template.priority.toString() : '0';\n          document.getElementById('template-prompt').value = template.prompt || '';\n          document.getElementById('template-display').value = template.display_template ? 'true' : 'false';\n          document.getElementById('template-text').value = template.text_to_display || '';\n\n          // Populate user assignments\n          if (users && users.length > 0) {\n            const assignmentList = document.getElementById('user-assignment-list');\n            assignmentList.innerHTML = '';\n\n            users.forEach(user => {\n              const userCheckbox = document.createElement('div');\n              userCheckbox.className = 'form-check';\n\n              // Check if this user has this template assigned\n              const isAssigned = user.templates && \n                user.templates.some(t => t.template_name === template.template_name);\n\n              userCheckbox.innerHTML = `\n                <input type=\"checkbox\" id=\"user-${user.id}\" class=\"user-checkbox\" data-id=\"${user.id}\" ${isAssigned ? 'checked' : ''}>\n                <label for=\"user-${user.id}\">${user.name} (${user.email})</label>\n              `;\n              assignmentList.appendChild(userCheckbox);\n            });\n          }\n\n          window.currentTemplate = template.template_name;\n          showTemplateForm(true);\n        };\n\n        // Edit a template (called from event handlers)\n        window.editTemplate = function(templateName) {\n          const formElement = document.getElementById('admin-container');\n          anvil.call(formElement, 'get_template_details', templateName);\n        };\n\n        // Save template data and user assignments (called from event handlers)\n        window.saveTemplate = function() {\n          // Gather template data\n          const templateData = {\n            template_name: document.getElementById('template-name').value,\n            human_readable: document.getElementById('template-human-readable').value,\n            priority: parseInt(document.getElementById('template-priority').value || '0'),\n            prompt: document.getElementById('template-prompt').value,\n            display_template: document.getElementById('template-display').value === 'true',\n            text_to_display: document.getElementById('template-text').value\n          };\n\n          // Gather selected user IDs\n          const selectedUserIds = [];\n          document.querySelectorAll('.user-checkbox:checked').forEach(checkbox => {\n            selectedUserIds.push(checkbox.getAttribute('data-id'));\n          });\n\n          const formElement = document.getElementById('admin-container');\n\n          // First save the template\n          anvil.call(formElement, 'save_template', templateData)\n            .then(success => {\n              if (success && selectedUserIds.length > 0) {\n                // Then assign to selected users\n                return anvil.call(formElement, 'assign_template_to_users', templateData.template_name, selectedUserIds);\n              }\n              return success;\n            })\n            .then(finalSuccess => {\n              if (finalSuccess) {\n                // Hide the form on success\n                showTemplateForm(false);\n              }\n            });\n        };\n\n        // ---- Event Attachment Function ----\n        window.__attachAdminEvents = function() {\n          console.log(\"Attaching Admin event handlers...\");\n\n          // ---- Tab Switching ----\n          document.querySelectorAll('.tab-btn').forEach(btn => {\n            btn.replaceWith(btn.cloneNode(true));\n          });\n\n          document.querySelectorAll('.tab-btn').forEach(btn => {\n            btn.addEventListener('click', function() {\n              showTab(this.getAttribute('data-tab'));\n            });\n          });\n\n          // ---- Back Button ----\n          const backBtn = document.getElementById('back-btn');\n          if (backBtn) {\n            backBtn.replaceWith(backBtn.cloneNode(true));\n            document.getElementById('back-btn').addEventListener('click', function(event) {\n              anvil.call(event.target, 'back_to_home');\n            });\n          }\n\n          // ---- Structure Management Buttons ----\n          const newStructureBtn = document.getElementById('new-structure-btn');\n          const cancelStructureBtn = document.getElementById('cancel-structure-btn');\n          const saveStructureBtn = document.getElementById('save-structure-btn');\n\n          // Replace with clones to remove old event listeners\n          if (newStructureBtn) newStructureBtn.replaceWith(newStructureBtn.cloneNode(true));\n          if (cancelStructureBtn) cancelStructureBtn.replaceWith(cancelStructureBtn.cloneNode(true));\n          if (saveStructureBtn) saveStructureBtn.replaceWith(saveStructureBtn.cloneNode(true));\n\n          // Re-attach event listeners\n          document.getElementById('new-structure-btn').addEventListener('click', function(event) {\n            anvil.call(event.target, 'new_structure');\n          });\n\n          document.getElementById('cancel-structure-btn').addEventListener('click', function() {\n            showStructureForm(false);\n          });\n\n          document.getElementById('save-structure-btn').addEventListener('click', function() {\n            saveStructure();\n          });\n\n          // ---- User Management Buttons ----\n          const newUserBtn = document.getElementById('new-user-btn');\n          const cancelUserBtn = document.getElementById('cancel-user-btn');\n          const saveUserBtn = document.getElementById('save-user-btn');\n\n          // Replace with clones to remove old event listeners\n          if (newUserBtn) newUserBtn.replaceWith(newUserBtn.cloneNode(true));\n          if (cancelUserBtn) cancelUserBtn.replaceWith(cancelUserBtn.cloneNode(true));\n          if (saveUserBtn) saveUserBtn.replaceWith(saveUserBtn.cloneNode(true));\n\n          // Re-attach event listeners\n          document.getElementById('new-user-btn').addEventListener('click', function(event) {\n            anvil.call(event.target, 'new_user');\n          });\n\n          document.getElementById('cancel-user-btn').addEventListener('click', function() {\n            showUserForm(false);\n          });\n\n          document.getElementById('save-user-btn').addEventListener('click', function() {\n            saveUser();\n          });\n\n          // ---- Add Vet to Structure Button ----\n          const addVetBtn = document.getElementById('add-vet-btn');\n          if (addVetBtn) {\n            addVetBtn.replaceWith(addVetBtn.cloneNode(true));\n            document.getElementById('add-vet-btn').addEventListener('click', function() {\n              addVetToStructure();\n            });\n          }\n\n          // ---- Template Management Buttons ----\n          const newTemplateBtn = document.getElementById('new-template-btn');\n          const cancelTemplateBtn = document.getElementById('cancel-template-btn');\n          const saveTemplateBtn = document.getElementById('save-template-btn');\n\n          // Replace with clones to remove old event listeners\n          if (newTemplateBtn) newTemplateBtn.replaceWith(newTemplateBtn.cloneNode(true));\n          if (cancelTemplateBtn) cancelTemplateBtn.replaceWith(cancelTemplateBtn.cloneNode(true));\n          if (saveTemplateBtn) saveTemplateBtn.replaceWith(saveTemplateBtn.cloneNode(true));\n\n          // Re-attach event listeners\n          document.getElementById('new-template-btn').addEventListener('click', function(event) {\n            anvil.call(event.target, 'new_template');\n          });\n\n          document.getElementById('cancel-template-btn').addEventListener('click', function() {\n            showTemplateForm(false);\n          });\n\n          document.getElementById('save-template-btn').addEventListener('click', function() {\n            saveTemplate();\n          });\n\n          console.log(\"Admin event handlers attached successfully.\");\n        };\n      }\n\n      // ---------------------------------------\n      // 2) Attach event listeners immediately after DOM loads\n      // ---------------------------------------\n      window.__attachAdminEvents();\n\n      // ---------------------------------------\n      // 3) Helper for updating time display\n      // ---------------------------------------\n      function updateTime() {\n        const now = new Date();\n        const hrs = now.getHours().toString().padStart(2, '0');\n        const mins = now.getMinutes().toString().padStart(2, '0');\n        document.querySelector('.time').textContent = `${hrs}h${mins}`;\n      }\n      updateTime();\n      setInterval(updateTime, 60000);\n\n      // ---------------------------------------\n      // 4) Session management\n      // ---------------------------------------\n      if (!window.__session_handlers_initialized) {\n        window.__session_handlers_initialized = true;\n\n        window.setupSessionHandlers = function() {\n          document.addEventListener('visibilitychange', function() {\n            if (document.visibilityState === 'visible') {\n              const formElement = document.getElementById('admin-container');\n              if (formElement) {\n                anvil.call(formElement, 'refresh_session_relay');\n              }\n            }\n          });\n\n          window.addEventListener('online', function() {\n            const formElement = document.getElementById('admin-container');\n            if (formElement) {\n              anvil.call(formElement, 'refresh_session_relay');\n            }\n          });\n        };\n\n        window.setupSessionHandlers();\n      }\n    </script>\n  </body>\n</html>"
  type: HtmlTemplate
is_package: true
