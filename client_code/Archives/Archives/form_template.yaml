components:
- layout_properties: {slot: default}
  name: header_nav_1
  properties: {active_tab: Archives}
  type: form:Components.HeaderNav
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"utf-8\">\n  <!-- Ajout du viewport pour le comportement responsive -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* =====================================================\n       Styles de base (polices, resets, etc.)\n    ===================================================== */\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      /* Empêche le défilement du body pour que notre conteneur défilable gère le scrolling */\n      overflow: hidden;\n    }\n\n    .container {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      max-width: 800px;\n      width: 100%;\n      margin: 0 auto;\n      background-color: white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .fixed-section {\n      background: white;\n      z-index: 10;\n    }\n\n    .nav-tabs {\n      display: flex;\n      width: 100%;\n      border-bottom: 1px solid #ddd;\n    }\n\n    .nav-tab {\n      flex: 1;\n      padding: 8px 16px;\n      cursor: pointer;\n      border: 1px solid #ccc;\n      border-bottom: none;\n      background: #f8f8f8;\n      font-size: 14px;\n      position: relative;\n      margin-right: -1px;\n      text-align: center;\n    }\n    .nav-tab.active {\n      background: #e5e5e5;\n      border-top: 1px solid #999;\n      border-left: 1px solid #999;\n      border-right: 1px solid #999;\n      border-bottom: 1px solid #e5e5e5;\n      margin-bottom: -1px;\n    }\n\n    .actions-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 15px 20px;\n    }\n\n    .left-section {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n      flex-wrap: wrap;\n    }\n\n    .create-button {\n      padding: 8px 16px;\n      background: #fff;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .create-button:hover {\n      background: #f5f5f5;\n    }\n\n    .time {\n      color: #666;\n      font-size: 14px;\n    }\n\n    .search-bar {\n      width: calc(100% - 40px);\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      margin: 0 20px 15px 20px;\n    }\n\n    .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n    }\n\n    .record-entry {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      padding: 10px;\n      margin-bottom: 10px;\n      background: #fff;\n      cursor: pointer;\n    }\n\n    .record-subcase {\n      flex: 1;\n      padding: 0 10px;\n      text-align: left;\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    }\n\n    /* Style for the trash icon container */\n    .trash-icon {\n      width: auto;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      padding: 0 4px;\n      cursor: pointer;\n      /* no flex: 1 here, we want it smaller */\n    }\n\n    .trash-icon svg {\n      width: 18px;\n      height: 18px;\n      fill: #888;\n      transition: fill 0.2s;\n    }\n    .trash-icon:hover svg {\n      fill: #c00;\n    }\n\n    .scrollable-content::-webkit-scrollbar {\n      width: 8px;\n    }\n    .scrollable-content::-webkit-scrollbar-track {\n      background: #f1f1f1;\n    }\n    .scrollable-content::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 4px;\n    }\n    .scrollable-content::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n\n    /* NOUVEAUX STYLES DE LA BARRE D'ÉTAT */\n    .status-nav {\n      display: flex;\n      align-items: center;\n      background-color: white;\n      border: 1px solid #e0e0e0;\n      border-radius: 25px;\n      padding: 5px;\n      width: fit-content;\n    }\n\n    .status-option {\n      display: flex;\n      align-items: center;\n      padding: 8px 16px;\n      gap: 8px;\n      color: #666;\n      cursor: pointer;\n      text-decoration: none;\n      font-family: system-ui, -apple-system, sans-serif;\n    }\n\n    .status-option:hover {\n      background-color: #f5f5f5;\n      border-radius: 20px;\n    }\n\n    .status-option.active {\n      background-color: #e8f0fe;\n      border-radius: 20px;\n      color: #1a73e8;\n    }\n\n    .icon {\n      width: 18px;\n      height: 18px;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    /* =====================================================\n       Ajustements responsive\n    ===================================================== */\n    @media (max-width: 800px) {\n      .container {\n        /* S'assurer que le conteneur remplit toujours le viewport */\n        height: 100vh;\n      }\n      .nav-tab {\n        font-size: 12px;\n        padding: 6px 8px;\n      }\n      .actions-row {\n        padding: 10px 15px;\n      }\n      .search-bar {\n        margin: 0 10px 15px 10px;\n      }\n      .create-button {\n        padding: 6px 12px;\n        font-size: 13px;\n      }\n      .status-option {\n        padding: 6px 10px;\n        font-size: 13px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- Section fixe en haut -->\n    <div class=\"fixed-section\">\n      <div anvil-slot=\"default\"></div>\n\n      <div class=\"actions-row\">\n        <!-- SECTION GAUCHE contenant le bouton \"Créer\" + la nouvelle barre d'état + l'heure -->\n        <div class=\"left-section\">\n          <button class=\"create-button\" id=\"createBtn\">+ Créer</button>\n\n          <!-- NOUVELLE BARRE D'ÉTAT -->\n          <nav class=\"status-nav\">\n            <a href=\"#\" class=\"status-option active\" data-filter=\"Afficher tout\">\n              <span class=\"icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"/>\n                </svg>\n              </span>\n              Afficher tout\n            </a>\n            <a href=\"#\" class=\"status-option\" data-filter=\"à corriger\">\n              <span class=\"icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\n                </svg>\n              </span>\n              A corriger\n            </a>\n            <a href=\"#\" class=\"status-option\" data-filter=\"validé\">\n              <span class=\"icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\"/>\n                </svg>\n              </span>\n              Validé\n            </a>\n            <a href=\"#\" class=\"status-option\" data-filter=\"envoyé\">\n              <span class=\"icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"/>\n                </svg>\n              </span>\n              Envoyé\n            </a>\n          </nav>\n\n          <div class=\"time\">--:--</div>\n        </div>\n      </div>\n\n      <input type=\"text\" class=\"search-bar\" placeholder=\"Rechercher\">\n    </div>\n\n    <!-- Contenu défilable où s'affichent les rapports -->\n    <div class=\"scrollable-content\" id=\"reportsContainer\">\n      <!-- Rempli dynamiquement via JS : populateReports(...) -->\n    </div>\n  </div>\n\n  <script>\n    // ---------------------------------------------------------------------------\n    // 1) Déclarations globales à exécuter une seule fois : définition de populateReports\n    // ---------------------------------------------------------------------------\n    if (!window.__archives_globals) {\n      window.__archives_globals = true;\n\n      // Fonction utilitaire pour formater la valeur last_modified\n      function formatLastModified(dateStr) {\n        /*\n          Attend une date sous la forme \"YYYY-MM-DD HH:MM\"\n          - Si l'année est celle en cours, affiche \"J MMM\" (ex. \"5 janv.\").\n          - Sinon, affiche \"l'an dernier\".\n        */\n        if (!dateStr) return \"(N/A)\";\n        const parts = dateStr.split(\" \");\n        if (parts.length < 2) return dateStr;\n\n        const dateOnly = parts[0]; // \"YYYY-MM-DD\"\n        const [yearStr, monthStr, dayStr] = dateOnly.split(\"-\");\n        const year = parseInt(yearStr, 10);\n        const month = parseInt(monthStr, 10);\n        const day = parseInt(dayStr, 10);\n\n        const currentYear = new Date().getFullYear();\n\n        if (year !== currentYear) {\n          return \"l'an dernier\";\n        } else {\n          // Afficher \"jour abréviationDuMois\"\n          const monthNames = [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\"];\n          return `${day} ${monthNames[month - 1] || ''}`.trim();\n        }\n      }\n\n      // Nouveau parseur pour la date+heure \"YYYY-MM-DD HH:MM\"\n      function parseDateTime(dateStr) {\n        if (!dateStr) return 0;\n        const parts = dateStr.split(\" \");\n        if (parts.length < 2) return 0;\n        const [datePart, timePart] = parts;\n        const [year, month, day] = datePart.split(\"-\").map(Number);\n        const [hour, minute] = timePart.split(\":\").map(Number);\n        // Crée un objet Date local (année, mois-1, jour, heure, minute)\n        return new Date(year, month - 1, day, hour, minute).getTime();\n      }\n\n      // Appelé par Python via self.call_js(\"populateReports\", reports_list)\n      window.populateReports = function(reports) {\n        /*\n          'reports' est une liste de dictionnaires, par ex.:\n            [\n              {\n                'file_name': 'nom_du_rapport',\n                'name': 'Fido',\n                'statut': 'En cours',\n                'report_rich': '<p>...</p>',\n                'last_modified': '2023-12-01 10:45',\n                'id': ...,\n                ...\n              },\n              ...\n            ]\n        */\n        const container = document.getElementById(\"reportsContainer\");\n        if (!container) {\n          console.log(\"populateReports : #reportsContainer introuvable.\");\n          return;\n        }\n\n        // Trier les rapports pour que les plus récents (selon date+heure) apparaissent en haut\n        reports.sort((a, b) => parseDateTime(b.last_modified) - parseDateTime(a.last_modified));\n\n        // Vider le conteneur existant\n        container.innerHTML = \"\";\n\n        // Créer les entrées\n        reports.forEach(report => {\n          const entryDiv = document.createElement(\"div\");\n          entryDiv.className = \"record-entry\";\n\n          // 1) PATIENT NAME\n          const nameDiv = document.createElement(\"div\");\n          nameDiv.className = \"record-subcase\";\n          nameDiv.textContent = report.name || \"(Aucun)\";\n\n          // 2) DATE\n          const dateDiv = document.createElement(\"div\");\n          dateDiv.className = \"record-subcase\";\n          dateDiv.textContent = formatLastModified(report.last_modified);\n\n          // 3) STATUT\n          const statutDiv = document.createElement(\"div\");\n          statutDiv.className = \"record-subcase\";\n          statutDiv.textContent = report.statut || \"(Non spécifié)\";\n\n          // 4) TRASH ICON (far-right)\n          const trashDiv = document.createElement(\"div\");\n          trashDiv.className = \"trash-icon\";\n          trashDiv.innerHTML = `\n            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M15 4V3c0-1.11-.89-2-2-2h-2c-1.11 0-2 .89-2 2v1H5v2h14V4h-4zm-6 0V3h2v1h-2zm-1 4v12a2 2 0 002 2h4a2 2 0 002-2V8H8z\"/>\n            </svg>\n          `;\n\n          // Prevent row-click from firing when clicking on trash icon\n          trashDiv.addEventListener(\"click\", function(event) {\n            event.stopPropagation();\n            anvil.call(event.target, \"delete_report_client_side\", report.report_rich);\n          });\n\n          // Event: clicking the row opens the form\n          entryDiv.addEventListener(\"click\", function() {\n            anvil.call(this, \"open_audio_manager_form\", report);\n          });\n\n          // Assembler the sub-elements\n          entryDiv.appendChild(nameDiv);\n          entryDiv.appendChild(dateDiv);\n          entryDiv.appendChild(statutDiv);\n          entryDiv.appendChild(trashDiv);\n\n          // Ajouter au conteneur\n          container.appendChild(entryDiv);\n        });\n      };\n    }\n\n    // ---------------------------------------------------------------------------\n    // 2) Attacher les écouteurs d'événements pour chaque instance du DOM\n    // ---------------------------------------------------------------------------\n    (function attachArchivesEvents(){\n      console.log(\"Archives : Attachement des écouteurs d'événements...\");\n\n      // Gestion des onglets de navigation\n      const tabs = document.querySelectorAll('.nav-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (event) => {\n          // Retirer l'état actif de l'onglet actuel\n          const oldActive = document.querySelector('.nav-tab.active');\n          if (oldActive) oldActive.classList.remove('active');\n\n          // Marquer l'onglet cliqué comme actif\n          tab.classList.add('active');\n\n          // Selon la valeur de l'attribut data-tab\n          const tabValue = tab.getAttribute(\"data-tab\");\n          if (tabValue === 'Production') {\n            anvil.call(event.target, 'open_production_form');\n          } else if (tabValue === 'Modèles/IA') {\n            anvil.call(event.target, 'open_templates_form');\n          } else if (tabValue === 'Paramètres') {\n            anvil.call(event.target, 'open_settings_form');\n          } else if (tabValue === 'Archives') {\n            // Ne rien faire\n          }\n        });\n      });\n\n      // Bouton \"Créer\"\n      const createBtn = document.getElementById('createBtn');\n      if (createBtn) {\n        // Supprimer les anciens écouteurs en clonant\n        createBtn.replaceWith(createBtn.cloneNode(true));\n        const newCreateBtn = document.getElementById('createBtn');\n        newCreateBtn.addEventListener('click', (event) => {\n          anvil.call(event.target, 'open_create_form');\n        });\n      }\n\n      // Gestion de la BARRE D'ÉTAT (filtrer par statut)\n      const statusOptions = document.querySelectorAll('.status-option');\n      statusOptions.forEach(option => {\n        option.addEventListener('click', (event) => {\n          event.preventDefault();\n          // Retirer l'état actif de l'option précédente\n          const oldActive = document.querySelector('.status-option.active');\n          if (oldActive) oldActive.classList.remove('active');\n\n          // Marquer celle-ci comme active\n          option.classList.add('active');\n\n          // Récupérer le filtre depuis data-filter\n          const filterVal = option.getAttribute('data-filter');\n          anvil.call(event.target, 'filter_reports_client', filterVal);\n        });\n      });\n\n      // Écouter les changements dans la barre de recherche et appeler une méthode Python\n      const searchInput = document.querySelector('.search-bar');\n      if (searchInput) {\n        searchInput.addEventListener('input', function(event) {\n          const query = event.target.value;\n          anvil.call(this, 'search_reports_client', query);\n        });\n      }\n\n      console.log(\"Archives : Écouteurs d'événements attachés.\");\n    })();\n\n    // ---------------------------------------------------------------------------\n    // 3) Affichage de l'heure (mise à jour toutes les minutes)\n    // ---------------------------------------------------------------------------\n    function updateTime() {\n      const now = new Date();\n      const hrs = now.getHours().toString().padStart(2, '0');\n      const mins = now.getMinutes().toString().padStart(2, '0');\n      document.querySelector('.time').textContent = `${hrs}h${mins}`;\n    }\n    updateTime();\n    setInterval(updateTime, 60000);\n  </script>\n  <script>\n    // Initialize only once\n    if (!window.__session_handlers_initialized) {\n      window.__session_handlers_initialized = true;\n      \n      // Session handler setup\n      window.setupSessionHandlers = function() {\n        // Tab visibility change\n        document.addEventListener('visibilitychange', function() {\n          if (document.visibilityState === 'visible') {\n            anvil.call(document.body, 'refresh_session_relay');\n          }\n        });\n        \n        // Online status change\n        window.addEventListener('online', function() {\n          anvil.call(document.body, 'refresh_session_relay');\n        });\n      };\n    }\n  </script>\n</body>\n</html>\n"
  type: HtmlTemplate
is_package: true
