components:
- layout_properties: {slot: feedback_slot}
  name: user_feedback_1
  properties: {}
  type: form:Components.UserFeedback
- layout_properties: {slot: playback_slot}
  name: audio_playback_1
  properties: {}
  type: form:Components.AudioPlayback
- layout_properties: {slot: editor_slot}
  name: text_editor_1
  properties: {show_undo_redo_buttons: true}
  type: form:Components.TextEditor
- event_bindings: {x_save_clicked: report_footer_1_save_clicked, x_status_clicked: report_footer_1_status_clicked}
  layout_properties: {slot: bottom_buttons_slot}
  name: report_footer_1
  properties: {}
  type: form:Components.ReportFooter
- layout_properties: {slot: recorder_slot}
  name: recording_widget_1
  properties: {}
  type: form:Components.RecordingWidget
- data_bindings:
  - {code: 'self.item['''']', property: title, writeback: false}
  layout_properties: {slot: default}
  name: header_return_1
  properties: {return_form: Archives.ArchivesForm, title: ''}
  type: form:Components.HeaderReturn
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Edit Report</title>
          <style>
            :root {
              --footer-height: 75px; /* Hauteur approx. du pied de page principal */
            }
            * { box-sizing: border-box; font-family: Arial, sans-serif; margin: 0; padding: 0; }
            body { background-color: #f5f5f5; height: 100vh; overflow: hidden; }

            .scrollable-content {
              flex: 1;
              overflow-y: auto;
              padding: 20px;
              /* Espace en bas pour ne pas être masqué par le footer */
              padding-bottom: calc(var(--footer-height) + 20px);
            }

            /* NEW: Styles for the audio section now inside the main content */
            .edit-audio-section {
              background: #f8f8f8;
              border: 1px solid #ddd;
              padding: 15px;
              margin-bottom: 20px;
              border-radius: 8px;
              box-shadow: 0 2px 5px rgba(0,0,0,0.05);
              text-align: center;
            }

            .edit-instructions {
              font-size: 14px; color: #555; margin-bottom: 10px;
            }
            .edit-instructions em {
              color: #333;
              background-color: #e9e9e9;
              padding: 2px 5px;
              border-radius: 3px;
            }

            #audioInputContainer, #audioDecisionContainer, #audioProcessingContainer {
              width: 100%; display: none;
            }
            #audioDecisionContainer {
              display: flex; flex-direction: column; align-items: center; gap: 10px;
            }
            .decision-buttons { display: flex; gap: 15px; }
            .decision-button { padding: 10px 20px; border-radius: 4px; border: 1px solid #ddd; cursor: pointer; font-size: 14px; font-weight: bold; }
            .process { background-color: #4CAF50; color: white; border-color: #4CAF50; }
            .discard { background-color: #f44336; color: white; border-color: #f44336; }
          </style>
        </head>
        <body>
          <div class="responsive-container" id="editor-stable-anchor">
            <div anvil-slot="default"></div>

            <div class="scrollable-content">

              <!-- MOVED audio section here -->
              <div class="edit-audio-section">
                <div id="audioInputContainer">
                  <div class="edit-instructions">
                    <p id="audioManagerEdit-p-instructions"></p>
                    <p>
                      <strong id="audioManagerEdit-strong-example"></strong>
                      <em id="audioManagerEdit-em-exampleText"></em>
                    </p>
                  </div>
                  <div anvil-slot="recorder_slot"></div>
                </div>

                <div id="audioDecisionContainer">
                  <div anvil-slot="playback_slot"></div>
                  <div class="decision-buttons">
                    <button id="audioManagerEdit-button-discard" class="decision-button discard"></button>
                    <button id="audioManagerEdit-button-process" class="decision-button process"></button>
                  </div>
                </div>

                <div id="audioProcessingContainer">
                  <div anvil-slot="feedback_slot"></div>
                </div>
              </div>

              <!-- Text editor remains here -->
              <div anvil-slot="editor_slot"></div>
            </div>

            <!-- Report footer remains at the bottom -->
            <div anvil-slot="bottom_buttons_slot"></div>
          </div>

          <script>
            if (!window.__editor_globals) {
              window.__editor_globals = true;
              const logger = window.createLogger('AudioManagerEdit');
              window.setAudioWorkflowState = (state) => {
                logger.log(`Setting audio workflow state to: ${state}`);
                const input = document.getElementById('audioInputContainer');
                const decision = document.getElementById('audioDecisionContainer');
                const processing = document.getElementById('audioProcessingContainer');
                if(input) input.style.display = 'none';
                if(decision) decision.style.display = 'none';
                if(processing) processing.style.display = 'none';
                if (state === 'decision') { if(decision) decision.style.display = 'flex'; }
                else if (state === 'processing') { if(processing) processing.style.display = 'block'; }
                else { if(input) input.style.display = 'block'; }
              };
              window.attachEditorEvents = function() {
                logger.log('Attaching editor event listeners.');
                const stableAnchor = document.getElementById('editor-stable-anchor');
                const reattach = (id, handler) => {
                  const element = document.getElementById(id);
                  if(element) {
                    const newElement = element.cloneNode(true);
                    element.parentNode.replaceChild(newElement, element);
                    newElement.addEventListener('click', handler);
                  } else {
                    logger.warn(`Element with ID '${id}' not found for event attachment.`);
                  }
                };
                reattach('audioManagerEdit-button-discard', () => {
                  anvil.call(stableAnchor, 'reset_ui_to_input_state');
                });
                reattach('audioManagerEdit-button-process', () => {
                  anvil.call(stableAnchor, 'process_modification');
                });
              };
            }
            attachEditorEvents();
          </script>
        </body>
      </html>
  type: HtmlTemplate
is_package: true
