components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <!-- Add viewport for responsive behavior -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <style>\n    /* =====================================================\n       Basic styles (fonts, resets, etc.)\n    ===================================================== */\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      /* Prevent body scrolling so our scrollable container handles it */\n      overflow: hidden;\n    }\n\n    .container {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      max-width: 800px;\n      width: 100%;\n      margin: 0 auto;\n      background-color: white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .fixed-section {\n      background: white;\n      z-index: 10;\n    }\n\n    .nav-tabs {\n      display: flex;\n      width: 100%;\n      border-bottom: 1px solid #ddd;\n    }\n\n    .nav-tab {\n      flex: 1;\n      padding: 8px 16px;\n      cursor: pointer;\n      border: 1px solid #ccc;\n      border-bottom: none;\n      background: #f8f8f8;\n      font-size: 14px;\n      position: relative;\n      margin-right: -1px;\n      text-align: center;\n    }\n    .nav-tab.active {\n      background: #e5e5e5;\n      border-top: 1px solid #999;\n      border-left: 1px solid #999;\n      border-right: 1px solid #999;\n      border-bottom: 1px solid #e5e5e5;\n      margin-bottom: -1px;\n    }\n\n    .actions-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 15px 20px;\n    }\n\n    .left-section {\n      display: flex;\n      align-items: center;\n      gap: 15px;\n      flex-wrap: wrap;\n    }\n\n    .create-button {\n      padding: 8px 16px;\n      background: #fff;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .create-button:hover {\n      background: #f5f5f5;\n    }\n\n    .time {\n      color: #666;\n      font-size: 14px;\n    }\n\n    .search-bar {\n      width: calc(100% - 40px);\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      margin: 0 20px 15px 20px;\n    }\n\n    .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n    }\n\n    .record-entry {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      padding: 10px;\n      margin-bottom: 10px;\n      cursor: pointer;\n      background: #fff;\n    }\n\n    .record-subcase {\n      flex: 1;\n      padding: 0 10px;\n      text-align: left;\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    }\n\n    /* TRASH ICON STYLES */\n    .trash-icon {\n      width: auto;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      padding: 0 4px;\n      cursor: pointer;\n    }\n    .trash-icon svg {\n      width: 18px;\n      height: 18px;\n      fill: #888;\n      transition: fill 0.2s;\n    }\n    .trash-icon:hover svg {\n      fill: #c00;\n    }\n\n    .scrollable-content::-webkit-scrollbar {\n      width: 8px;\n    }\n    .scrollable-content::-webkit-scrollbar-track {\n      background: #f1f1f1;\n    }\n    .scrollable-content::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 4px;\n    }\n    .scrollable-content::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n\n    /* NEW STATUS BAR STYLES */\n    .status-nav {\n      display: flex;\n      align-items: center;\n      background-color: white;\n      border: 1px solid #e0e0e0;\n      border-radius: 25px;\n      padding: 5px;\n      width: fit-content;\n    }\n\n    .status-option {\n      display: flex;\n      align-items: center;\n      padding: 8px 16px;\n      gap: 8px;\n      color: #666;\n      cursor: pointer;\n      text-decoration: none;\n      font-family: system-ui, -apple-system, sans-serif;\n    }\n\n    .status-option:hover {\n      background-color: #f5f5f5;\n      border-radius: 20px;\n    }\n\n    .status-option.active {\n      background-color: #e8f0fe;\n      border-radius: 20px;\n      color: #1a73e8;\n    }\n\n    .icon {\n      width: 18px;\n      height: 18px;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    /* =====================================================\n       Responsive adjustments\n    ===================================================== */\n    @media (max-width: 800px) {\n      .container {\n        height: 100vh;\n      }\n      .nav-tab {\n        font-size: 12px;\n        padding: 6px 8px;\n      }\n      .actions-row {\n        padding: 10px 15px;\n      }\n      .search-bar {\n        margin: 0 10px 15px 10px;\n      }\n      .create-button {\n        padding: 6px 12px;\n        font-size: 13px;\n      }\n      .status-option {\n        padding: 6px 10px;\n        font-size: 13px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- Fixed top section -->\n    <div class=\"fixed-section\">\n      <div class=\"nav-tabs\">\n        <!-- The data-tab attribute is used for navigation logic in JS -->\n        <button class=\"nav-tab\" data-tab=\"Production\">Production</button>\n        <button class=\"nav-tab\" data-tab=\"Templates/AI\">Templates/AI</button>\n        <button class=\"nav-tab active\" data-tab=\"Archives\">Archives</button>\n        <button class=\"nav-tab\" data-tab=\"Settings\">Settings</button>\n      </div>\n\n      <div class=\"actions-row\">\n        <!-- LEFT SECTION containing the \"Create\" button + new status bar + time -->\n        <div class=\"left-section\">\n          <button class=\"create-button\" id=\"createBtn\">+ Create</button>\n\n          <!-- NEW STATUS BAR -->\n          <nav class=\"status-nav\">\n            <a href=\"#\" class=\"status-option active\" data-filter=\"Show all\">\n              <span class=\"icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"/>\n                </svg>\n              </span>\n              Show all\n            </a>\n            <a href=\"#\" class=\"status-option\" data-filter=\"Needs correction\">\n              <span class=\"icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\n                </svg>\n              </span>\n              Needs correction\n            </a>\n            <a href=\"#\" class=\"status-option\" data-filter=\"Validated\">\n              <span class=\"icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\"/>\n                </svg>\n              </span>\n              Validated\n            </a>\n            <a href=\"#\" class=\"status-option\" data-filter=\"Sent\">\n              <span class=\"icon\">\n                <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\"/>\n                </svg>\n              </span>\n              Sent\n            </a>\n          </nav>\n\n          <div class=\"time\">--:--</div>\n        </div>\n      </div>\n\n      <input type=\"text\" class=\"search-bar\" placeholder=\"Search\">\n    </div>\n\n    <!-- Scrollable content where reports are displayed -->\n    <div class=\"scrollable-content\" id=\"reportsContainer\">\n      <!-- Dynamically filled via JS: populateReports(...) -->\n    </div>\n  </div>\n\n  <script>\n    // ---------------------------------------------------------------------------\n    // 1) Global declarations: definition of populateReports\n    // ---------------------------------------------------------------------------\n    if (!window.__archives_globals) {\n      window.__archives_globals = true;\n\n      // Utility function to format the last_modified value\n      function formatLastModified(dateStr) {\n        /*\n          Expects a date like \"YYYY-MM-DD HH:MM\"\n          - If year == current year, display \"D MMM\" (e.g., \"5 Jan\").\n          - Otherwise, display \"last year\".\n        */\n        if (!dateStr) return \"(N/A)\";\n        const parts = dateStr.split(\" \");\n        if (parts.length < 2) return dateStr;\n\n        const dateOnly = parts[0]; // \"YYYY-MM-DD\"\n        const [yearStr, monthStr, dayStr] = dateOnly.split(\"-\");\n        const year = parseInt(yearStr, 10);\n        const month = parseInt(monthStr, 10);\n        const day = parseInt(dayStr, 10);\n\n        const currentYear = new Date().getFullYear();\n\n        if (year !== currentYear) {\n          return \"last year\";\n        } else {\n          // \"day abbreviatedMonth\"\n          const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n          return `${day} ${monthNames[month - 1] || ''}`.trim();\n        }\n      }\n\n      // Called by Python -> self.call_js(\"populateReports\", reports_list)\n      window.populateReports = function(reports) {\n        /*\n          We will sort ascending (oldest -> newest), then append in reverse\n          so that the newest are at the top.\n        */\n        const container = document.getElementById(\"reportsContainer\");\n        if (!container) {\n          console.log(\"populateReports: #reportsContainer not found.\");\n          return;\n        }\n\n        // 1) Sort ascending by date/time\n        reports.sort((a, b) => new Date(a.last_modified) - new Date(b.last_modified));\n\n        // 2) Clear the container\n        container.innerHTML = \"\";\n\n        // 3) Loop from the last item to the first => newest appended first => top\n        for (let i = reports.length - 1; i >= 0; i--) {\n          const report = reports[i];\n\n          const entryDiv = document.createElement(\"div\");\n          entryDiv.className = \"record-entry\";\n\n          // (1) PATIENT NAME\n          const nameDiv = document.createElement(\"div\");\n          nameDiv.className = \"record-subcase\";\n          nameDiv.textContent = report.name || \"(None)\";\n\n          // (2) DATE\n          const dateDiv = document.createElement(\"div\");\n          dateDiv.className = \"record-subcase\";\n          dateDiv.textContent = formatLastModified(report.last_modified);\n\n          // (3) STATUS\n          const statutDiv = document.createElement(\"div\");\n          statutDiv.className = \"record-subcase\";\n          statutDiv.textContent = report.statut || \"(Not specified)\";\n\n          // (4) TRASH ICON\n          const trashDiv = document.createElement(\"div\");\n          trashDiv.className = \"trash-icon\";\n          trashDiv.innerHTML = `\n            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M15 4V3c0-1.11-.89-2-2-2h-2c-1.11 0-2 .89-2 2v1H5v2h14V4h-4zm-6 0V3h2v1h-2zm-1 4v12a2 2 0 002 2h4a2 2 0 002-2V8H8z\"/>\n            </svg>\n          `;\n          // Prevent row-click if user clicks trash\n          trashDiv.addEventListener(\"click\", function(ev) {\n            ev.stopPropagation();\n            anvil.call(ev.target, \"delete_report_client_side\", report.report_rich);\n          });\n\n          // Clicking the row -> open the manager form\n          entryDiv.addEventListener(\"click\", function(event) {\n            anvil.call(event.target, \"open_audio_manager_form\", report);\n          });\n\n          // Assemble\n          entryDiv.appendChild(nameDiv);\n          entryDiv.appendChild(dateDiv);\n          entryDiv.appendChild(statutDiv);\n          entryDiv.appendChild(trashDiv);\n\n          // Finally, append to the container\n          container.appendChild(entryDiv);\n        }\n      };\n    }\n\n    // ---------------------------------------------------------------------------\n    // 2) Attach event listeners for each instance of the DOM\n    // ---------------------------------------------------------------------------\n    (function attachArchivesEvents(){\n      console.log(\"EN_Archives: Attaching event listeners...\");\n\n      // Navigation tabs\n      const tabs = document.querySelectorAll('.nav-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (event) => {\n          const oldActive = document.querySelector('.nav-tab.active');\n          if (oldActive) oldActive.classList.remove('active');\n\n          tab.classList.add('active');\n          const tabValue = tab.getAttribute(\"data-tab\");\n          if (tabValue === 'Production') {\n            anvil.call(event.target, 'open_production_form');\n          } else if (tabValue === 'Templates/AI') {\n            anvil.call(event.target, 'open_templates_form');\n          } else if (tabValue === 'Settings') {\n            anvil.call(event.target, 'open_settings_form');\n          }\n          // If 'Archives', do nothing\n        });\n      });\n\n      // \"Create\" button\n      const createBtn = document.getElementById('createBtn');\n      if (createBtn) {\n        createBtn.replaceWith(createBtn.cloneNode(true));\n        const newCreateBtn = document.getElementById('createBtn');\n        newCreateBtn.addEventListener('click', (event) => {\n          anvil.call(event.target, 'open_create_form');\n        });\n      }\n\n      // Status bar filtering\n      const statusOptions = document.querySelectorAll('.status-option');\n      statusOptions.forEach(option => {\n        option.addEventListener('click', (event) => {\n          event.preventDefault();\n          const oldActive = document.querySelector('.status-option.active');\n          if (oldActive) oldActive.classList.remove('active');\n          option.classList.add('active');\n          const filterVal = option.getAttribute('data-filter');\n          anvil.call(event.target, 'filter_reports_client', filterVal);\n        });\n      });\n\n      // Search bar changes\n      const searchInput = document.querySelector('.search-bar');\n      if (searchInput) {\n        searchInput.addEventListener('input', function(event) {\n          const query = event.target.value;\n          anvil.call(event.target, 'search_reports_client', query);\n        });\n      }\n\n      console.log(\"EN_Archives: Event listeners attached.\");\n    })();\n\n    // ---------------------------------------------------------------------------\n    // 3) Display the time (update every minute)\n    // ---------------------------------------------------------------------------\n    function updateTime() {\n      const now = new Date();\n      const hrs = now.getHours().toString().padStart(2, '0');\n      const mins = now.getMinutes().toString().padStart(2, '0');\n      document.querySelector('.time').textContent = `${hrs}h${mins}`;\n    }\n    updateTime();\n    setInterval(updateTime, 60000);\n  </script>\n  <script>\n    // Listen for when the app comes back online\n    window.addEventListener('online', function() {\n      console.log(\"App back online, refreshing session\");\n      anvil.call(document.body, 'refresh_session_relay');\n    });\n    \n    // Listen for when the app regains focus (user returns to the tab)\n    document.addEventListener('visibilitychange', function() {\n      if (document.visibilityState === 'visible') {\n        console.log(\"App visible again, checking session\");\n        anvil.call(document.body, 'refresh_session_relay');\n      }\n    });\n  </script>\n</body>\n</html>\n"
  type: HtmlTemplate
is_package: true
