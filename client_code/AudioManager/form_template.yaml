components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"fr\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <!-- Réactif aux mobiles -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interface de Gestion Audio</title>\n\n    <!-- Add RecordRTC for iOS compatibility -->\n    <script src=\"https://www.webrtc-experiment.com/RecordRTC.js\"></script>\n\n    <!-- Add NoSleep.js for fallback wake lock on older browsers -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/nosleep/0.12.0/NoSleep.min.js\"></script>\n\n    <style>\n      /* =====================================================\n      Styles de base\n      ===================================================== */\n      * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n      }\n      body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      overflow: hidden;\n      }\n      .container {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      width: 100%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n      /* =====================================================\n      Section fixe (onglets + actions)\n      ===================================================== */\n      .fixed-section {\n      background: white;\n      z-index: 10;\n      }\n      .nav-tabs {\n      display: flex;\n      width: 100%;\n      border-bottom: 1px solid #ddd;\n      }\n      .nav-tab {\n      flex: 1;\n      padding: 8px 16px;\n      cursor: pointer;\n      border: 1px solid #ccc;\n      border-bottom: none;\n      background: #f8f8f8;\n      font-size: 14px;\n      position: relative;\n      margin-right: -1px;\n      text-align: center;\n      }\n      .nav-tab.active {\n      background: #e5e5e5;\n      border-top: 1px solid #999;\n      border-left: 1px solid #999;\n      border-right: 1px solid #999;\n      border-bottom: 1px solid #e5e5e5;\n      margin-bottom: -1px;\n      }\n      .actions-row {\n      display: flex;\n      justify-content: flex-end;\n      align-items: center;\n      padding: 15px 20px;\n      }\n      .time {\n      color: #666;\n      font-size: 14px;\n      }\n      /* =====================================================\n      Contenu scrollable\n      ===================================================== */\n      .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n      padding-bottom: 80px;\n      -webkit-overflow-scrolling: touch;\n      }\n\n      /* =====================================================\n      Section AUDIO (lecture + enregistrement)\n      ===================================================== */\n      .audio-section {\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      margin-bottom: 20px;\n      position: relative;\n      }\n      #audioBar {\n      width: 100%;\n      height: 50px;\n      background-color: #f8f8f8;\n      border-radius: 5px;\n      display: flex;\n      align-items: center;\n      padding: 0 10px;\n      margin-bottom: 20px;\n      border: 1px solid #ddd;\n      position: relative;\n      }\n      /* Contrôles PC */\n      #audioPlaybackControl {\n      width: 30px;\n      height: 30px;\n      background-color: #4CAF50;\n      border: none;\n      border-radius: 50%;\n      color: white;\n      font-size: 16px;\n      cursor: pointer;\n      margin-right: 10px;\n      }\n      #audioProgress {\n      flex-grow: 1;\n      height: 10px;\n      background-color: #ddd;\n      border-radius: 5px;\n      overflow: hidden;\n      cursor: pointer;\n      margin-right: 10px;\n      touch-action: none;\n      }\n      #audioProgressBar {\n      width: 0;\n      height: 100%;\n      background-color: #4CAF50;\n      transition: width 0.1s linear;\n      }\n      #audioDuration {\n      font-size: 14px;\n      }\n      #clearRecordingButton {\n      background: none;\n      border: none;\n      font-size: 18px;\n      cursor: pointer;\n      color: #666;\n      margin-left: 10px;\n      }\n      #clearRecordingButton:hover {\n      color: #000;\n      }\n      #retryProcessBtn {\n      position: absolute;\n      top: -40px;\n      right: 10px;\n      padding: 8px 12px;\n      background-color: #4caf50;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      display: none;\n      }\n      .recording-controls {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 20px auto;\n      }\n      #circularProgress {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 0 auto;\n      border-radius: 50%;\n      overflow: hidden;\n      }\n      #progressRing {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background: conic-gradient(#ddd 0deg, #ddd 0deg);\n      }\n      #centerHole {\n      position: absolute;\n      top: 8px;\n      left: 8px;\n      width: 184px;\n      height: 184px;\n      background-color: #fff;\n      border-radius: 50%;\n      z-index: 1;\n      }\n      .control-button-group {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 30px;\n      z-index: 2;\n      }\n      .control-button {\n      width: 45px;\n      height: 45px;\n      border: 1px solid #666;\n      border-radius: 2px;\n      cursor: pointer;\n      background-color: white;\n      color: #666;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 24px;\n      transition: all 0.3s ease;\n      padding: 0;\n      }\n      .control-button svg {\n      pointer-events: none;\n      }\n      .control-button:hover {\n      background-color: #f5f5f5;\n      border-color: #333;\n      color: #333;\n      }\n\n      /* =====================================================\n      Upload Voice Memo Section for all devices\n      ===================================================== */\n      .upload-section {\n      margin: 20px auto;\n      max-width: 400px;\n      position: relative;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      }\n\n      .upload-container {\n      width: 100%;\n      border: 2px dashed #aaa;\n      border-radius: 10px;\n      padding: 20px;\n      text-align: center;\n      background-color: #f8f8f8;\n      transition: all 0.3s ease;\n      cursor: pointer;\n      margin-bottom: 15px;\n      }\n\n      .upload-container:hover {\n      border-color: #4CAF50;\n      background-color: #f0f9f0;\n      }\n\n      .upload-container.dragover {\n      border-color: #4CAF50;\n      background-color: #e7f6e7;\n      transform: scale(1.02);\n      }\n\n      .upload-icon {\n      font-size: 40px;\n      color: #666;\n      margin-bottom: 10px;\n      }\n\n      .upload-text {\n      color: #333;\n      font-size: 16px;\n      margin-bottom: 5px;\n      }\n\n      .upload-description {\n      color: #666;\n      font-size: 14px;\n      margin-bottom: 15px;\n      }\n\n      .upload-button {\n      background-color: #4CAF50;\n      color: white;\n      border: none;\n      padding: 10px 20px;\n      border-radius: 5px;\n      font-size: 16px;\n      cursor: pointer;\n      transition: background-color 0.3s;\n      min-height: 44px; /* iOS minimum touch target size */\n      }\n\n      .upload-button:hover {\n      background-color: #45a049;\n      }\n\n      .upload-button:active {\n      transform: scale(0.98);\n      opacity: 0.9;\n      }\n\n      #audioFileInput {\n      display: none;\n      }\n\n      .file-info {\n      display: none;\n      margin-top: 15px;\n      padding: 10px;\n      background-color: #e8f5e9;\n      border-radius: 5px;\n      width: 100%;\n      font-size: 14px;\n      }\n\n      .file-name {\n      font-weight: bold;\n      word-break: break-all;\n      }\n\n      .file-size {\n      color: #666;\n      }\n\n      .file-actions {\n      display: flex;\n      justify-content: space-between;\n      margin-top: 10px;\n      }\n\n      .file-button {\n      padding: 5px 10px;\n      border-radius: 3px;\n      border: none;\n      font-size: 14px;\n      cursor: pointer;\n      min-height: 36px;\n      }\n\n      .process-file-button {\n      background-color: #4CAF50;\n      color: white;\n      }\n\n      .remove-file-button {\n      background-color: #f44336;\n      color: white;\n      }\n\n      .format-warning {\n      display: none;\n      margin-top: 10px;\n      padding: 8px;\n      background-color: #fff3e0;\n      border-left: 4px solid #ff9800;\n      font-size: 13px;\n      color: #6d4c41;\n      }\n\n      /* iOS-specific guidance */\n      .ios-instructions {\n      margin: 15px 0;\n      padding: 15px;\n      background-color: #f8f9fa;\n      border-left: 4px solid #007aff;\n      border-radius: 4px;\n      font-size: 14px;\n      display: none; /* Hidden by default, shown by JS for iOS */\n      }\n\n      .ios-instructions h4 {\n      color: #007aff;\n      margin-top: 0;\n      margin-bottom: 10px;\n      }\n\n      .ios-instructions ol {\n      padding-left: 20px;\n      }\n\n      .ios-instructions li {\n      margin-bottom: 8px;\n      }\n\n      /* Basculement entre l'upload et l'enregistrement */\n      .mode-toggle {\n      display: flex;\n      justify-content: center;\n      margin-bottom: 20px;\n      border-bottom: 1px solid #eee;\n      padding-bottom: 15px;\n      }\n\n      .toggle-button {\n      padding: 8px 16px;\n      margin: 0 5px;\n      background-color: #f1f1f1;\n      border: 1px solid #ddd;\n      border-radius: 20px;\n      font-size: 14px;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      }\n\n      .toggle-button.active {\n      background-color: #4CAF50;\n      color: white;\n      border-color: #4CAF50;\n      }\n\n      @keyframes recordingFlash {\n      0% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n      50% { background: conic-gradient(#ffffff 0deg, #ffffff 360deg); }\n      100% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n      }\n      .recording-flash {\n      animation: recordingFlash 1.5s infinite;\n      }\n      /* Affichage mobile de l'audio (seulement sur mobile) */\n      #mobileAudioDisplay {\n      display: none;\n      width: 100%;\n      text-align: center;\n      font-size: 16px;\n      font-weight: bold;\n      color: #333;\n      }\n\n      /* =====================================================\n      Section Paramètres\n      ===================================================== */\n      .parameters-section {\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      margin-bottom: 20px;\n      }\n      .parameter-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 15px;\n      }\n      .parameter-row label {\n      font-weight: bold;\n      margin-right: 10px;\n      }\n      .template-select-container .select-button {\n      min-width: 200px;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      font-size: 14px;\n      }\n      .dropdown {\n      min-width: 200px;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n      position: relative;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      }\n      .arrow { margin-left: 10px; color: #666; }\n      .dropdown-menu {\n      position: absolute;\n      top: 100%;\n      left: 0;\n      width: 100%;\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      display: none;\n      z-index: 1000;\n      }\n      .dropdown-menu.active { display: block; }\n      .dropdown-menu div {\n      padding: 8px;\n      cursor: pointer;\n      }\n      .dropdown-menu div:hover { background: #f5f5f5; }\n      /* =====================================================\n      Section Éditeur\n      ===================================================== */\n      .editor-section {\n      background: white;\n      border-radius: 8px;\n      overflow: hidden;\n      }\n      #toolbar {\n      padding: 10px;\n      background: #f8f8f8;\n      border-bottom: 1px solid #ddd;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 5px;\n      align-items: center;\n      }\n      .toolbar-button {\n      padding: 6px 12px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n      }\n      .toolbar-button:hover { background: #f5f5f5; }\n\n      /* Single highlight for the \"Start TB Rec\" button while recording: */\n      .tb-recording-flash {\n      background-color: #ffebe6 !important;\n      border-color: #ff6347 !important;\n      color: #ff6347 !important;\n      }\n\n      /* Highlight for \"Validate\" button while AI processes snippet: */\n      .tb-processing-flash {\n      background-color: #e6ffe6 !important;\n      border-color: #4CAF50 !important;\n      color: #4CAF50 !important;\n      }\n\n      .toolbar-button.recording {\n      background-color: #ffebe6;\n      border-color: #ff6347;\n      color: #ff6347;\n      }\n      .toolbar-button.validate {\n      background-color: #e6ffe6;\n      border-color: #4CAF50;\n      color: #4CAF50;\n      }\n      #editor {\n      min-height: 300px;\n      padding: 20px;\n      border: 1px solid #ddd;\n      overflow-y: auto;\n      font-size: 16px;\n      line-height: 1.5;\n      }\n      .scrollable-content::-webkit-scrollbar { width: 8px; }\n      .scrollable-content::-webkit-scrollbar-track { background: #f1f1f1; }\n      .scrollable-content::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 4px;\n      }\n      .scrollable-content::-webkit-scrollbar-thumb:hover { background: #555; }\n\n      /* =====================================================\n      Boutons du bas\n      ===================================================== */\n      .bottom-buttons {\n      position: fixed;\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 800px;\n      max-width: 100%;\n      background: white;\n      padding: 15px 20px;\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      border-top: 1px solid #ddd;\n      box-shadow: 0 -2px 4px rgba(0,0,0,0.1);\n      z-index: 10;\n      }\n      .bottom-button {\n      padding: 10px 30px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n      font-size: 14px;\n      transition: all 0.2s ease;\n      }\n      .bottom-button:hover {\n      background: #f5f5f5;\n      border-color: #999;\n      }\n\n      /* =====================================================\n      Modal de sélection de patient (pour sauvegarde)\n      ===================================================== */\n      .patient-select-container {\n      position: relative;\n      width: 300px;\n      font-family: system-ui, -apple-system, sans-serif;\n      }\n      .select-button#patientSelectBtn { display: none; }\n      .modal {\n      display: none;\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n      z-index: 1000;\n      }\n      .modal-content {\n      position: relative;\n      background-color: white;\n      margin: 15% auto;\n      padding: 20px;\n      width: 90%;\n      max-width: 400px;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      }\n      .modal-header { margin-bottom: 20px; }\n      .modal-title {\n      font-size: 18px;\n      font-weight: 600;\n      margin: 0 0 15px 0;\n      }\n      .search-container { position: relative; margin-bottom: 20px; }\n      .search-icon {\n      position: absolute;\n      left: 12px;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 16px;\n      height: 16px;\n      color: #666;\n      }\n      #patientSearchHolder {\n      /* Container reconstruit dynamiquement */\n      }\n      .search-input {\n      width: 100%;\n      padding: 8px 12px 8px 36px;\n      border: 1px solid #ddd;\n      border-radius: 6px;\n      font-size: 14px;\n      box-sizing: border-box;\n      }\n      .search-input:focus {\n      outline: none;\n      border-color: #2563eb;\n      box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);\n      }\n      .new-patient-btn {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      width: 100%;\n      padding: 8px 12px;\n      background: none;\n      border: none;\n      border-radius: 6px;\n      color: #16a34a;\n      cursor: pointer;\n      font-size: 14px;\n      text-align: left;\n      }\n      .new-patient-btn:hover { background-color: #f0fdf4; }\n      .divider {\n      height: 1px;\n      background-color: #ddd;\n      margin: 15px 0;\n      }\n      .patients-list { max-height: 200px; overflow-y: auto; }\n      .patient-item {\n      display: block;\n      width: 100%;\n      padding: 8px 12px;\n      background: none;\n      border: none;\n      border-radius: 6px;\n      text-align: left;\n      cursor: pointer;\n      font-size: 14px;\n      color: #333;\n      }\n      .patient-item:hover { background-color: #f3f4f6; }\n      .close-button {\n      position: absolute;\n      top: 15px;\n      right: 15px;\n      background: none;\n      border: none;\n      cursor: pointer;\n      padding: 5px;\n      color: #666;\n      }\n\n      /* =====================================================\n      Modal de sélection de modèle\n      ===================================================== */\n      .template-select-container .modal {\n      z-index: 1100;\n      }\n      #templateModal {\n      display: none;\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n      }\n      #templateModal .modal-content {\n      margin: 15% auto;\n      padding: 20px;\n      width: 90%;\n      max-width: 400px;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      position: relative;\n      }\n      #templateModal .modal-header { margin-bottom: 20px; }\n      #templateModal .modal-title {\n      font-size: 18px;\n      font-weight: 600;\n      margin: 0 0 15px 0;\n      }\n      #templateModal .search-container { position: relative; margin-bottom: 20px; }\n      #templateModal .search-icon {\n      position: absolute;\n      left: 12px;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 16px;\n      height: 16px;\n      color: #666;\n      }\n      #templateModal .search-input {\n      width: 100%;\n      padding: 8px 12px 8px 36px;\n      border: 1px solid #ddd;\n      border-radius: 6px;\n      font-size: 14px;\n      box-sizing: border-box;\n      }\n      #templateModal .templates-list { max-height: 300px; overflow-y: auto; }\n      #templateModal .template-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n      padding: 8px 12px;\n      background: none;\n      border: none;\n      border-radius: 6px;\n      text-align: left;\n      cursor: pointer;\n      font-size: 14px;\n      color: #333;\n      }\n      #templateModal .template-item:hover { background: #f3f4f6; }\n      #templateModal .star-icon {\n      font-size: 16px;\n      line-height: 1;\n      }\n      #templateModal .close-button {\n      position: absolute;\n      top: 15px;\n      right: 15px;\n      background: none;\n      border: none;\n      cursor: pointer;\n      padding: 5px;\n      color: #666;\n      }\n\n      /* =====================================================\n      Bannières (messages temporaires)\n      ===================================================== */\n      #bannerContainer {\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      z-index: 2000;\n      }\n      /* Flashing banner to indicate ongoing toolbar recording. \n      We'll toggle .flash-state every second for a \"blink\" effect. */\n      .banner-flash {\n      background-color: #f44336;\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      transition: background-color 0.3s ease;\n      }\n      .banner-flash.flash-state {\n      background-color: #ff7961;\n      }\n\n      .banner {\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      }\n      .banner-success {\n      background-color: #4caf50;\n      }\n      .banner-error {\n      background-color: #f44336;\n      }\n\n      /* =====================================================\n      Réponse adaptative (mobile)\n      ===================================================== */\n      @media (max-width: 800px) {\n      .container {\n      height: 100vh;\n      }\n      .bottom-buttons {\n      width: 100%;\n      left: 0;\n      transform: none;\n      }\n      .nav-tab {\n      font-size: 12px;\n      padding: 6px 8px;\n      }\n      .actions-row {\n      padding: 10px 15px;\n      }\n      #audioBar {\n      height: auto;\n      padding: 10px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      }\n      #audioPlaybackControl,\n      #audioProgress,\n      #audioDuration,\n      #clearRecordingButton {\n      display: none;\n      }\n      #mobileAudioDisplay {\n      display: block;\n      }\n      .recording-controls {\n      width: 180px;\n      height: 180px;\n      }\n      #circularProgress {\n      width: 180px;\n      height: 180px;\n      }\n      #centerHole {\n      top: 7px;\n      left: 7px;\n      width: 166px;\n      height: 166px;\n      }\n\n      /* Mise en évidence du mode Upload sur mobile */\n      .upload-section {\n      margin-top: 10px;\n      }\n      .mode-toggle {\n      margin-bottom: 10px;\n      padding-bottom: 10px;\n      }\n      .toggle-button {\n      font-size: 13px;\n      padding: 6px 12px;\n      }\n\n      /* iOS-specific adjustments */\n      @supports (-webkit-touch-callout: none) {\n      /* Make buttons larger for better touch targets on iOS */\n      .upload-button, .file-button, .toggle-button {\n      padding: 12px 20px;\n      min-height: 44px; /* iOS minimum recommended touch target size */\n      font-size: 16px; /* Prevent zoom on focus in iOS */\n      }\n      }\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <!-- Section fixe: Onglets + Actions -->\n      <div class=\"fixed-section\">\n        <div class=\"nav-tabs\">\n          <button class=\"nav-tab active\" data-click=\"production\">Production</button>\n          <button class=\"nav-tab\" data-click=\"templates\">Modèles/IA</button>\n          <button class=\"nav-tab\" data-click=\"archives\">Archives</button>\n          <button class=\"nav-tab\" data-click=\"settings\">Paramètres</button>\n        </div>\n        <div class=\"actions-row\">\n          <div class=\"time\">11:44</div>\n        </div>\n      </div>\n\n      <!-- Contenu scrollable -->\n      <div class=\"scrollable-content\">\n        <!-- Section Audio (Lecture + Enregistrement) -->\n        <div class=\"audio-section\">\n          <div id=\"audioBar\">\n            <button id=\"audioPlaybackControl\">▶</button>\n            <div id=\"audioProgress\">\n              <div id=\"audioProgressBar\"></div>\n            </div>\n            <span id=\"audioDuration\">0:00 / 0:00</span>\n            <button id=\"clearRecordingButton\" title=\"Réinitialiser l'enregistrement\">🗑</button>\n            <button id=\"retryProcessBtn\">Relancer l'IA sur mon audio</button>\n            <div id=\"mobileAudioDisplay\"></div>\n          </div>\n\n          <!-- Basculement entre les modes -->\n          <div class=\"mode-toggle\">\n            <button id=\"recordButton\" class=\"toggle-button active\">Enregistrer</button>\n            <button id=\"uploadButton\" class=\"toggle-button\">Importer un mémo vocal</button>\n          </div>\n\n          <!-- Mode Enregistrement -->\n          <div class=\"recording-controls\" id=\"recordingMode\">\n            <div id=\"circularProgress\">\n              <div id=\"progressRing\"></div>\n              <div id=\"centerHole\"></div>\n              <div class=\"control-button-group\">\n                <button id=\"playButton\" class=\"control-button\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                    <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n                    <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n                    <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n                  </svg>\n                </button>\n                <button id=\"stopButton\" class=\"control-button\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n                    <path d=\"M4 12l5 5L20 7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <!-- Mode Upload - Optimisé pour iOS -->\n          <div class=\"upload-section\" id=\"uploadMode\" style=\"display: none;\">\n            <div class=\"upload-container\" id=\"dropZone\">\n              <div class=\"upload-icon\">📋</div>\n              <div class=\"upload-text\">Déposez votre mémo vocal ici</div>\n              <div class=\"upload-description\">ou cliquez pour sélectionner un fichier</div>\n              <!-- File input avec accept étendu pour inclure les formats iOS -->\n              <input type=\"file\" id=\"audioFileInput\" accept=\"audio/*,.m4a,.caf\">\n              <label for=\"audioFileInput\" class=\"upload-button\">Sélectionner un fichier</label>\n            </div>\n\n            <!-- Instructions pour iOS (affichées uniquement sur iOS) -->\n            <div class=\"ios-instructions\">\n              <h4>Pour les utilisateurs iPhone :</h4>\n              <p>Pour utiliser vos mémos vocaux :</p>\n              <ol>\n                <li>Ouvrez l'application <strong>Fichiers</strong> sur votre iPhone</li>\n                <li>Localisez le mémo vocal (il peut être dans <strong>Sur mon iPhone > Dictaphone</strong>)</li>\n                <li>Appuyez et maintenez sur le fichier pour voir les options</li>\n                <li>Choisissez <strong>\"Partager\"</strong></li>\n                <li>Sélectionnez <strong>\"Enregistrer dans Fichiers\"</strong></li>\n                <li>Enregistrez-le dans un emplacement accessible comme <strong>iCloud Drive</strong></li>\n                <li>Revenez à cette page et utilisez le bouton <strong>\"Sélectionner un fichier\"</strong></li>\n              </ol>\n            </div>\n\n            <div class=\"file-info\" id=\"fileInfo\">\n              <div class=\"file-name\" id=\"fileName\">memo.m4a</div>\n              <div class=\"file-size\" id=\"fileSize\">2.4 MB</div>\n              <div class=\"file-actions\">\n                <button class=\"file-button process-file-button\" id=\"processFileButton\">Traiter le fichier</button>\n                <button class=\"file-button remove-file-button\" id=\"removeFileButton\">Supprimer</button>\n              </div>\n            </div>\n\n            <div class=\"format-warning\" id=\"formatWarning\">\n              Ce format de fichier pourrait ne pas être compatible avec les mémos vocaux iOS.\n              Les formats recommandés sont: .m4a, .mp3, .aac\n            </div>\n          </div>\n\n          <audio id=\"audioPlayback\" style=\"display: none;\"></audio>\n        </div>\n\n        <!-- Section Paramètres -->\n        <div class=\"parameters-section\">\n          <div class=\"parameter-row\">\n            <label>Modèle</label>\n            <div class=\"template-select-container\">\n              <button class=\"select-button\" id=\"templateSelectBtn\">\n                <span>Sélectionnez un modèle</span>\n                <span>▼</span>\n              </button>\n            </div>\n          </div>\n          <div class=\"parameter-row\">\n            <label>Langue</label>\n            <div class=\"dropdown\" id=\"langueDropdown\">\n              <span>🇫🇷</span>\n              <span class=\"arrow\">▼</span>\n              <div class=\"dropdown-menu\">\n                <div data-value=\"🇫🇷\">🇫🇷</div>\n                <div data-value=\"🇬🇧\">🇬🇧</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Section Éditeur -->\n        <div class=\"editor-section\">\n          <div id=\"toolbar\">\n            <button class=\"toolbar-button\" id=\"boldBtn\"><b>B</b></button>\n            <button class=\"toolbar-button\" id=\"italicBtn\"><i>I</i></button>\n            <button class=\"toolbar-button\" id=\"underlineBtn\"><u>U</u></button>\n            <button class=\"toolbar-button\" id=\"leftAlignBtn\">Gauche</button>\n            <button class=\"toolbar-button\" id=\"centerAlignBtn\">Centre</button>\n            <button class=\"toolbar-button\" id=\"rightAlignBtn\">Droite</button>\n            <button class=\"toolbar-button\" id=\"insertImageBtn\">Image</button>\n\n            <!-- SINGLE Start TB Rec button with mic icon only -->\n            <button class=\"toolbar-button recording\" id=\"startToolbarRecBtn\" title=\"Enregistrement barre d'outils\">🎤</button>\n\n            <!-- Validate button also finalizes any toolbar snippet if recording -->\n            <button class=\"toolbar-button validate\" id=\"validateBtn\" title=\"Valider et envoyer\">✓</button>\n\n            <span style=\"margin-left:auto;\"></span>\n            <button class=\"toolbar-button\" id=\"copyBtn\">Copier</button>\n          </div>\n          <div id=\"editor\" contenteditable=\"true\"></div>\n        </div>\n\n        <!-- HIDDEN ANCHOR so we can call anvil.call() on a real child element -->\n        <div id=\"toolbarRecorderAnchor\" style=\"display:none;\"></div>\n      </div>\n\n      <!-- Boutons du bas -->\n      <div class=\"bottom-buttons\">\n        <button class=\"bottom-button\" data-click=\"statut\">Statut</button>\n        <button class=\"bottom-button\" data-click=\"enregistrer\">Archiver</button>\n        <button class=\"bottom-button\" data-click=\"partager\">Partager</button>\n      </div>\n    </div>\n\n    <!-- Modal de sélection de patient -->\n    <div class=\"patient-select-container\">\n      <button class=\"select-button\" id=\"patientSelectBtn\" style=\"display:none;\">\n        <span>Sélectionnez un patient</span>\n        <span>▼</span>\n      </button>\n      <div class=\"modal\" id=\"patientModal\">\n        <div class=\"modal-content\">\n          <button class=\"close-button\" id=\"closePatientModalBtn\">✕</button>\n          <div class=\"modal-header\">\n            <h3 class=\"modal-title\">Sélectionnez un patient</h3>\n            <div class=\"search-container\">\n              <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n              </svg>\n              <div id=\"patientSearchHolder\">\n                <input type=\"text\" class=\"search-input\" placeholder=\"Rechercher un patient...\" id=\"searchInput\">\n              </div>\n            </div>\n          </div>\n          <button class=\"new-patient-btn\" id=\"newPatientBtn\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\"></path>\n              <circle cx=\"9\" cy=\"7\" r=\"4\"></circle>\n              <line x1=\"19\" y1=\"8\" x2=\"19\" y2=\"14\"></line>\n              <line x1=\"16\" y1=\"11\" x2=\"22\" y2=\"11\"></line>\n            </svg>\n            Nouveau patient\n          </button>\n          <div class=\"divider\"></div>\n          <div class=\"patients-list\" id=\"patientsList\">\n            <!-- Liste des patients insérée dynamiquement -->\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Modal de sélection de modèle -->\n    <div class=\"template-select-container\">\n      <div class=\"modal\" id=\"templateModal\">\n        <div class=\"modal-content\">\n          <button class=\"close-button\" id=\"closeTemplateModalBtn\">✕</button>\n          <div class=\"modal-header\">\n            <h3 class=\"modal-title\">Sélectionnez un modèle</h3>\n            <div class=\"search-container\">\n              <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n              </svg>\n              <input type=\"text\" class=\"search-input\" placeholder=\"Rechercher un modèle...\" id=\"templateSearchInput\">\n            </div>\n          </div>\n          <div class=\"templates-list\" id=\"templatesList\">\n            <!-- Liste des modèles insérée dynamiquement -->\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Bannières pour messages temporaires -->\n    <div id=\"bannerContainer\"></div>\n\n    <!-- Librairies externes pour PDF -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n\n    <!-- Script principal (JS) -->\n    <script>\n      // Define functions that Python might call directly OUTSIDE the initialization guard\n      // These must be directly on window to ensure they can be called from Python\n\n      // Function to get the selected value from a dropdown (used by Python backend)\n      window.getDropdownSelectedValue = function(dropdownId) {\n      const dropdown = document.getElementById(dropdownId);\n      if (!dropdown) return \"\";\n\n      // Special handling for template selection dropdown - return clean name without stars\n      if (dropdownId === \"templateSelectBtn\" && dropdown.dataset.templateName) {\n      return dropdown.dataset.templateName;\n      }\n\n      // Default behavior for other dropdowns like language\n      const spanElem = dropdown.querySelector(\"span:first-child\");\n      if (!spanElem) return \"\";\n\n      return spanElem.textContent.trim();\n      };\n\n      // Get editor content (used by Python backend)\n      window.getEditorContent = function() {\n      const editor = document.getElementById('editor');\n      return editor ? editor.innerHTML : \"\";\n      };\n\n      // Set editor content (used by Python backend)\n      window.setEditorContent = function(value) {\n      const editor = document.getElementById('editor');\n      if (editor) editor.innerHTML = value;\n      };\n\n      // Function to display banners (used by Python backend)\n      window.displayBanner = function(message, type) {\n      const bannerContainer = document.getElementById('bannerContainer');\n      if (!bannerContainer) return;\n\n      const banner = document.createElement('div');\n      banner.className = 'banner ' + (type === 'success' ? 'banner-success' : 'banner-error');\n      banner.textContent = message;\n      bannerContainer.appendChild(banner);\n\n      setTimeout(() => {\n      banner.style.opacity = '0';\n      setTimeout(() => {\n      if (banner.parentNode) {\n      banner.parentNode.removeChild(banner);\n      }\n      }, 300);\n      }, 3000);\n      };\n\n      // Critical function that gets called by Python immediately\n      window.rebuildPatientSearchInput = function() {\n      console.log(\"[DEBUG JS] rebuildPatientSearchInput called\");\n      var searchHolder = document.getElementById(\"patientSearchHolder\");\n      if (searchHolder) {\n      var newInput = document.createElement(\"input\");\n      newInput.type = \"text\";\n      newInput.className = \"search-input\";\n      newInput.id = \"searchInput\";\n      newInput.placeholder = \"Rechercher un patient...\";\n\n      newInput.addEventListener('input', function() {\n      // Use a safe way to call searchPatientsInModal\n      if (window.searchPatientsInModal) {\n      window.searchPatientsInModal(this.value);\n      } else {\n      console.error(\"[DEBUG JS] searchPatientsInModal not available yet\");\n      // Try calling it directly without window\n      try {\n      searchPatientsInModal(this.value);\n      } catch (e) {\n      console.error(\"[DEBUG JS] Direct call also failed:\", e);\n      }\n      }\n      });\n\n      searchHolder.innerHTML = \"\";\n      searchHolder.appendChild(newInput);\n      } else {\n      console.error(\"[DEBUG JS] Could not find patientSearchHolder element\");\n      }\n      };\n\n      // Populate the template modal with templates data (used by Python backend)\n      window.populateTemplateModal = function(templates) {\n        templates = templates.filter(t => t.priority === 1 || t.priority === 2);\n        templates.sort((a, b) => {\n          if (a.priority === 2 && b.priority !== 2) return -1;\n          if (b.priority === 2 && a.priority !== 2) return 1;\n          return 0;\n        });\n        window.templatesData = templates;\n\n        let defaultTemplate = templates.find(t => t.priority === 2);\n        if (!defaultTemplate) { defaultTemplate = templates[0]; }\n\n        if (defaultTemplate) {\n          let starColor = defaultTemplate.priority === 2 ? \"green\" : \"yellow\";\n          const templateButton = document.getElementById('templateSelectBtn');\n          if (templateButton) {\n            // Store the original template name as a data attribute\n            templateButton.dataset.templateName = defaultTemplate.template_name;\n\n            // Display the template name with star for visual indication\n            const displaySpan = templateButton.querySelector('span:first-child');\n            if (displaySpan) {\n              displaySpan.innerHTML = \n                defaultTemplate.template_name + ' <span class=\"star-icon\" style=\"color:' + starColor + '\">★</span>';\n            }\n          }\n\n          // Always clear the editor first\n          window.setEditorContent('');\n\n          // Then set content if applicable for this template\n          if (defaultTemplate.display_template === true && defaultTemplate.text_to_display) {\n            console.log(\"[DEBUG] Default template has display_template=true, updating editor content\");\n            window.setEditorContent(defaultTemplate.text_to_display);\n          }\n\n          // Store the selected template\n          window.selectedTemplate = defaultTemplate;\n        }\n\n        // Use safe way to call renderTemplates\n        if (window.renderTemplates) {\n          window.renderTemplates(templates);\n        } else {\n          console.error(\"[DEBUG JS] renderTemplates not available yet when populateTemplateModal was called\");\n        }\n      };\n\n      // --------------------------------------------------------------------------------------------\n      // GOLDEN RULE 1: Define Global Variables and Helper Functions Only Once\n      // --------------------------------------------------------------------------------------------\n      if (!window.__my_audio_manager_globals) {\n      window.__my_audio_manager_globals = true;\n\n      // Global state for audio recording\n      window.recordingState = {\n      mediaRecorder: null,\n      recordedChunks: [],\n      audioBlob: null,\n      stream: null,\n      isRecording: false,\n      isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,\n      recordRTC: null,\n      uploadedFile: null,\n      processingInProgress: false,\n      wakeLock: null,\n      noSleep: null\n      };\n\n      window.wakeLockController = {\n      wakeLock: null,\n      noSleep: null,\n\n      init: function() {\n      if (!this.noSleep) {\n      this.noSleep = new NoSleep();\n      }\n      },\n\n      requestWakeLock: function() {\n      this.init();\n      // Try Screen Wake Lock API first\n      if ('wakeLock' in navigator) {\n      navigator.wakeLock.request('screen')\n      .then((lock) => {\n      console.log('[DEBUG] Wake Lock activated with Screen Wake Lock API');\n      this.wakeLock = lock;\n      this.wakeLock.addEventListener('release', () => {\n      console.log('[DEBUG] Wake Lock was released by the system');\n      });\n      })\n      .catch((err) => {\n      console.log('[DEBUG] Failed to activate Screen Wake Lock API, falling back to NoSleep.js:', err);\n      this.noSleep.enable();\n      });\n      } else {\n      console.log('[DEBUG] Screen Wake Lock API not supported, using NoSleep.js');\n      this.noSleep.enable();\n      }\n      },\n\n      releaseWakeLock: function() {\n      if (this.wakeLock) {\n      this.wakeLock.release()\n      .then(() => {\n      this.wakeLock = null;\n      console.log('[DEBUG] Wake Lock released');\n      })\n      .catch(err => {\n      console.log('[DEBUG] Error releasing wake lock:', err);\n      });\n      }\n      if (this.noSleep) {\n      this.noSleep.disable();\n      }\n      }\n      };\n\n      // Separate state for toolbar recording\n      window.toolbarRecorder = {\n      stream: null,\n      mediaRecorder: null,\n      isRecording: false,\n      recordedChunks: [],\n      bannerFlashInterval: null\n      };\n\n      // Make renderTemplates available on the window object\n      window.renderTemplates = function(templatesToRender) {\n        const templatesList = document.getElementById('templatesList');\n        if (!templatesList) return;\n\n        templatesList.innerHTML = '';\n\n        if (!templatesToRender || templatesToRender.length === 0) {\n          templatesList.innerHTML = '<div class=\"template-item\">Aucun modèle trouvé</div>';\n          return;\n        }\n\n        templatesToRender.forEach(template => {\n          let starColor = \"gray\";\n          if (template.priority === 2) {\n            starColor = \"green\";\n          } else if (template.priority === 1) {\n            starColor = \"yellow\";\n          }\n\n          const button = document.createElement('button');\n          button.className = 'template-item';\n\n          const nameSpan = document.createElement('span');\n          nameSpan.textContent = template.template_name;\n          button.appendChild(nameSpan);\n\n          const starSpan = document.createElement('span');\n          starSpan.className = 'star-icon';\n          starSpan.style.color = starColor;\n          starSpan.textContent = '★';\n          button.appendChild(starSpan);\n\n          button.addEventListener('click', function() {\n            // Pass the entire template object instead of just id/name/color\n            window.selectTemplate(template);\n          });\n\n          templatesList.appendChild(button);\n        });\n      };\n\n      // Make all helper functions that might be called from elsewhere available on the window\n      window.openPatientModalForSave = function() {\n      var modal = document.getElementById('patientModal');\n      if (modal) modal.style.display = 'block';\n      window.rebuildPatientSearchInput();\n      window.searchPatientsInModal('');\n      };\n\n      window.closePatientModal = function() {\n      var modal = document.getElementById('patientModal');\n      if (modal) modal.style.display = 'none';\n      };\n\n      window.searchPatientsInModal = function(searchTerm) {\n      var modal = document.getElementById('patientModal');\n      anvil.call(modal, 'search_patients_relay', searchTerm)\n      .then(function(patients) {\n      window.renderPatients(patients);\n      })\n      .catch(function(error){\n      console.error(\"Erreur de recherche de patients:\", error);\n      window.renderPatients([]);\n      });\n      };\n\n      window.renderPatients = function(patients) {\n      const patientsList = document.getElementById('patientsList');\n      if (!patientsList) return;\n\n      patientsList.innerHTML = '';\n\n      patients.forEach(patient => {\n      const button = document.createElement('button');\n      button.className = 'patient-item';\n      button.textContent = patient.name;\n      button.addEventListener('click', function() {\n      window.selectPatientForSave(patient.unique_id, patient.name);\n      });\n      patientsList.appendChild(button);\n      });\n      };\n\n      window.selectPatientForSave = function(id, name) {\n      window.selectedPatient = { unique_id: id, name: name };\n      window.closePatientModal();\n      window.continueSave();\n      };\n\n      window.newPatientForSave = function() {\n      var modal = document.getElementById('patientModal');\n      anvil.call(modal, 'get_new_patient_details')\n      .then(function(newDetails){\n      if(newDetails) {\n      window.selectedPatient = { unique_id: null, name: newDetails.name, details: newDetails };\n      window.closePatientModal();\n      window.continueSave();\n      }\n      })\n      .catch(function(error){\n      console.error(\"Erreur en obtenant les détails du nouveau patient:\", error);\n      });\n      };\n\n      window.continueSave = function() {\n      var contentJSON = JSON.stringify({ content: window._saveContentData.content });\n      var modal = document.getElementById('patientModal');\n      anvil.call(modal, 'save_report', contentJSON, window._saveContentData.images, window.selectedPatient)\n      .then(function(result){\n      if(result) {\n      window.displayBanner(\"Rapport enregistré avec succès\", \"success\");\n      } else {\n      alert(\"Échec de l'enregistrement du rapport\");\n      }\n      })\n      .catch(function(error){\n      console.error(\"Erreur lors de l'enregistrement du rapport:\", error);\n      alert(\"Erreur: \" + error.message);\n      });\n      };\n\n      // Make available all functions that might be called from elsewhere\n      window.openTemplateModal = function() {\n      const templateModal = document.getElementById('templateModal');\n      if (templateModal) templateModal.style.display = 'block';\n\n      const templateSearchInput = document.getElementById('templateSearchInput');\n      if (templateSearchInput) templateSearchInput.value = '';\n\n      window.renderTemplates(window.templatesData || []);\n      };\n\n      window.closeTemplateModal = function() {\n      const templateModal = document.getElementById('templateModal');\n      if (templateModal) templateModal.style.display = 'none';\n      };\n\n      window.selectTemplate = function(template) {\n        const id = template.id;\n        const name = template.template_name;\n        const starColor = template.starColor || \n          (template.priority === 2 ? \"green\" : template.priority === 1 ? \"yellow\" : \"gray\");\n\n        const templateButton = document.getElementById('templateSelectBtn');\n        if (templateButton) {\n          // Store the clean template name as a data attribute\n          templateButton.dataset.templateName = name;\n\n          // Display with star for visual indication\n          const displaySpan = templateButton.querySelector('span:first-child');\n          if (displaySpan) {\n            displaySpan.innerHTML = \n              name + ' <span class=\"star-icon\" style=\"color:' + starColor + '\">★</span>';\n          }\n        }\n\n        // First, always clear the editor to ensure a clean state\n        // This ensures we don't keep old content when switching templates\n        window.setEditorContent('');\n\n        // Then, only set new content if this template should display its content\n        if (template.display_template === true && template.text_to_display) {\n          console.log(\"[DEBUG] Template has display_template=true, updating editor content\");\n          window.setEditorContent(template.text_to_display);\n        }\n\n        // Update the stored selected template\n        window.selectedTemplate = template;\n\n        window.closeTemplateModal();\n      };\n\n      window.searchTemplatesInModal = function(searchTerm) {\n      var modal = document.getElementById('templateModal');\n      anvil.call(modal, 'search_template_relay', searchTerm)\n      .then(function(templates) {\n      window.renderTemplates(templates);\n      })\n      .catch(function(error){\n      console.error(\"Erreur recherche de modèles:\", error);\n      window.renderTemplates([]);\n      });\n      };\n\n      // Set up iOS recorder with enhanced configuration\n      window.initializeIOSRecording = function(state, event) {\n      state.recordRTC = new RecordRTC(state.stream, {\n      disableLogs: false,\n      type: 'audio',\n      mimeType: 'audio/wav',\n      recorderType: RecordRTC.StereoAudioRecorder,\n      bufferSize: 16384,\n      sampleRate: 44100,\n      numberOfAudioChannels: 1,\n      timeSlice: 10000,\n      checkForInactiveTracks: true,\n      desiredSampRate: 44100\n      });\n\n      state.recordRTC.startRecording();\n      state.isRecording = true;\n\n      // Update UI\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n      playButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n      <rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/>\n      <path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n    </svg>\n      `;\n      }\n\n      // Notify backend\n      anvil.call(event.target, \"start_recording\");\n      window.startRecordingFlash();\n      };\n\n      // Helper functions for audio playback\n      window.updateAudioProgress = function() {\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      const audioProgressBar = document.getElementById(\"audioProgressBar\");\n      const audioDuration = document.getElementById(\"audioDuration\");\n\n      if (!audioPlayback || !audioPlayback.duration) return;\n\n      const progress = (audioPlayback.currentTime / audioPlayback.duration) * 100;\n      if (audioProgressBar) {\n      audioProgressBar.style.width = `${progress}%`;\n      }\n\n      if (audioDuration) {\n      audioDuration.textContent = `${window.formatTime(audioPlayback.currentTime)} / ${window.formatTime(audioPlayback.duration)}`;\n      }\n      };\n\n      window.updateAudioDuration = function() {\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      const audioDuration = document.getElementById(\"audioDuration\");\n\n      if (!audioPlayback || !audioPlayback.duration) return;\n\n      if (audioDuration) {\n      audioDuration.textContent = `0:00 / ${window.formatTime(audioPlayback.duration)}`;\n      }\n      };\n\n      window.setupIOSSupport = function() {\n      console.log(\"[DEBUG] Setting up iOS-specific enhancements\");\n\n      // Show iOS-specific instructions\n      const iosInstructions = document.querySelector('.ios-instructions');\n      if (iosInstructions) {\n      iosInstructions.style.display = 'block';\n      }\n\n      // Ensure file input accepts iOS formats\n      const audioFileInput = document.getElementById('audioFileInput');\n      if (audioFileInput) {\n      audioFileInput.setAttribute('accept', 'audio/*,.m4a,.caf,.aac,.mp4');\n      }\n\n      // Enhance button sizes for iOS\n      const uploadButton = document.querySelector('.upload-button');\n      if (uploadButton) {\n      uploadButton.style.minHeight = '44px';\n      uploadButton.style.fontSize = '16px';\n      uploadButton.style.padding = '12px 20px';\n      }\n\n      // Add helpful alert for iOS users\n      const dropZone = document.getElementById('dropZone');\n      if (dropZone) {\n      // Replace with a new one to clear any existing handlers\n      const newDropZone = dropZone.cloneNode(true);\n      dropZone.parentNode.replaceChild(newDropZone, dropZone);\n\n      newDropZone.addEventListener('click', function(e) {\n      // Don't interfere with clicks on buttons or inputs\n      if (e.target.classList.contains('upload-button') || e.target.tagName === 'INPUT') {\n      return;\n      }\n\n      // Show a helpful tip before opening the file selector\n      if (confirm(\"Conseil pour iPhone: Si vous ne voyez pas vos mémos vocaux, essayez d'abord de les sauvegarder dans l'app Fichiers.\\n\\nOuvrir le sélecteur de fichiers?\")) {\n      const audioFileInput = document.getElementById('audioFileInput');\n      if (audioFileInput) audioFileInput.click();\n      }\n      });\n      }\n      };\n\n      /* ---------- STOP-BUTTON UX ---------- */\n      window.setStopButtonBusy = function (busy) {\n      const stopBtn = document.getElementById('stopButton');\n      if (!stopBtn) return;\n\n      if (busy) {\n      stopBtn.disabled = true;               // block double-taps\n      stopBtn.dataset.prevHTML = stopBtn.innerHTML;  // keep the icon\n      stopBtn.innerHTML = 'Stopping…';       // quick textual feedback\n      } else {\n      stopBtn.disabled = false;\n      if (stopBtn.dataset.prevHTML) {\n      stopBtn.innerHTML = stopBtn.dataset.prevHTML;\n      delete stopBtn.dataset.prevHTML;\n      }\n      }\n      };\n\n\n      // Update time display\n      window.updateTime = function() {\n      const now = new Date();\n      const hrs = now.getHours().toString().padStart(2, '0');\n      const mins = now.getMinutes().toString().padStart(2, '0');\n      const timeElement = document.querySelector('.time');\n      if (timeElement) {\n      timeElement.textContent = `${hrs}h${mins}`;\n      }\n      };\n\n      // Globally exposed methods\n      window.blobToBase64 = function(blob) {\n      return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n      const resultStr = reader.result;\n      const base64 = resultStr.split(',')[1];\n      resolve(base64);\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n      });\n      };\n\n      // Update progress ring UI\n      window.setRingPercentage = function(percentage) {\n      const ringElem = document.getElementById(\"progressRing\");\n      if (!ringElem) return;\n\n      const clamped = Math.max(0, Math.min(100, percentage));\n      const angle = (clamped / 100) * 360;\n      ringElem.style.background = `conic-gradient(#4caf50 ${angle}deg, #ddd ${angle}deg)`;\n      };\n\n      // Visual feedback for recording state\n      window.startRecordingFlash = function() {\n      const ringElem = document.getElementById(\"progressRing\");\n      if (ringElem) { \n      ringElem.classList.add(\"recording-flash\"); \n      }\n      };\n\n      window.stopRecordingFlash = function() {\n      window.setStopButtonBusy(true);\n      const ringElem = document.getElementById(\"progressRing\");\n      if (ringElem) { \n      ringElem.classList.remove(\"recording-flash\"); \n      }\n      };\n\n      // Simulate progress for transcription process\n      window.simulateTranscriptionProgress = function() {\n      window.transcriptionProgress = {\n      currentProgress: 0,\n      intervalId: null\n      };\n\n      window.setRingPercentage(0);\n      window.transcriptionProgress.intervalId = setInterval(() => {\n      if (window.transcriptionProgress.currentProgress < 90) {\n      window.transcriptionProgress.currentProgress += 1;\n      window.setRingPercentage(window.transcriptionProgress.currentProgress);\n      } else {\n      clearInterval(window.transcriptionProgress.intervalId);\n      }\n      }, 400);\n      };\n\n      window.finishTranscriptionProgress = function() {\n      if (window.transcriptionProgress && window.transcriptionProgress.intervalId) {\n      clearInterval(window.transcriptionProgress.intervalId);\n      }\n      window.setRingPercentage(100);\n      };\n\n      // Mobile audio display update\n      window.updateMobileAudioDisplay = function() {\n      var display = document.getElementById(\"mobileAudioDisplay\");\n      if (!display) return;\n\n      if (window.recordingState.audioBlob) {\n      display.innerHTML = \"Audio 🎵 <button id='mobileClearButton' onclick='clearRecording(event)'>🗑</button>\";\n\n      // Add event listener to the newly created button\n      const mobileClearButton = document.getElementById(\"mobileClearButton\");\n      if (mobileClearButton) {\n      mobileClearButton.addEventListener(\"click\", function(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      window.clearRecording(e);\n      });\n      }\n      } else {\n      display.innerHTML = \"\";\n      }\n      };\n\n      // Recording functions\n      window.startRecording = async function(event) {\n      const state = window.recordingState;\n\n      // Prevent multiple recording sessions\n      if (state.isRecording) {\n      console.log('[DEBUG] Recording already in progress');\n      return;\n      }\n\n      // Request wake lock to keep screen on\n      window.wakeLockController.requestWakeLock();\n\n      try {\n      // Request microphone access\n      state.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n      if (state.isIOS) {\n      // iOS-specific implementation with RecordRTC\n      console.log('[DEBUG] Starting iOS recording with RecordRTC');\n\n      if (typeof RecordRTC === 'undefined') {\n      // Load RecordRTC if not already loaded\n      const script = document.createElement('script');\n      script.src = 'https://www.webrtc-experiment.com/RecordRTC.js';\n      script.onload = function() {\n      window.initializeIOSRecording(state, event);\n      };\n      document.head.appendChild(script);\n      } else {\n      window.initializeIOSRecording(state, event);\n      }\n      } else {\n      // Standard WebRTC implementation\n      console.log('[DEBUG] Starting standard recording with MediaRecorder');\n\n      state.mediaRecorder = new MediaRecorder(state.stream);\n      state.recordedChunks = [];\n\n      state.mediaRecorder.ondataavailable = e => {\n      if (e.data.size > 0) {\n      state.recordedChunks.push(e.data);\n      }\n      };\n\n      state.mediaRecorder.start();\n      state.isRecording = true;\n\n      // Update UI\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n      playButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n      <rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/>\n      <path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n    </svg>\n      `;\n      }\n\n      // Notify backend\n      anvil.call(event.target, \"start_recording\");\n      window.startRecordingFlash();\n      }\n      } catch (err) {\n      console.error('[DEBUG] Error accessing microphone:', err);\n      alert(\"Impossible d'accéder au microphone. Veuillez vérifier les permissions.\");\n\n      // Release wake lock if we couldn't start recording\n      window.wakeLockController.releaseWakeLock();\n      }\n      };\n\n      // Pause recording\n      window.pauseRecording = function(event) {\n      const state = window.recordingState;\n\n      if (!state.isRecording) {\n      console.log('[DEBUG] No recording to pause');\n      return;\n      }\n\n      if (state.isIOS) {\n      if (state.recordRTC) {\n      console.log('[DEBUG] Pausing iOS recording');\n      state.recordRTC.pauseRecording();\n      state.isRecording = false;\n\n      // Update UI\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n      playButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n      <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n      <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n      <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n    </svg>\n      `;\n      }\n\n      // Notify backend\n      anvil.call(event.target, \"pause_recording\");\n      }\n      } else {\n      if (state.mediaRecorder && state.mediaRecorder.state === \"recording\") {\n      console.log('[DEBUG] Pausing standard recording');\n      state.mediaRecorder.pause();\n      state.isRecording = false;\n\n      // Update UI\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n      playButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n      <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n      <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n      <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n    </svg>\n      `;\n      }\n\n      // Notify backend\n      anvil.call(event.target, \"pause_recording\");\n      }\n      }\n      };\n\n      // Resume recording\n      window.resumeRecording = function(event) {\n      const state = window.recordingState;\n\n      if (state.isRecording) {\n      console.log('[DEBUG] Recording already active');\n      return;\n      }\n\n      if (state.isIOS) {\n      if (state.recordRTC) {\n      console.log('[DEBUG] Resuming iOS recording');\n      state.recordRTC.resumeRecording();\n      state.isRecording = true;\n\n      // Update UI\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n      playButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n      <rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/>\n      <path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n    </svg>\n      `;\n      }\n\n      // Notify backend\n      anvil.call(event.target, \"start_recording\");\n      }\n      } else {\n      if (state.mediaRecorder && state.mediaRecorder.state === \"paused\") {\n      console.log('[DEBUG] Resuming standard recording');\n      state.mediaRecorder.resume();\n      state.isRecording = true;\n\n      // Update UI\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n      playButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n      <rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/>\n      <path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n    </svg>\n      `;\n      }\n\n      // Notify backend\n      anvil.call(event.target, \"start_recording\");\n      }\n      }\n      };\n\n      // Stop and process recording\n      window.stopRecording = function(event) {\n      const state = window.recordingState;\n\n      if (state.processingInProgress) {\n      console.log('[DEBUG] Processing already in progress, cannot stop');\n      return;\n      }\n\n      state.processingInProgress = true;\n\n      if (state.isIOS) {\n      if (state.recordRTC) {\n      console.log('[DEBUG] Stopping iOS recording');\n\n      state.recordRTC.stopRecording(function() {\n      const blob = state.recordRTC.getBlob();\n      state.audioBlob = blob;\n      window.lastAudioBlob = blob;\n\n      // Set up audio playback\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      if (audioPlayback) {\n      const audioURL = URL.createObjectURL(blob);\n      audioPlayback.src = audioURL;\n      audioPlayback.load();\n      }\n\n      // Process the recording\n      window.processRecordedAudio(blob, event);\n\n      // Notify backend\n      anvil.call(event.target, \"stop_recording\");\n      window.stopRecordingFlash();\n\n      // Clean up resources\n      state.recordRTC.destroy();\n      if (state.stream) {\n      state.stream.getTracks().forEach(track => track.stop());\n      }\n\n      setTimeout(() => {\n      state.recordRTC = null;\n      state.stream = null;\n      }, 300);\n      });\n\n      state.isRecording = false;\n\n      // Update UI\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n      playButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n      <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n      <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n      <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n    </svg>\n      `;\n      }\n      }\n      } else {\n      if (state.mediaRecorder && state.mediaRecorder.state !== \"inactive\") {\n      console.log('[DEBUG] Stopping standard recording');\n\n      state.mediaRecorder.onstop = () => {\n      const blob = new Blob(state.recordedChunks, { type: 'audio/webm' });\n      state.audioBlob = blob;\n      window.lastAudioBlob = blob;\n\n      // Set up audio playback\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      if (audioPlayback) {\n      const audioURL = URL.createObjectURL(blob);\n      audioPlayback.src = audioURL;\n      audioPlayback.load();\n      }\n\n      // Process the recording\n      window.processRecordedAudio(blob, event);\n\n      // Notify backend\n      anvil.call(event.target, \"stop_recording\");\n      window.stopRecordingFlash();\n      };\n\n      state.mediaRecorder.stop();\n      state.isRecording = false;\n\n      // Update UI\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n      playButton.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n      <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n      <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n      <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n    </svg>\n      `;\n      }\n      }\n      }\n\n      // Release wake lock after recording\n      window.wakeLockController.releaseWakeLock();\n      };\n\n      /* ------------------------------------------------------------------\n      Recording upload – “no-chunk” version\n      ------------------------------------------------------------------ */\n\n      /* Helper: convert a Blob to base-64 (kept for very small files) */\n      window.blobToBase64 = async function (blob) {\n      return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result.split(',')[1]); // drop data URL header\n      reader.onerror  = reject;\n      reader.readAsDataURL(blob);\n      });\n      };\n\n      /* --------------------------------------------------------------\n      Main entry: send audio, either as base-64 (< 500 kB) or Media\n      -------------------------------------------------------------- */\n\n      /* ------------------------------------------------------------------\n      Coupe blob en morceaux binaires\n      ------------------------------------------------------------------ */\n      window.chunkBlob = async function (blob, chunkSize) {\n      const out = [];\n      for (let start = 0; start < blob.size; start += chunkSize) {\n      out.push(blob.slice(start, Math.min(start + chunkSize, blob.size)));\n      }\n      return out;\n      };\n\n      /* ------------------------------------------------------------------\n      Envoie l’enregistrement – <500 kB direct / ≥500 kB chunks base-64\n      ------------------------------------------------------------------ */\n      window.processRecordedAudio = async function (blob, event) {\n\n      const SMALL_FILE_LIMIT = 500 * 1024;    // 500 kB\n      const CHUNK_SIZE       = 400 * 1024;    // 400 kB (avant encodage)\n\n      try {\n      console.log('[DEBUG] Processing recorded audio');\n      window.simulateTranscriptionProgress();\n\n      /*// -------- 1.  SMALL files (< 500 kB) keep the old animation -------- */\n      if (blob.size < SMALL_FILE_LIMIT) {\n      const b64 = await window.blobToBase64(blob);\n      return anvil.call(event.target, 'process_recording', b64)\n      .then(handleSuccess)\n      .catch(handleError);\n      }\n\n      /* -------- 2. Gros fichiers : découpe + envoi chunk par chunk -------- */\n      window.setRingPercentage(0);                   // reset once\n      const chunks = await window.chunkBlob(blob, CHUNK_SIZE);\n      console.log(`[DEBUG] Découpé en ${chunks.length} chunks`);\n\n      for (let i = 0; i < chunks.length; i++) {\n      const b64Chunk = await window.blobToBase64(chunks[i]);\n      await anvil.call(event.target, 'receive_audio_chunk', b64Chunk, i, chunks.length);\n\n\n      /* progress grows from 0 → 90 % as chunks are sent */\n      const pct = Math.round(((i + 1) / chunks.length) * 90);\n      window.setRingPercentage(pct);      \n      }\n\n      console.log('[DEBUG] Tous les chunks envoyés – consolidation côté Python');\n      return anvil.call(event.target, 'process_consolidated_audio')\n      .then(handleSuccess)\n      .catch(handleError);\n\n      } catch (err) {\n      handleError(err);\n      }\n\n      /* ---------------- helpers ---------------- */\n      function handleSuccess(result) {\n      if (result && typeof result === 'object' && result.error) {\n      alert(result.error);\n      console.warn(result);\n      } else {\n      console.log('[DEBUG] Audio processing complete', result);\n      }\n      window.finishTranscriptionProgress();\n      document.getElementById('retryProcessBtn').style.display = 'block';\n      window.recordingState.processingInProgress = false;\n      window.setStopButtonBusy(false);\n      return result;\n      }\n\n      function handleError(err) {\n      console.error('[DEBUG] Error processing recording', err);\n      alert('Erreur détaillée : ' + (err?.message || err));\n      window.finishTranscriptionProgress();\n      window.recordingState.processingInProgress = false;\n      }\n      };\n\n\n\n\n      // Start the separate toolbar recorder\n      window.startToolbarRecording = function(event) {\n      console.log(\"[DEBUG] Starting separate toolbar recorder...\");\n\n      if (window.toolbarRecorder.isRecording) {\n      alert(\"Un enregistrement barre d'outils est déjà en cours.\");\n      return;\n      }\n\n      window.wakeLockController.requestWakeLock();\n\n      navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => {\n      window.toolbarRecorder.stream = stream;\n      window.toolbarRecorder.mediaRecorder = new MediaRecorder(stream);\n      window.toolbarRecorder.recordedChunks = [];\n\n      window.toolbarRecorder.mediaRecorder.ondataavailable = evt => {\n      if (evt.data.size > 0) {\n      window.toolbarRecorder.recordedChunks.push(evt.data);\n      }\n      };\n\n      window.toolbarRecorder.mediaRecorder.start();\n      window.toolbarRecorder.isRecording = true;\n\n      // Add visual flash to the microphone icon button\n      let startBtn = document.getElementById('startToolbarRecBtn');\n      if (startBtn) {\n      startBtn.classList.add(\"tb-recording-flash\");\n      }\n\n      // Show the red flashing banner\n      window.startToolbarRecordingBanner();\n      })\n      .catch(err => {\n      console.error(\"[DEBUG] Error accessing microphone for toolbar:\", err);\n      alert(\"Échec de l'accès au micro (barre d'outils).\");\n      });\n      };\n\n      // Finalize toolbar recording\n      window.finalizeToolbarRecording = function() {\n      return new Promise((resolve, reject) => {\n      if (!window.toolbarRecorder || !window.toolbarRecorder.isRecording) {\n      // No recording to finalize\n      resolve();\n      return;\n      }\n\n      console.log(\"[DEBUG] Stopping toolbar recorder...\");\n\n      // Remove the highlight on the mic icon button\n      let startBtn = document.getElementById('startToolbarRecBtn');\n      if (startBtn) {\n      startBtn.classList.remove(\"tb-recording-flash\");\n      }\n\n      // Stop the flashing banner\n      window.stopToolbarRecordingBanner();\n\n      window.toolbarRecorder.mediaRecorder.onstop = function() {\n      console.log(\"[DEBUG] MediaRecorder (toolbar) stopped. Finalizing blob...\");\n      let blob = new Blob(window.toolbarRecorder.recordedChunks, { type: 'audio/webm' });\n\n      window.processToolbarRecordingBlob(blob)\n      .then(() => {\n      resolve();\n      })\n      .catch(err => {\n      console.error(\"[DEBUG] Error processing toolbar recording:\", err);\n      reject(err);\n      });\n      };\n\n      window.toolbarRecorder.mediaRecorder.stop();\n      window.toolbarRecorder.isRecording = false;\n\n      // Clean up resources\n      window.toolbarRecorder.stream.getTracks().forEach(track => track.stop());\n      });\n      };\n\n      // Process toolbar recording\n      window.processToolbarRecordingBlob = async function(blob) {\n      console.log(\"[DEBUG] Converting toolbar blob to base64...\");\n\n      try {\n      // Convert to base64\n      let base64Audio = await window.blobToBase64(blob);\n\n      // Send to Python backend\n      const anchor = document.getElementById(\"toolbarRecorderAnchor\");\n      let resp = await anvil.call(anchor, \"process_toolbar_recording\", base64Audio);\n\n      console.log(\"[DEBUG] Toolbar snippet processed. Response:\", resp);\n      return resp;\n      } catch (err) {\n      console.error(\"[DEBUG] Error converting toolbar blob:\", err);\n      alert(\"Erreur de conversion BLOB (barre d'outils).\");\n      throw err;\n      }\n      };\n\n      // Handle toolbar recording banner\n      window.startToolbarRecordingBanner = function() {\n      const container = document.getElementById('bannerContainer');\n      if (!container) return;\n\n      // Avoid duplicates\n      let existing = document.getElementById('toolbarRecordingBanner');\n      if (existing) return;\n\n      let banner = document.createElement('div');\n      banner.id = 'toolbarRecordingBanner';\n      banner.classList.add('banner-flash');\n      banner.textContent = \"Enregistrement en cours...\";\n      container.appendChild(banner);\n\n      // Repeatedly toggle .flash-state for the blink effect\n      window.toolbarRecorder.bannerFlashInterval = setInterval(() => {\n      banner.classList.toggle('flash-state');\n      }, 1000);\n      };\n\n      window.stopToolbarRecordingBanner = function() {\n      let banner = document.getElementById('toolbarRecordingBanner');\n      if (banner && banner.parentNode) {\n      banner.parentNode.removeChild(banner);\n      }\n\n      if (window.toolbarRecorder && window.toolbarRecorder.bannerFlashInterval) {\n      clearInterval(window.toolbarRecorder.bannerFlashInterval);\n      window.toolbarRecorder.bannerFlashInterval = null;\n      }\n      };\n\n      // Process uploaded audio file\n        window.processUploadedFile = function(event) {\n          const state = window.recordingState;\n\n          if (!state.uploadedFile) {\n            alert(\"Please select an audio file first.\");\n            return;\n          }\n\n          if (state.processingInProgress) {\n            console.log('[DEBUG] Processing already in progress');\n            return;\n          }\n\n          state.processingInProgress = true;\n\n          // --- CHANGEMENT 1 : BASCULER LA VUE ET DÉMARRER L'ANIMATION ---\n          // Cacher la section d'upload et montrer l'anneau de progression. C'est correct.\n          window.toggleMode('record'); \n          window.simulateTranscriptionProgress();\n          // -----------------------------------------------------------\n\n          const reader = new FileReader();\n          reader.onload = function(e) {\n            const arrayBuffer = e.target.result;\n            const blob = new Blob([arrayBuffer], { type: state.uploadedFile.type });\n\n            window.blobToBase64(blob)\n              .then(base64Audio => {\n                // --- CORRECTION CLÉ : UTILISER UNE ANCRE STABLE ---\n                // Au lieu de fileInput, nous utilisons un élément qui n'est jamais caché.\n                const anchor = document.getElementById('toolbarRecorderAnchor');\n                if (!anchor) {\n                  console.error(\"CRITICAL: toolbarRecorderAnchor element not found!\");\n                  alert(\"Interface error, please reload.\");\n\n                  // Réinitialiser en cas d'erreur critique\n                  window.setRingPercentage(0);\n                  window.toggleMode('upload');\n                  state.processingInProgress = false;\n                  return;\n                }\n                // ----------------------------------------------------\n\n                // Appel au serveur (la fonction process_uploaded_audio appelle process_recording)\n                return anvil.call(anchor, \"process_uploaded_audio\", base64Audio) // Utilisation de 'anchor' ici\n                  .then(result => {\n                    console.log(\"[DEBUG] Audio file processed. Server response:\", result);\n\n                    // --- CHANGEMENT 2 : TERMINER L'ANIMATION EN CAS DE SUCCÈS ---\n                    window.finishTranscriptionProgress();\n                    // -----------------------------------------------------------\n\n                    // Stocker le blob pour une éventuelle relecture ou un nouvel essai\n                    state.audioBlob = blob;\n                    window.lastAudioBlob = blob;\n\n                    // Configurer la lecture audio\n                    const audioPlayback = document.getElementById(\"audioPlayback\");\n                    if (audioPlayback) {\n                      const audioURL = URL.createObjectURL(blob);\n                      audioPlayback.src = audioURL;\n                      audioPlayback.load();\n                    }\n\n                    // Afficher le bouton \"Retry\"\n                    document.getElementById(\"retryProcessBtn\").style.display = \"block\";\n\n                    window.updateMobileAudioDisplay();\n                    state.processingInProgress = false;\n                  })\n                  .catch(error => {\n                    console.error(\"[DEBUG] Error processing audio file:\", error);\n                    alert(\"An error occurred while processing the audio file.\");\n\n                    // --- CHANGEMENT 3 : GÉRER L'ÉCHEC ---\n                    window.setRingPercentage(0); // Réinitialiser l'anneau\n                    window.toggleMode('upload');   // Revenir à l'écran d'upload\n                    // ------------------------------------\n\n                    state.processingInProgress = false;\n                  });\n              })\n              .catch(err => {\n                console.error(\"[DEBUG] Error converting file:\", err);\n                alert(\"An error occurred while preparing the audio file.\");\n                window.setRingPercentage(0);\n                window.toggleMode('upload');\n                state.processingInProgress = false;\n              });\n          };\n\n          reader.onerror = function() {\n            console.error(\"[DEBUG] Error reading file:\", reader.error);\n            alert(\"An error occurred while reading the audio file.\");\n            window.setRingPercentage(0);\n            window.toggleMode('upload');\n            state.processingInProgress = false;\n          };\n\n          reader.readAsArrayBuffer(state.uploadedFile);\n        };  \n\n      // Handle file selection\n      window.handleFileSelect = function(event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Get file from input or drop event\n      let files;\n      if (event.dataTransfer) {\n      files = event.dataTransfer.files; // From drag & drop\n      } else {\n      files = event.target.files; // From file input\n      }\n\n      if (!files || files.length === 0) {\n      console.log(\"[DEBUG] No files selected\");\n      return;\n      }\n\n      const file = files[0];\n\n      // Check if it's an audio file\n      if (!file.type.match('audio.*') && !file.name.match(/\\.(m4a|caf|mp3|aac|wav)$/i)) {\n      alert('Veuillez sélectionner un fichier audio.');\n      return;\n      }\n\n      // Store file in global state\n      window.recordingState.uploadedFile = file;\n\n      // Update UI\n      const fileName = document.getElementById('fileName');\n      const fileSize = document.getElementById('fileSize');\n      const fileInfo = document.getElementById('fileInfo');\n      const formatWarning = document.getElementById('formatWarning');\n\n      if (fileName) fileName.textContent = file.name;\n      if (fileSize) fileSize.textContent = window.formatFileSize(file.size);\n      if (fileInfo) fileInfo.style.display = 'block';\n\n      // Check format compatibility with iOS\n      const fileExtension = file.name.split('.').pop().toLowerCase();\n      if (formatWarning) {\n      if (['m4a', 'mp3', 'aac'].includes(fileExtension)) {\n      formatWarning.style.display = 'none';\n      } else {\n      formatWarning.style.display = 'block';\n      }\n      }\n\n      console.log(`[DEBUG] File selected: ${file.name} (${window.formatFileSize(file.size)})`);\n      };\n\n      // Format file size for display\n      window.formatFileSize = function(bytes) {\n      if (bytes < 1024) return bytes + ' B';\n      if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n      return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n      };\n\n      // Format time for audio display\n      window.formatTime = function(seconds) {\n      if (isNaN(seconds) || !isFinite(seconds)) return \"0:00\";\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = Math.floor(seconds % 60);\n      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n      };\n\n      // Clear recording state\n      window.clearRecording = function(event) {\n      const state = window.recordingState;\n\n      state.audioBlob = null;\n      state.recordedChunks = [];\n      state.uploadedFile = null;\n      window.lastAudioBlob = null;\n\n      // Handle iOS-specific cleanup\n      if (state.isIOS) {\n      if (state.recordRTC) {\n      try {\n      state.recordRTC.stopRecording(function() {\n      state.recordRTC.destroy();\n      if (state.stream) {\n      state.stream.getTracks().forEach(track => track.stop());\n      }\n      setTimeout(() => {\n      state.recordRTC = null;\n      state.stream = null;\n      }, 300);\n      });\n      } catch (e) {\n      console.log(\"[DEBUG] Error stopping RecordRTC:\", e);\n      }\n      state.recordRTC = null;\n      }\n      } else {\n      // Standard cleanup\n      if (state.mediaRecorder && state.mediaRecorder.state !== \"inactive\") {\n      try {\n      state.mediaRecorder.stop();\n      } catch (e) {\n      console.log(\"[DEBUG] Error stopping mediaRecorder:\", e);\n      }\n      }\n      state.mediaRecorder = null;\n      }\n\n      // Stop any active tracks\n      if (state.stream) {\n      state.stream.getTracks().forEach(track => track.stop());\n      state.stream = null;\n      }\n\n      state.isRecording = false;\n\n      // Reset UI elements\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      if (audioPlayback) { audioPlayback.src = \"\"; }\n\n      const audioProgressBar = document.getElementById(\"audioProgressBar\");\n      if (audioProgressBar) { audioProgressBar.style.width = \"0%\"; }\n\n      const audioDuration = document.getElementById(\"audioDuration\");\n      if (audioDuration) { audioDuration.textContent = \"0:00 / 0:00\"; }\n\n      window.stopRecordingFlash();\n      window.setRingPercentage(0);\n\n      const pb = document.getElementById(\"playButton\");\n      if (pb) {\n      pb.innerHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n      <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n      <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n      <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n    </svg>\n      `;\n      }\n\n      document.getElementById(\"retryProcessBtn\").style.display = \"none\";\n\n      // Reset upload UI\n      const fileInfo = document.getElementById(\"fileInfo\");\n      if (fileInfo) fileInfo.style.display = \"none\";\n\n      const formatWarning = document.getElementById(\"formatWarning\");\n      if (formatWarning) formatWarning.style.display = \"none\";\n\n      const audioFileInput = document.getElementById(\"audioFileInput\");\n      if (audioFileInput) audioFileInput.value = '';\n\n      // Update mobile UI if needed\n      window.updateMobileAudioDisplay();\n\n      console.log(\"[DEBUG] Recording cleared\");\n      };\n\n      // Format document (Bold, Italic, etc.)\n      window.formatDoc = function(cmd) {\n      document.execCommand(cmd, false, null);\n      };\n\n      // Insert image in editor\n      window.insertImage = function() {\n      var input = document.createElement('input');\n      input.type = 'file';\n      input.accept = 'image/*';\n      input.onchange = function(e) {\n      var file = e.target.files[0];\n      var reader = new FileReader();\n      reader.onload = function(event) {\n      var img = document.createElement('img');\n      img.src = event.target.result;\n      img.style.maxWidth = '100%';\n      img.dataset.referenceId = 'img_' + Date.now();\n      document.getElementById('editor').appendChild(img);\n      };\n      reader.readAsDataURL(file);\n      };\n      input.click();\n      };\n\n      // Copy editor content\n      window.copyEditorContent = function() {\n      const editor = document.getElementById('editor');\n      if (!editor) return;\n\n      const range = document.createRange();\n      range.selectNodeContents(editor);\n      const selection = window.getSelection();\n      selection.removeAllRanges();\n      selection.addRange(range);\n\n      try {\n      document.execCommand('copy');\n      window.displayBanner('Contenu copié !', 'success');\n      } catch (err) {\n      console.error('Erreur lors de la copie du contenu', err);\n      }\n\n      selection.removeAllRanges();\n      };\n\n      // Toggle between recording and upload modes\n      window.toggleMode = function(mode) {\n      const recordingMode = document.getElementById('recordingMode');\n      const uploadMode = document.getElementById('uploadMode');\n      const recordButton = document.getElementById('recordButton');\n      const uploadButton = document.getElementById('uploadButton');\n\n      if (mode === 'record') {\n      if (recordingMode) recordingMode.style.display = 'block';\n      if (uploadMode) uploadMode.style.display = 'none';\n      if (recordButton) recordButton.classList.add('active');\n      if (uploadButton) uploadButton.classList.remove('active');\n      } else if (mode === 'upload') {\n      if (recordingMode) recordingMode.style.display = 'none';\n      if (uploadMode) uploadMode.style.display = 'block';\n      if (recordButton) recordButton.classList.remove('active');\n      if (uploadButton) uploadButton.classList.add('active');\n      }\n      };\n\n      window.saveContent = function(event) {\n      window._saveContentData = {\n      content: document.getElementById('editor').innerHTML,\n      images: Array.from(document.querySelectorAll('#editor img')).map(img => ({\n      media: img.src,\n      reference_id: img.dataset.referenceId || ('img_' + Date.now()),\n      position: img.offsetTop.toString()\n      }))\n      };\n      window.openPatientModalForSave();\n      };\n\n      // --------------------------------------------------------------------------------------------\n      // GOLDEN RULE 2: Always Attach Event Listeners on Load\n      // --------------------------------------------------------------------------------------------\n\n      window.__attachAudioManagerEvents = function() {\n      console.log(\"[DEBUG] Attaching audio manager event listeners\");\n\n      // Main recording controls\n      const playButton = document.getElementById(\"playButton\");\n      const stopButton = document.getElementById(\"stopButton\");\n\n      if (playButton) {\n      playButton.replaceWith(playButton.cloneNode(true));\n      const newPlayButton = document.getElementById(\"playButton\");\n\n      newPlayButton.addEventListener(\"click\", function(event) {\n      // Toggle between start and pause based on current state\n      if (window.recordingState.isRecording) {\n      window.pauseRecording(event);\n      } else {\n      if (window.recordingState.mediaRecorder && \n      window.recordingState.mediaRecorder.state === \"paused\") {\n      window.resumeRecording(event);\n      } else {\n      window.startRecording(event);\n      }\n      }\n      });\n      }\n\n      if (stopButton) {\n      stopButton.replaceWith(stopButton.cloneNode(true));\n      const newStopButton = document.getElementById(\"stopButton\");\n\n      newStopButton.addEventListener(\"click\", function(event) {\n      window.stopRecording(event);\n      });\n      }\n\n      // Audio playback controls\n      const audioPlaybackControl = document.getElementById(\"audioPlaybackControl\");\n      if (audioPlaybackControl) {\n      audioPlaybackControl.replaceWith(audioPlaybackControl.cloneNode(true));\n      const newPlaybackControl = document.getElementById(\"audioPlaybackControl\");\n\n      newPlaybackControl.addEventListener(\"click\", function() {\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      if (!audioPlayback) return;\n\n      if (audioPlayback.paused) {\n      audioPlayback.play();\n      newPlaybackControl.textContent = \"⏸\";\n      } else {\n      audioPlayback.pause();\n      newPlaybackControl.textContent = \"▶\";\n      }\n      });\n      }\n\n      // Progress bar interaction\n      const audioProgress = document.getElementById(\"audioProgress\");\n      if (audioProgress) {\n      audioProgress.replaceWith(audioProgress.cloneNode(true));\n      const newAudioProgress = document.getElementById(\"audioProgress\");\n\n      newAudioProgress.addEventListener(\"click\", function(event) {\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      if (!audioPlayback || !audioPlayback.duration) return;\n\n      const rect = newAudioProgress.getBoundingClientRect();\n      const offsetX = event.clientX - rect.left;\n      const width = rect.width;\n      const percentage = offsetX / width;\n\n      audioPlayback.currentTime = percentage * audioPlayback.duration;\n      window.updateAudioProgress();\n      });\n\n      // Add touch support for mobile\n      newAudioProgress.addEventListener(\"touchend\", function(event) {\n      if (event.changedTouches.length === 0) return;\n\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      if (!audioPlayback || !audioPlayback.duration) return;\n\n      const rect = newAudioProgress.getBoundingClientRect();\n      const touch = event.changedTouches[0];\n      const offsetX = touch.clientX - rect.left;\n      const width = rect.width;\n      const percentage = offsetX / width;\n\n      audioPlayback.currentTime = percentage * audioPlayback.duration;\n      window.updateAudioProgress();\n      });\n      }\n\n      // Audio playback time updates\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      if (audioPlayback) {\n      // Remove existing listeners first\n      audioPlayback.removeEventListener(\"timeupdate\", window.updateAudioProgress);\n      audioPlayback.removeEventListener(\"loadedmetadata\", window.updateAudioDuration);\n\n      // Add new listeners\n      audioPlayback.addEventListener(\"timeupdate\", window.updateAudioProgress);\n      audioPlayback.addEventListener(\"loadedmetadata\", window.updateAudioDuration);\n      }\n\n      // Clear recording button\n      const clearRecordingButton = document.getElementById(\"clearRecordingButton\");\n      if (clearRecordingButton) {\n      clearRecordingButton.replaceWith(clearRecordingButton.cloneNode(true));\n      const newClearBtn = document.getElementById(\"clearRecordingButton\");\n\n      newClearBtn.addEventListener(\"click\", function(event) {\n      window.clearRecording(event);\n      });\n      }\n\n      // Retry processing button\n      const retryProcessBtn = document.getElementById(\"retryProcessBtn\");\n      if (retryProcessBtn) {\n      retryProcessBtn.replaceWith(retryProcessBtn.cloneNode(true));\n      const newRetryBtn = document.getElementById(\"retryProcessBtn\");\n\n      newRetryBtn.addEventListener(\"click\", function(event) {\n      if (!window.lastAudioBlob) {\n      alert(\"Aucun enregistrement à retraiter.\");\n      return;\n      }\n\n      window.simulateTranscriptionProgress();\n      window.blobToBase64(window.lastAudioBlob)\n      .then(base64Audio => {\n      anvil.call(event.target, \"process_recording\", base64Audio)\n      .then(result => {\n      console.log(\"[DEBUG] Re-processing complete. Server response:\", result);\n      window.finishTranscriptionProgress();\n      })\n      .catch(error => {\n      console.error(\"[DEBUG] Error re-processing recording:\", error);\n      alert(\"Une erreur s'est produite lors du retraitement de l'enregistrement.\");\n      window.finishTranscriptionProgress();\n      });\n      })\n      .catch(err => {\n      console.error(\"[DEBUG] Error converting blob for retry:\", err);\n      alert(\"Une erreur s'est produite lors de la préparation des données audio.\");\n      window.finishTranscriptionProgress();\n      });\n      });\n      }\n\n      // Mode toggle buttons\n      const recordToggleBtn = document.getElementById(\"recordButton\");\n      const uploadToggleBtn = document.getElementById(\"uploadButton\");\n\n      if (recordToggleBtn) {\n      recordToggleBtn.replaceWith(recordToggleBtn.cloneNode(true));\n      const newRecordToggleBtn = document.getElementById(\"recordButton\");\n\n      newRecordToggleBtn.addEventListener('click', function() {\n      window.toggleMode('record');\n      });\n      }\n\n      if (uploadToggleBtn) {\n      uploadToggleBtn.replaceWith(uploadToggleBtn.cloneNode(true));\n      const newUploadToggleBtn = document.getElementById(\"uploadButton\");\n\n      newUploadToggleBtn.addEventListener('click', function() {\n      window.toggleMode('upload');\n      });\n      }\n\n\n\n      // File upload handling\n      const audioFileInput = document.getElementById(\"audioFileInput\");\n      if (audioFileInput) {\n      audioFileInput.replaceWith(audioFileInput.cloneNode(true));\n      const newAudioFileInput = document.getElementById(\"audioFileInput\");\n\n      newAudioFileInput.addEventListener('change', function(event) {\n      window.handleFileSelect(event);\n      });\n      }\n\n      // Drag & drop support\n      const dropZone = document.getElementById(\"dropZone\");\n      if (dropZone) {\n      // First remove any existing listeners\n      const newDropZone = dropZone.cloneNode(true);\n      dropZone.parentNode.replaceChild(newDropZone, dropZone);\n\n      newDropZone.addEventListener('dragover', function(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.classList.add('dragover');\n      });\n\n      newDropZone.addEventListener('dragleave', function(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.classList.remove('dragover');\n      });\n\n      newDropZone.addEventListener('drop', function(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.classList.remove('dragover');\n      window.handleFileSelect(event);\n      });\n\n      newDropZone.addEventListener('click', function(event) {\n      // Don't interfere with direct clicks on the upload button or input\n      if (event.target.classList.contains('upload-button') || event.target.tagName === 'INPUT') {\n      return;\n      }\n      const input = document.getElementById('audioFileInput');\n      if (input) input.click();\n      });\n      }\n\n      // Process and remove file buttons\n      const processFileButton = document.getElementById(\"processFileButton\");\n      const removeFileButton = document.getElementById(\"removeFileButton\");\n\n      if (processFileButton) {\n      processFileButton.replaceWith(processFileButton.cloneNode(true));\n      const newProcessFileButton = document.getElementById(\"processFileButton\");\n\n      newProcessFileButton.addEventListener('click', function(event) {\n      window.processUploadedFile(event);\n      });\n      }\n\n      if (removeFileButton) {\n      removeFileButton.replaceWith(removeFileButton.cloneNode(true));\n      const newRemoveFileButton = document.getElementById(\"removeFileButton\");\n\n      newRemoveFileButton.addEventListener('click', function(event) {\n      window.clearRecording(event);\n      });\n      }\n\n      // Editor toolbar buttons\n      const boldBtn = document.getElementById(\"boldBtn\");\n      const italicBtn = document.getElementById(\"italicBtn\");\n      const underlineBtn = document.getElementById(\"underlineBtn\");\n      const leftAlignBtn = document.getElementById(\"leftAlignBtn\");\n      const centerAlignBtn = document.getElementById(\"centerAlignBtn\");\n      const rightAlignBtn = document.getElementById(\"rightAlignBtn\");\n      const insertImageBtn = document.getElementById(\"insertImageBtn\");\n      const copyBtn = document.getElementById(\"copyBtn\");\n\n      if (boldBtn) {\n      boldBtn.replaceWith(boldBtn.cloneNode(true));\n      const newBoldBtn = document.getElementById(\"boldBtn\");\n      newBoldBtn.addEventListener('click', function() {\n      window.formatDoc('bold');\n      });\n      }\n\n      if (italicBtn) {\n      italicBtn.replaceWith(italicBtn.cloneNode(true));\n      const newItalicBtn = document.getElementById(\"italicBtn\");\n      newItalicBtn.addEventListener('click', function() {\n      window.formatDoc('italic');\n      });\n      }\n\n      if (underlineBtn) {\n      underlineBtn.replaceWith(underlineBtn.cloneNode(true));\n      const newUnderlineBtn = document.getElementById(\"underlineBtn\");\n      newUnderlineBtn.addEventListener('click', function() {\n      window.formatDoc('underline');\n      });\n      }\n\n      if (leftAlignBtn) {\n      leftAlignBtn.replaceWith(leftAlignBtn.cloneNode(true));\n      const newLeftAlignBtn = document.getElementById(\"leftAlignBtn\");\n      newLeftAlignBtn.addEventListener('click', function() {\n      window.formatDoc('justifyleft');\n      });\n      }\n\n      if (centerAlignBtn) {\n      centerAlignBtn.replaceWith(centerAlignBtn.cloneNode(true));\n      const newCenterAlignBtn = document.getElementById(\"centerAlignBtn\");\n      newCenterAlignBtn.addEventListener('click', function() {\n      window.formatDoc('justifycenter');\n      });\n      }\n\n      if (rightAlignBtn) {\n      rightAlignBtn.replaceWith(rightAlignBtn.cloneNode(true));\n      const newRightAlignBtn = document.getElementById(\"rightAlignBtn\");\n      newRightAlignBtn.addEventListener('click', function() {\n      window.formatDoc('justifyright');\n      });\n      }\n\n      if (insertImageBtn) {\n      insertImageBtn.replaceWith(insertImageBtn.cloneNode(true));\n      const newInsertImageBtn = document.getElementById(\"insertImageBtn\");\n      newInsertImageBtn.addEventListener('click', function() {\n      window.insertImage();\n      });\n      }\n\n      if (copyBtn) {\n      copyBtn.replaceWith(copyBtn.cloneNode(true));\n      const newCopyBtn = document.getElementById(\"copyBtn\");\n      newCopyBtn.addEventListener('click', function() {\n      window.copyEditorContent();\n      });\n      }\n\n      // Toolbar recording related buttons\n      const startToolbarRecBtn = document.getElementById('startToolbarRecBtn');\n      if (startToolbarRecBtn) {\n      startToolbarRecBtn.replaceWith(startToolbarRecBtn.cloneNode(true));\n      const newToolbarRecButton = document.getElementById('startToolbarRecBtn');\n\n      newToolbarRecButton.addEventListener('click', function(event) {\n      window.startToolbarRecording(event);\n      });\n      }\n\n      // Validate button\n      const validateBtn = document.getElementById(\"validateBtn\");\n      if (validateBtn) {\n      validateBtn.replaceWith(validateBtn.cloneNode(true));\n      const newValidateButton = document.getElementById(\"validateBtn\");\n\n      newValidateButton.addEventListener('click', function(event) {\n      // The validate button also finalizes any ongoing toolbar recording\n      newValidateButton.classList.add(\"tb-processing-flash\");\n\n      // If a toolbar recording is in progress, finalize it first\n      window.finalizeToolbarRecording()\n      .then(() => {\n      // Then call the normal validation server method\n      return anvil.call(event.target, \"validate_and_send\");\n      })\n      .then(() => {\n      // Once done, remove the processing flash\n      newValidateButton.classList.remove(\"tb-processing-flash\");\n      })\n      .catch((err) => {\n      console.error(\"[DEBUG] Error finalizing or validating:\", err);\n      newValidateButton.classList.remove(\"tb-processing-flash\");\n      });\n      });\n      }\n\n      // Template selection\n      const templateSelectBtn = document.getElementById(\"templateSelectBtn\");\n      if (templateSelectBtn) {\n      templateSelectBtn.replaceWith(templateSelectBtn.cloneNode(true));\n      const newTemplateSelectBtn = document.getElementById(\"templateSelectBtn\");\n\n      newTemplateSelectBtn.addEventListener(\"click\", function() {\n      window.openTemplateModal();\n      });\n      }\n\n      // Template search\n      const templateSearchInput = document.getElementById(\"templateSearchInput\");\n      if (templateSearchInput) {\n      templateSearchInput.replaceWith(templateSearchInput.cloneNode(true));\n      const newTemplateSearchInput = document.getElementById(\"templateSearchInput\");\n\n      newTemplateSearchInput.addEventListener('input', function(event) {\n      window.searchTemplatesInModal(event.target.value);\n      });\n      }\n\n      // Template modal close button\n      const closeTemplateModalBtn = document.getElementById(\"closeTemplateModalBtn\");\n      if (closeTemplateModalBtn) {\n      closeTemplateModalBtn.replaceWith(closeTemplateModalBtn.cloneNode(true));\n      const newCloseTemplateBtn = document.getElementById(\"closeTemplateModalBtn\");\n\n      newCloseTemplateBtn.addEventListener('click', function() {\n      window.closeTemplateModal();\n      });\n      }\n\n      // Patient modal buttons\n      const closePatientModalBtn = document.getElementById(\"closePatientModalBtn\");\n      if (closePatientModalBtn) {\n      closePatientModalBtn.replaceWith(closePatientModalBtn.cloneNode(true));\n      const newClosePatientBtn = document.getElementById(\"closePatientModalBtn\");\n\n      newClosePatientBtn.addEventListener('click', function() {\n      window.closePatientModal();\n      });\n      }\n\n      const newPatientBtn = document.getElementById(\"newPatientBtn\");\n      if (newPatientBtn) {\n      newPatientBtn.replaceWith(newPatientBtn.cloneNode(true));\n      const newNewPatientBtn = document.getElementById(\"newPatientBtn\");\n\n      newNewPatientBtn.addEventListener('click', function() {\n      window.newPatientForSave();\n      });\n      }\n\n      // Language dropdown\n      const allDropdowns = document.querySelectorAll('.dropdown');\n      allDropdowns.forEach(dd => {\n      // Remove existing handlers\n      const newDD = dd.cloneNode(true);\n      dd.parentNode.replaceChild(newDD, dd);\n\n      newDD.addEventListener('click', function(e) {\n      const menu = newDD.querySelector('.dropdown-menu');\n      if (!menu || e.target.closest('.dropdown-menu')) return;\n\n      menu.classList.toggle('active');\n      });\n\n      const dropdownItems = newDD.querySelectorAll('.dropdown-menu div');\n      dropdownItems.forEach(item => {\n      item.addEventListener('click', function(ev) {\n      ev.stopPropagation();\n      const selectedValue = ev.target.getAttribute('data-value');\n      if (selectedValue) {\n      const displaySpan = newDD.querySelector('span:first-child');\n      if (displaySpan) {\n      displaySpan.textContent = selectedValue;\n      }\n      const menu = newDD.querySelector('.dropdown-menu');\n      if (menu) menu.classList.remove('active');\n      }\n      });\n      });\n      });\n\n      // Nav tabs\n      const navTabs = document.querySelectorAll('.nav-tab');\n      navTabs.forEach(tab => {\n      // Remove existing handlers\n      const newTab = tab.cloneNode(true);\n      tab.parentNode.replaceChild(newTab, tab);\n\n      newTab.addEventListener('click', function(e) {\n      const action = e.target.dataset.click;\n      if (action === 'production') {\n      anvil.call(e.target, 'open_production_form');\n      } else if (action === 'templates') {\n      anvil.call(e.target, 'open_templates_form');\n      } else if (action === 'archives') {\n      anvil.call(e.target, 'open_archives_form');\n      } else if (action === 'settings') {\n      anvil.call(e.target, 'open_settings_form');\n      }\n      });\n      });\n\n      // Bottom buttons\n      const bottomButtons = document.querySelectorAll('.bottom-button');\n      bottomButtons.forEach(btn => {\n      // Remove existing handlers\n      const newBtn = btn.cloneNode(true);\n      btn.parentNode.replaceChild(newBtn, btn);\n\n      newBtn.addEventListener('click', function(e) {\n      const action = e.target.dataset.click;\n      if (action === 'statut') {\n      anvil.call(e.target, 'on_statut_clicked')\n      .then(function(chosenStatus) {\n      if (chosenStatus) {\n      e.target.textContent = chosenStatus;\n      }\n      })\n      .catch(function(error) {\n      console.error(\"[DEBUG] Error in statut handling:\", error);\n      });\n      } else if (action === 'enregistrer') {\n      window.saveContent(e);\n      } else if (action === 'partager') {\n      console.log(\"Partager déclenché !\");\n      window.displayBanner(\"Fonctionnalité en cours de développement par l'équipe Checkvet\", \"success\");\n      }\n      });\n      });\n\n      // Session refresh handlers\n      window.addEventListener('online', function() {\n      console.log(\"[DEBUG] Application back online, refreshing session\");\n      anvil.call(document.body, 'refresh_session_relay');\n      });\n\n      document.addEventListener('visibilitychange', function() {\n      if (document.visibilityState === 'visible') {\n      console.log(\"[DEBUG] Application visible again, checking session\");\n      anvil.call(document.body, 'refresh_session_relay');\n      }\n      });\n\n      // Listen for visibility changes to re-request wake lock\n      document.addEventListener('visibilitychange', function() {\n      if (document.visibilityState === 'visible' && window.wakeLockController) {\n      window.wakeLockController.requestWakeLock();\n      }\n      });\n\n      // Check for iOS and set up iOS-specific enhancements\n      if (window.recordingState.isIOS) {\n      window.setupIOSSupport();\n      }\n\n      // Update time on load\n      window.updateTime();\n\n      // Initial wake lock request\n      window.wakeLockController.requestWakeLock();\n\n      console.log(`[DEBUG] Audio manager event listeners attached. iOS detection: ${window.recordingState.isIOS}`);\n      };\n\n      // Set up regular time updates\n      setInterval(window.updateTime, 60000);\n      }\n\n      // --------------------------------------------------------------------------------------------\n      // GOLDEN RULE 3: Immediately Attach Everything\n      // --------------------------------------------------------------------------------------------\n      window.__attachAudioManagerEvents();\n\n      // Add some debug output to help identify initialization issues\n      console.log(\"[DEBUG JS] Audio manager script loaded and initialized\");\n      console.log(\"[DEBUG JS] Key functions:\", {\n      rebuildPatientSearchInput: typeof window.rebuildPatientSearchInput === 'function' ? 'defined' : 'undefined',\n      renderTemplates: typeof window.renderTemplates === 'function' ? 'defined' : 'undefined',\n      populateTemplateModal: typeof window.populateTemplateModal === 'function' ? 'defined' : 'undefined'\n      });\n    </script>\n  </body>\n</html>"
  type: HtmlTemplate
is_package: true
