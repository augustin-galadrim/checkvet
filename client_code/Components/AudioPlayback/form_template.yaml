components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <style>\n      #audioBar {\n        width: 100%;\n        height: 50px;\n        background-color: #f8f8f8;\n        border-radius: 5px;\n        display: none; /* Initially hidden, JS will change to 'flex' */\n        align-items: center;\n        padding: 0 10px;\n        margin-bottom: 20px;\n        border: 1px solid #ddd;\n        position: relative;\n      }\n      #audioPlayback-button-control {\n        width: 30px;\n        height: 30px;\n        background-color: #3974CB;\n        border: none;\n        border-radius: 50%;\n        color: white;\n        cursor: pointer;\n        margin-right: 10px;\n        /* Added for centering SVG */\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n      #audioPlayback-div-progress {\n        flex-grow: 1;\n        height: 10px;\n        background-color: #ddd;\n        border-radius: 5px;\n        overflow: hidden;\n        cursor: pointer;\n        margin-right: 10px;\n        touch-action: none;\n      }\n      #audioPlayback-div-progressBar {\n        width: 0;\n        height: 100%;\n        background-color: #3974CB;\n        transition: width 0.1s linear;\n      }\n      #audioPlayback-span-duration {\n        font-size: 14px;\n      }\n      #audioPlayback-button-clear {\n        background: none;\n        border: none;\n        cursor: pointer;\n        color: #666;\n        margin-left: 10px;\n        /* Added for centering SVG */\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        padding: 4px;\n      }\n      #audioPlayback-audio-player {\n        display: none;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"audioBar\">\n      <button id=\"audioPlayback-button-control\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-play\">\n          <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n        </svg>\n      </button>\n      <div id=\"audioPlayback-div-progress\">\n        <div id=\"audioPlayback-div-progressBar\"></div>\n      </div>\n      <span id=\"audioPlayback-span-duration\">0:00 / 0:00</span>\n      <button id=\"audioPlayback-button-clear\" title=\"Reset recording\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-trash\">\n          <polyline points=\"3 6 5 6 21 6\"></polyline>\n          <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n        </svg>\n      </button>\n      <audio id=\"audioPlayback-audio-player\"></audio>\n    </div>\n\n    <script>\n      if (!window.__audio_playback_globals) {\n        window.__audio_playback_globals = true;\n\n        const logger = window.createLogger('AudioPlayback');\n\n        // --- SVG DEFINITIONS ---\n        const playIconSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-play\">\n          <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n          </svg>`;\n        const pauseIconSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-pause\">\n          <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\"></rect>\n          <rect x=\"14\" y=\"4\" width=\"4\" height=\"16\"></rect>\n          </svg>`;\n\n        window.formatTime = (seconds) => {\n          if (isNaN(seconds) || !isFinite(seconds)) return \"0:00\";\n          const min = Math.floor(seconds / 60);\n          const sec = Math.floor(seconds % 60).toString().padStart(2, '0');\n          return `${min}:${sec}`;\n        };\n\n        async function getAccurateDuration(audioBlob) {\n          try {\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            const arrayBuffer = await audioBlob.arrayBuffer();\n            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n            const durationSpan = document.getElementById('audioPlayback-span-duration');\n            if (durationSpan) {\n              durationSpan.textContent = `0:00 / ${formatTime(audioBuffer.duration)}`;\n            }\n          } catch (e) {\n            logger.error(\"Error decoding audio data with AudioContext:\", e);\n          }\n        }\n\n        window.setupAudioPlayback = function(audioBlob) {\n          const audioBar = document.getElementById(\"audioBar\");\n          const audioPlayer = document.getElementById(\"audioPlayback-audio-player\");\n          if (!audioBar || !audioPlayer || !audioBlob) {\n            logger.error('setupAudioPlayback failed: elements/blobs missing.');\n            return;\n          }\n\n          const audioURL = URL.createObjectURL(audioBlob);\n          audioPlayer.src = audioURL;\n          audioPlayer.load();\n          audioBar.style.display = 'flex';\n\n          getAccurateDuration(audioBlob);\n        };\n\n        window.resetAudioPlayback = function() {\n          logger.log('Resetting audio playback UI.');\n          const audioPlayer = document.getElementById(\"audioPlayback-audio-player\");\n          if (audioPlayer && audioPlayer.src) {\n            URL.revokeObjectURL(audioPlayer.src);\n            audioPlayer.src = '';\n          }\n          document.getElementById(\"audioBar\").style.display = 'none';\n          document.getElementById(\"audioPlayback-div-progressBar\").style.width = '0%';\n          document.getElementById('audioPlayback-span-duration').textContent = '0:00 / 0:00';\n          document.getElementById('audioPlayback-button-control').innerHTML = playIconSVG;\n        };\n\n        window.attachPlaybackEventListeners = function() {\n          logger.log('Attaching/Re-attaching playback event listeners.');\n\n          const reattach = (elementId, event, handler) => {\n            const element = document.getElementById(elementId);\n            if (element) {\n              const newElement = element.cloneNode(true);\n              element.parentNode.replaceChild(newElement, element);\n              newElement.addEventListener(event, handler);\n              return newElement;\n            }\n            logger.warn(`Element with ID '${elementId}' not found for event attachment.`);\n            return null;\n          };\n\n          const audioEl = reattach('audioPlayback-audio-player', 'timeupdate', () => {\n            const progressBar = document.getElementById('audioPlayback-div-progressBar');\n            const durationSpan = document.getElementById('audioPlayback-span-duration');\n            const { currentTime, duration } = audioEl;\n            if (!duration || !isFinite(duration) || !progressBar || !durationSpan) return;\n\n            progressBar.style.width = `${(currentTime / duration) * 100}%`;\n            durationSpan.textContent = `${formatTime(currentTime)} / ${formatTime(duration)}`;\n          });\n\n          if (!audioEl) return;\n\n          audioEl.addEventListener('ended', () => { \n            const playbackBtn = document.getElementById('audioPlayback-button-control');\n            if(playbackBtn) playbackBtn.innerHTML = playIconSVG;\n          });\n          audioEl.addEventListener('error', (e) => { logger.error(\"Audio element reported an error:\", e); });\n\n          const playbackBtn = reattach('audioPlayback-button-control', 'click', () => {\n            if (audioEl.paused) { audioEl.play(); playbackBtn.innerHTML = pauseIconSVG; } \n            else { audioEl.pause(); playbackBtn.innerHTML = playIconSVG; }\n          });\n\n          reattach('audioPlayback-button-clear', 'click', (e) => anvil.call(e.target.closest('button'), 'clear_button_clicked'));\n\n          reattach('audioPlayback-div-progress', 'click', (e) => {\n            const progressDiv = e.currentTarget;\n            if(!audioEl.src || isNaN(audioEl.duration)) return;\n            const rect = progressDiv.getBoundingClientRect();\n            const offsetX = e.clientX - rect.left;\n            audioEl.currentTime = (offsetX / rect.width) * audioEl.duration;\n          });\n\n          logger.log('All playback event listeners have been refreshed.');\n        }\n      }\n    </script>\n  </body>\n</html>"
  type: HtmlTemplate
custom_component: true
events:
- {default_event: true, name: x_clear_recording}
is_package: true
properties:
- {default_binding_prop: true, important: true, name: audio_blob, type: object}
