components: []
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            .modal-header-bar {
              background: #e5e5e5;
              padding: 15px 20px;
              font-size: 16px;
              text-align: center;
              border-bottom: 1px solid #ddd;
              user-select: none;
              display: flex;
              align-items: center;
              justify-content: space-between;
            }
            .return-button {
              background: none;
              border: none;
              font-size: 16px;
              cursor: pointer;
              color: #333;
            }
            .return-button:hover {
              text-decoration: underline;
            }
            .header-title {
              font-weight: bold;
              font-size: 18px;
            }
            .placeholder {
              width: 60px; /* to balance the back button width */
            }
          </style>
        </head>
        <body>
          <div class="modal-header-bar" id="headerBar">
            <button class="return-button" id="returnButton">‚Üê Return</button>
            <span class="header-title" id="headerTitle"></span>
            <div class="placeholder"></div>
          </div>
          <script>
            // Only define globals and helpers once
            if (!window.__modal_header_globals) {
              window.__modal_header_globals = true;

              window.setHeaderTitle = function(title) {
                const titleElement = document.getElementById("headerTitle");
                if (titleElement) {
                  titleElement.textContent = title;
                }
              };

              window.attachReturnButtonListener = function() {
                const returnButton = document.getElementById("returnButton");
                if(returnButton) {
                  // Clone and replace to prevent duplicate listeners
                  const newButton = returnButton.cloneNode(true);
                  returnButton.parentNode.replaceChild(newButton, returnButton);

                  newButton.addEventListener('click', (event) => {
                    anvil.call(event.target, 'return_button_click');
                  });
                }
              };
            }
          </script>
        </body>
      </html>
  type: HtmlTemplate
custom_component: true
is_package: true
properties:
- {default_binding_prop: true, default_value: '', important: true, name: return_form, type: string}
- {default_value: '', important: true, name: title, type: string}
