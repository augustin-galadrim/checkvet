components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <style>\n      /* Styles copied from AudioManagerForm to ensure visual consistency */\n      .audio-section {\n        /* Make the background transparent */\n        background: transparent; \n\n        /* Use flexbox for perfect centering */\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        /* Remove padding and margin that created the rectangle effect */\n        padding: 0;\n        margin-bottom: 0;\n\n        position: relative;\n      }      \n      #audioBar { width: 100%; background-color: #4caf50; color: #fff; text-align: center; padding: 15px; font-size: 18px; cursor: pointer; margin-bottom: 20px; border-radius: 5px; }\n      .recording-controls {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        margin: 0 auto; /* This removes the vertical margin */\n      }      \n      #circularProgress { position: relative; width: 200px; height: 200px; }\n      #progressRing { position: absolute; top: 0; left: 0; width: 100%; height: 100%; border-radius: 50%; background: conic-gradient(#ddd 0deg, #ddd 0deg); }\n      #centerHole { position: absolute; top: 8px; left: 8px; width: 184px; height: 184px; background-color: #fff; border-radius: 50%; z-index: 1; }\n      .control-button-group { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); display: flex; gap: 30px; z-index: 2; }\n      .control-button { width: 45px; height: 45px; border: 1px solid #666; border-radius: 2px; cursor: pointer; background-color: white; color: #666; display: flex; align-items: center; justify-content: center; font-size: 24px; transition: all 0.3s ease; padding: 0; }\n      .control-button svg { pointer-events: none; }\n      .control-button:hover { background-color: #f5f5f5; border-color: #333; color: #333; }\n      @keyframes recordingFlash { 0% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); } 50% { background: conic-gradient(#ffffff 0deg, #ffffff 360deg); } 100% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); } }\n      .recording-flash { animation: recordingFlash 1.5s infinite; }\n    </style>\n  </head>\n  <body>\n    <!-- The recorder UI -->\n    <div class=\"audio-section\">\n      <div class=\"recording-controls\" id=\"recordingMode\">\n        <div id=\"circularProgress\">\n          <div id=\"progressRing\"></div>\n          <div id=\"centerHole\"></div>\n          <div class=\"control-button-group\">\n            <button id=\"playButton\" class=\"control-button\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/><path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/><path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/></svg>\n            </button>\n            <button id=\"stopButton\" class=\"control-button\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\"><path d=\"M4 12l5 5L20 7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      <audio id=\"audioPlayback\" style=\"display: none;\"></audio>\n    </div>\n\n    <script>\n      if (!window.__recording_widget_globals) {\n        window.__recording_widget_globals = true;\n\n        let recordingState = { mediaRecorder: null, recordedChunks: [], audioBlob: null, stream: null, isRecording: false };\n\n        const micIconHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/><path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/><path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/></svg>`;\n        const pauseIconHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\"><rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/><path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>`;\n\n        window.setRingPercentage = function(percentage) {\n          const ring = document.getElementById(\"progressRing\");\n          if (ring) {\n            const angle = (Math.max(0, Math.min(100, percentage)) / 100) * 360;\n            ring.style.background = `conic-gradient(#4caf50 ${angle}deg, #ddd ${angle}deg)`;\n          }\n        };\n\n        window.startRecordingFlash = () => document.getElementById(\"progressRing\")?.classList.add(\"recording-flash\");\n        window.stopRecordingFlash = () => document.getElementById(\"progressRing\")?.classList.remove(\"recording-flash\");\n\n        window.attachRecordingEvents = function() {\n          const playButton = document.getElementById(\"playButton\");\n          const stopButton = document.getElementById(\"stopButton\");\n\n          if (playButton) {\n            playButton.addEventListener(\"click\", async (evt) => {\n              if (!recordingState.isRecording) {\n                try {\n                  recordingState.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                  recordingState.mediaRecorder = new MediaRecorder(recordingState.stream);\n                  recordingState.recordedChunks = [];\n                  recordingState.mediaRecorder.ondataavailable = e => recordingState.recordedChunks.push(e.data);\n                  recordingState.mediaRecorder.onstop = () => {\n                    recordingState.audioBlob = new Blob(recordingState.recordedChunks, { type: 'audio/webm' });\n                    // THIS IS THE CRITICAL CHANGE: Call a method on THIS component\n                    anvil.call(stopButton, \"handle_js_recording_complete\", recordingState.audioBlob);\n                  };\n                  recordingState.mediaRecorder.start();\n                  recordingState.isRecording = true;\n                  playButton.innerHTML = pauseIconHTML;\n                  startRecordingFlash();\n                  anvil.call(playButton, 'start_recording');\n                } catch (err) {\n                  console.error(\"Microphone access error:\", err);\n                  anvil.call(playButton, 'show_error', \"Microphone access denied.\");\n                }\n              } else {\n                recordingState.mediaRecorder.pause();\n                recordingState.isRecording = false;\n                playButton.innerHTML = micIconHTML;\n                anvil.call(playButton, 'pause_recording');\n              }\n            });\n          }\n\n          if (stopButton) {\n            stopButton.addEventListener(\"click\", (evt) => {\n              if (recordingState.mediaRecorder && recordingState.mediaRecorder.state !== \"inactive\") {\n                recordingState.mediaRecorder.stop();\n                recordingState.isRecording = false;\n                stopRecordingFlash();\n                if(playButton) playButton.innerHTML = micIconHTML;\n                anvil.call(stopButton, 'stop_recording');\n              }\n            });\n          }\n        };\n      }\n\n      // Attach event handlers when this component is loaded\n      attachRecordingEvents();\n\n    </script>\n  </body>\n</html>"
  type: HtmlTemplate
custom_component: true
events:
- default_event: true
  name: recording_complete
  parameters:
  - {name: audio_blob}
is_package: true
properties: []
