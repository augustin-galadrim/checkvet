components: []
container:
  properties:
    html: "<html>\n\n  <head>\n    <meta charset=\"UTF-8\">\n    <style>\n      /* The main container for the recording widget */\n      .audio-section {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        /* Set a fixed height to ensure layout stability */\n        height: 200px;\n        width: 100%;\n      }\n\n      /* This container will hold the button */\n      .recording-controls {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      /* Styles for the single, large record button */\n      #record-toggle-button {\n        width: 90px;  /* Slightly larger for a better touch target */\n        height: 90px;\n        border-radius: 50%;\n        border: none;\n        cursor: pointer;\n        background-color: #4CAF50; /* Primary Green */\n        color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        /* The icon size is controlled by the font-size */\n        font-size: 38px; \n        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1); /* Smoother transition */\n        box-shadow: 0 4px 10px rgba(0,0,0,0.25);\n      }\n\n      #record-toggle-button:hover {\n        background-color: #45a049; /* Darker green on hover */\n        transform: scale(1.05); /* Slightly enlarge on hover */\n        box-shadow: 0 6px 12px rgba(0,0,0,0.3);\n      }\n\n      /* Style for the button when it is in the \"recording\" state */\n      #record-toggle-button.is-recording {\n        background-color: #f44336; /* Red for stop */\n        animation: pulse-animation 1.5s infinite;\n      }\n\n      /* The SVG icon inside the button */\n      #record-toggle-button svg {\n        pointer-events: none;\n        transition: transform 0.3s ease-in-out;\n      }\n\n      /* Animation for pulsing the record button when recording */\n      @keyframes pulse-animation {\n        0% { box-shadow: 0 0 0 0 rgba(244, 67, 54, 0.7); }\n        70% { box-shadow: 0 0 0 25px rgba(244, 67, 54, 0); }\n        100% { box-shadow: 0 0 0 0 rgba(244, 67, 54, 0); }\n      }\n    </style>\n  </head>\n\n  <body>\n    <div class=\"audio-section\">\n      <div class=\"recording-controls\" id=\"recordingMode\">\n        <!-- The single record/stop button -->\n        <button id=\"record-toggle-button\">\n          <!-- The initial icon is the new microphone SVG -->\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n            <path d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\"/>\n            <path d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"/>\n          </svg>\n        </button>\n      </div>\n    </div>\n\n    <script>\n      if (!window.__recording_widget_globals) {\n        window.__recording_widget_globals = true;\n\n        let recordingState = {\n          mediaRecorder: null,\n          recordedChunks: [],\n          audioBlob: null,\n          stream: null,\n          isRecording: false\n        };\n\n        // Define the HTML for both icons as variables for easy swapping\n        const stopIconHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5z\"/></svg>`;\n        const micIconHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\"/><path d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"/></svg>`;\n\n        // --- MAIN EVENT ATTACHMENT FUNCTION ---\n        window.attachRecordingEvents = function() {\n          const recordButton = document.getElementById(\"record-toggle-button\");\n\n          if (recordButton) {\n            // Use the cloneNode trick to prevent duplicate event listeners on re-renders\n            const newRecordButton = recordButton.cloneNode(true);\n            recordButton.parentNode.replaceChild(newRecordButton, recordButton);\n\n            newRecordButton.addEventListener(\"click\", async (evt) => {\n              // If we are NOT currently recording, START recording.\n              if (!recordingState.isRecording) {\n                try {\n                  const supportedMimeType = MediaRecorder.isTypeSupported('audio/mp4') ? 'audio/mp4' : 'webm';\n\n                  recordingState.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                  recordingState.mediaRecorder = new MediaRecorder(recordingState.stream, { mimeType: supportedMimeType });\n                  recordingState.recordedChunks = [];\n                  recordingState.mediaRecorder.ondataavailable = e => recordingState.recordedChunks.push(e.data);\n\n                  recordingState.mediaRecorder.onstop = () => {\n                    recordingState.audioBlob = new Blob(recordingState.recordedChunks, { type: supportedMimeType });\n                    anvil.call(newRecordButton, \"handle_js_recording_complete\", recordingState.audioBlob);\n                  };\n\n                  recordingState.mediaRecorder.start();\n                  recordingState.isRecording = true;\n\n                  // Change button to \"stop\" state\n                  newRecordButton.innerHTML = stopIconHTML;\n                  newRecordButton.classList.add(\"is-recording\");\n\n                  anvil.call(newRecordButton, 'start_recording');\n\n                } catch (err) {\n                  console.error(\"Microphone access error:\", err);\n                  anvil.call(newRecordButton, 'show_error', \"Microphone access denied.\");\n                  // Reset button state on error\n                  newRecordButton.innerHTML = micIconHTML;\n                  newRecordButton.classList.remove(\"is-recording\");\n                  recordingState.isRecording = false;\n                }\n              } else {\n                // If we ARE currently recording, STOP recording.\n                if (recordingState.mediaRecorder && recordingState.mediaRecorder.state !== \"inactive\") {\n                  recordingState.mediaRecorder.stop();\n                  recordingState.isRecording = false;\n\n                  // Clean up the stream to turn off the browser's mic indicator\n                  if (recordingState.stream) {\n                    recordingState.stream.getTracks().forEach(track => track.stop());\n                    recordingState.stream = null;\n                  }\n\n                  // Reset button to \"record\" state\n                  newRecordButton.innerHTML = micIconHTML;\n                  newRecordButton.classList.remove(\"is-recording\");\n\n                  anvil.call(newRecordButton, 'stop_recording');\n                }\n              }\n            });\n          }\n        };\n      }\n\n      attachRecordingEvents();\n    </script>\n  </body>\n\n</html>"
  type: HtmlTemplate
custom_component: true
events:
- default_event: true
  name: recording_complete
  parameters:
  - {name: audio_blob}
is_package: true
properties: []
