components: []
container:
  properties:
    html: "<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <style>\n      .audio-section {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 20px 0;\n        width: 100%;\n      }\n      .recording-controls {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n      #recordingWidget-button-toggle {\n        width: 90px;\n        height: 90px;\n        border-radius: 50%;\n        border: none;\n        cursor: pointer;\n        background-color: #3974CB; \n        color: white;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 38px; \n        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n        box-shadow: 0 4px 10px rgba(0,0,0,0.25);\n      }\n      #recordingWidget-button-toggle:hover {\n        background-color: #4B9AE9;\n        transform: scale(1.05);\n        box-shadow: 0 6px 12px rgba(0,0,0,0.3);\n      }\n      #recordingWidget-button-toggle.is-recording {\n        background-color: #f44336; /* Red for stop */\n        animation: pulse-animation 1.5s infinite;\n      }\n      #recordingWidget-button-toggle svg {\n        pointer-events: none;\n        transition: transform 0.3s ease-in-out;\n      }\n      @keyframes pulse-animation {\n        0% { box-shadow: 0 0 0 0 rgba(244, 67, 54, 0.7); }\n        70% { box-shadow: 0 0 0 25px rgba(244, 67, 54, 0); }\n        100% { box-shadow: 0 0 0 0 rgba(244, 67, 54, 0); }\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"audio-section\">\n      <div class=\"recording-controls\" id=\"recordingMode\">\n        <button id=\"recordingWidget-button-toggle\" title=\"Start Recording\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n            <path d=\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\"/>\n            <path d=\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\"/>\n          </svg>\n        </button>\n      </div>\n    </div>\n\n    <script>\n      if (!window.__recording_widget_globals) {\n        window.__recording_widget_globals = true;\n\n        const logger = window.createLogger('RecordingWidget');\n\n        // The NoSleep object will be safely handled by the wakeLockManager in global-scripts.js\n\n        let recordingState = {\n          mediaRecorder: null,\n          recordedChunks: [],\n          stream: null,\n          isRecording: false,\n          healthCheckTimer: null\n        };\n\n        const stopIconHTML = `<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" fill=\\\"currentColor\\\" viewBox=\\\"0 0 16 16\\\"><path d=\\\"M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5z\\\"/></svg>`;\n        const micIconHTML = `<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" fill=\\\"currentColor\\\" viewBox=\\\"0 0 16 16\\\"><path d=\\\"M5 3a3 3 0 0 1 6 0v5a3 3 0 0 1-6 0V3z\\\"/><path d=\\\"M3.5 6.5A.5.5 0 0 1 4 7v1a4 4 0 0 0 8 0V7a.5.5 0 0 1 1 0v1a5 5 0 0 1-4.5 4.975V15h3a.5.5 0 0 1 0 1h-7a.5.5 0 0 1 0-1h3v-2.025A5 5 0 0 1 3 8V7a.5.5 0 0 1 .5-.5z\\\"/></svg>`;\n\n        const isIOS = () => /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\n\n        function cleanupAndReset(options = {}) {\n          const { showError, errorMessage } = options;\n          logger.log('Performing full cleanup and reset.');\n          const recordButton = document.getElementById(\"recordingWidget-button-toggle\");\n\n          if (window.wakeLockManager) {\n            window.wakeLockManager.disable();\n          }\n\n          clearTimeout(recordingState.healthCheckTimer);\n\n          if (recordingState.mediaRecorder && recordingState.mediaRecorder.state === \"recording\") {\n            recordingState.mediaRecorder.stop();\n          }\n\n          if (recordingState.stream) {\n            recordingState.stream.getTracks().forEach(track => track.stop());\n          }\n\n          recordingState.stream = null;\n          recordingState.mediaRecorder = null;\n          recordingState.recordedChunks = [];\n          recordingState.isRecording = false;\n\n          if (recordButton) {\n            recordButton.innerHTML = micIconHTML;\n            recordButton.classList.remove(\"is-recording\");\n          }\n\n          if (showError && recordButton) {\n            anvil.call(recordButton, 'show_error', errorMessage || \"An unknown error occurred.\");\n          }\n        }\n\n\n        window.attachRecordingEvents = function() {\n          const recordButton = document.getElementById(\"recordingWidget-button-toggle\");\n\n          if (recordButton) {\n            const newRecordButton = recordButton.cloneNode(true);\n            recordButton.parentNode.replaceChild(newRecordButton, recordButton);\n\n            newRecordButton.addEventListener(\"click\", async (evt) => {\n              if (!recordingState.isRecording) {\n                try {\n                  if (window.wakeLockManager) {\n                    await window.wakeLockManager.enable();\n                  }\n\n                  recordingState.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n                  // --- NEW: Stabilization delay for PWA environment ---\n                  await new Promise(resolve => setTimeout(resolve, 100));\n\n                  const audioTrack = recordingState.stream.getAudioTracks()[0];\n                  if (!audioTrack) {\n                    throw new Error(\"No audio track found in the stream.\");\n                  }\n\n                  audioTrack.onended = () => {\n                    if (isRecording) {\n                      cleanupAndReset({ showError: true, errorMessage: \"Recording was interrupted. Please try again.\" });\n                    }\n                  };\n\n                  const mimeTypes = ['audio/mp4', 'audio/webm;codecs=opus', 'audio/webm'];\n                  const supportedMimeType = mimeTypes.find(type => MediaRecorder.isTypeSupported(type));\n\n                  if (!supportedMimeType) {\n                    cleanupAndReset({ showError: true, errorMessage: \"Your browser does not support audio recording.\" });\n                    return;\n                  }\n\n                  logger.log(`Using supported MIME type: ${supportedMimeType}`);\n\n                  let dataReceived = false;\n                  recordingState.mediaRecorder = new MediaRecorder(recordingState.stream, { mimeType: supportedMimeType });\n                  recordingState.recordedChunks = [];\n\n                  recordingState.mediaRecorder.ondataavailable = e => {\n                    if (e.data.size > 0) {\n                      dataReceived = true;\n                      recordingState.recordedChunks.push(e.data);\n                    }\n                  };\n\n                  recordingState.mediaRecorder.onstop = () => {\n                    const audioBlob = new Blob(recordingState.recordedChunks, { type: supportedMimeType });\n\n                    if (audioBlob.size === 0) {\n                      logger.warn(\"onstop: An empty audio blob was created. Aborting Python call.\");\n                      return;\n                    }\n\n                    logger.log('onstop: Recording finished successfully, calling python `handle_js_recording_complete`.');\n                    anvil.call(newRecordButton, \"handle_js_recording_complete\", audioBlob, supportedMimeType);\n                  };\n\n                  if (isIOS()) {\n                    logger.log(\"iOS detected. Enabling health check.\");\n                    recordingState.mediaRecorder.start(250); \n\n                    recordingState.healthCheckTimer = setTimeout(() => {\n                      if (!dataReceived) {\n                        logger.error(\"iOS Health Check Failed: No audio data received.\");\n                        cleanupAndReset({ showError: true, errorMessage: \"Recording failed to start. Please check permissions and try again.\" });\n                      } else {\n                        logger.log(\"iOS Health Check Passed.\");\n                      }\n                    }, 500);\n                  } else {\n                    logger.log(\"Non-iOS platform detected. Starting standard recording.\");\n                    recordingState.mediaRecorder.start();\n                  }\n\n                  recordingState.isRecording = true;\n                  newRecordButton.innerHTML = stopIconHTML;\n                  newRecordButton.classList.add(\"is-recording\");\n                  anvil.call(newRecordButton, 'start_recording');\n                  logger.log('Recording started.');\n\n                } catch (err) {\n                  logger.error(\"Microphone access error:\", err);\n                  cleanupAndReset({ showError: true, errorMessage: \"Microphone access denied. Please check your browser and system settings.\" });\n                }\n              } else {\n                logger.log('User initiated stop.');\n                cleanupAndReset();\n                anvil.call(newRecordButton, 'stop_recording');\n              }\n            });\n            logger.log('Event listener attached to record button.');\n          } else {\n            logger.warn('Could not attach listener to record button as it was not found.');\n          }\n        };\n      }\n      attachRecordingEvents();\n    </script>\n  </body>\n</html>"
  type: HtmlTemplate
custom_component: true
events:
- default_event: true
  name: recording_complete
  parameters:
  - {name: audio_blob}
is_package: true
properties: []
