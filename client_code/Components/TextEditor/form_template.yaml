components: []
container:
  properties:
    html: "<div class=\"editor-section\">\n  <style>\n    .editor-section { background: #fff; border-radius: 8px; overflow: hidden; border: 1px solid #ddd; }\n    #toolbar { padding: 10px; background: #f8f8f8; border-bottom: 1px solid #ddd; display: flex; flex-wrap: wrap; gap: 5px; align-items: center; }\n    .toolbar-button { padding: 6px 12px; border: 1px solid #ddd; border-radius: 4px; background: #fff; cursor: pointer; }\n    .toolbar-button:hover { background: #f5f5f5; }\n    .toolbar-button.active { background-color: #d0ebff; border-color: #66b0ff; box-shadow: inset 0 2px 4px rgba(0,0,0,0.1); }\n    .toolbar-button svg { vertical-align: middle; }\n    #editor { min-height: 300px; padding: 20px; overflow-y: auto; font-size: 16px; line-height: 1.5; }\n    #editor p, #editor div { margin: 0; }\n    .toolbar-group { display: inline-flex; gap: 5px; }\n    .toolbar-button.disabled { background-color: #cccccc; color: #666666; cursor: not-allowed; pointer-events: none; border-color: #bbbbbb; }\n    .toolbar-button.disabled:hover { background-color: #cccccc; border-color: #bbbbbb; }\n\n    /* === ADVANCED IMAGE EDITOR STYLES === */\n    .image-editor-modal {\n    display: none;\n    position: fixed;\n    z-index: 10010;\n    left: 0; top: 0; width: 100%; height: 100%;\n    background-color: rgba(0,0,0,0.8);\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    }\n    .image-editor-content {\n    background-color: #2c2c2e; /* Dark theme for focus */\n    border-radius: 12px;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.5);\n    width: 95vw;\n    height: 90vh;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden; /* Contains the canvas */\n    position: relative; /* For tool palette positioning */\n    }\n    .editor-canvas-container {\n    flex-grow: 1; /* Takes up all available space */\n    position: relative;\n    overflow: hidden;\n    touch-action: none;\n    background-color: #1c1c1e; /* Dark background */\n    }\n    #base-canvas, #drawing-canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform-origin: 0 0;\n    }\n    #temp-text-input-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    overflow: hidden;\n    transform-origin: 0 0;\n    }\n    #temp-text-input {\n    position: absolute;\n    background: transparent;\n    border: 1px dashed #fff;\n    color: white;\n    outline: none;\n    z-index: 10;\n    padding: 2px;\n    font-family: Arial, sans-serif;\n    line-height: 1.2;\n    pointer-events: all;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    }\n    .tool-palette {\n    position: absolute;\n    bottom: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    background-color: rgba(60, 60, 60, 0.85);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border-radius: 12px;\n    padding: 8px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.4);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    }\n    .palette-button {\n    background: transparent;\n    border: none;\n    color: white;\n    width: 44px;\n    height: 44px;\n    border-radius: 8px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: background-color 0.2s;\n    position: relative;\n    }\n    .palette-button:hover {\n    background-color: rgba(255, 255, 255, 0.15);\n    }\n    .palette-button.active {\n    background-color: rgba(0, 122, 255, 0.7);\n    }\n    .palette-button.disabled {\n    color: #666;\n    cursor: not-allowed;\n    }\n    .palette-separator {\n    width: 1px;\n    height: 24px;\n    background-color: rgba(255, 255, 255, 0.2);\n    }\n    .color-swatch {\n    width: 28px;\n    height: 28px;\n    border-radius: 50%;\n    border: 2px solid white;\n    box-shadow: 0 0 0 1px rgba(0,0,0,0.2);\n    }\n    .sub-palette {\n    display: none;\n    position: absolute;\n    bottom: calc(100% + 10px);\n    left: 50%;\n    transform: translateX(-50%);\n    background-color: rgba(80, 80, 80, 0.9);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border-radius: 10px;\n    padding: 10px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.4);\n    }\n    .sub-palette.visible {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    }\n    .thickness-option, .shape-option {\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    border: 2px solid transparent;\n    }\n    .thickness-option.active, .shape-option.active {\n    border-color: #007bff;\n    }\n    .thickness-option .dot {\n    background-color: #333;\n    border-radius: 50%;\n    }\n    .shape-option svg { color: #333; }\n    .color-grid {\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 8px;\n    }\n    .color-option {\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    cursor: pointer;\n    border: 2px solid transparent;\n    transition: transform 0.1s;\n    }\n    .color-option:hover {\n    transform: scale(1.1);\n    }\n    .color-option.active {\n    border-color: white;\n    }\n\n    @media (max-width: 480px) {\n    .tool-palette {\n    gap: 4px;\n    padding: 6px;\n    }\n    .palette-button {\n    width: 40px;\n    height: 40px;\n    }\n    }\n  </style>\n\n  <div id=\"toolbar\">\n    <div id=\"undoRedoButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-undo\" class=\"toolbar-button\" title=\"Undo\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"9 14 4 9 9 4\"></polyline><path d=\"M20 20v-7a4 4 0 0 0-4-4H4\"></path></svg>\n      </button>\n      <button id=\"textEditor-button-redo\" class=\"toolbar-button\" title=\"Redo\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 14 20 9 15 4\"></polyline><path d=\"M4 20v-7a4 4 0 0 1 4-4h12\"></path></svg>\n      </button>\n    </div>\n    <div id=\"styleButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-bold\" class=\"toolbar-button\" title=\"Bold\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-bold\">\n        <path d=\"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path>\n        <path d=\"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path>\n      </svg>\n      </button>\n      <button id=\"textEditor-button-italic\" class=\"toolbar-button\" title=\"Italic\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-italic\">\n        <line x1=\"19\" y1=\"4\" x2=\"10\" y2=\"4\"></line>\n        <line x1=\"14\" y1=\"20\" x2=\"5\" y2=\"20\"></line>\n        <line x1=\"15\" y1=\"4\" x2=\"9\" y2=\"20\"></line>\n      </svg>\n      </button>\n      <button id=\"textEditor-button-underline\" class=\"toolbar-button\" title=\"Underline\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-underline\">\n        <path d=\"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3\"></path>\n        <line x1=\"4\" y1=\"21\" x2=\"20\" y2=\"21\"></line>\n      </svg>\n      </button>\n    </div>\n    <div id=\"alignButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-alignLeft\" class=\"toolbar-button\" title=\"Align Left\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-align-left\">\n        <line x1=\"17\" y1=\"10\" x2=\"3\" y2=\"10\"></line>\n        <line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line>\n        <line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line>\n        <line x1=\"17\" y1=\"18\" x2=\"3\" y2=\"18\"></line>\n      </svg>\n      </button>\n      <button id=\"textEditor-button-alignCenter\" class=\"toolbar-button\" title=\"Align Center\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-align-center\">\n        <line x1=\"18\" y1=\"10\" x2=\"6\" y2=\"10\"></line>\n        <line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line>\n        <line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line>\n        <line x1=\"18\" y1=\"18\" x2=\"6\" y2=\"18\"></line>\n      </svg>\n      </button>\n      <button id=\"textEditor-button-alignRight\" class=\"toolbar-button\" title=\"Align Right\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-align-right\">\n        <line x1=\"21\" y1=\"10\" x2=\"7\" y2=\"10\"></line>\n        <line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line>\n        <line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line>\n        <line x1=\"21\" y1=\"18\" x2=\"7\" y2=\"18\"></line>\n      </svg>\n      </button>\n    </div>\n    <input type=\"file\" id=\"image-file-input\" accept=\"image/png,image/jpeg,image/gif\" style=\"display: none;\">\n    <button id=\"textEditor-button-insertImage\" class=\"toolbar-button\" title=\"Import Image\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-image\">\n        <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n        <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"></circle>\n        <polyline points=\"21 15 16 10 5 21\"></polyline>\n      </svg>\n    </button>\n    <span style=\"margin-left:auto;\"></span>\n    <button id=\"textEditor-button-copy\" class=\"toolbar-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-clipboard\">\n      <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path>\n      <rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect>\n    </svg>\n    </button>\n    <button id=\"textEditor-button-export\" class=\"toolbar-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-share\">\n      <path d=\"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8\"></path>\n      <polyline points=\"16 6 12 2 8 6\"></polyline>\n      <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"15\"></line>\n    </svg>\n    </button>\n  </div>\n  <div id=\"editor\" contenteditable=\"true\"></div>\n</div>\n\n<div id=\"image-editor-modal\" class=\"image-editor-modal\">\n  <div class=\"image-editor-content\" id=\"image-editor-content\">\n    <div class=\"editor-canvas-container\" id=\"canvas-container\">\n      <canvas id=\"base-canvas\"></canvas>\n      <canvas id=\"drawing-canvas\"></canvas>\n      <div id=\"temp-text-input-container\"></div>\n    </div>\n    <div class=\"tool-palette\">\n      <button id=\"cancel-edit-btn\" class=\"palette-button\" title=\"Cancel\">✕</button>\n      <button id=\"validate-edit-btn\" class=\"palette-button\" title=\"Done\" style=\"font-weight: bold; color: #34c759;\">✓</button>\n      <div class=\"palette-separator\"></div>\n\n      <button id=\"select-tool\" class=\"palette-button active\" title=\"Select & Move\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M3 3l7 18 2.5-7.5L21 9l-18-6z\"></path></svg>\n      </button>\n      <button id=\"pan-tool\" class=\"palette-button\" title=\"Pan\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 10V5a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v2M6 10V5a2 2 0 0 1 2-2h1a2 2 0 0 1 2 2v2m0 4v5a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-5m-8 0v5a2 2 0 0 1 2 2h1a2 2 0 0 1 2-2v-5\"></path><path d=\"M21 14h-5a2 2 0 0 0-2 2v0a2 2 0 0 0 2 2h5Z\"></path><path d=\"M3 14h5a2 2 0 0 1 2 2v0a2 2 0 0 1-2 2H3Z\"></path></svg>\n      </button>\n      <button id=\"pen-tool\" class=\"palette-button\" title=\"Pen\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"></path></svg>\n        <div id=\"pen-options\" class=\"sub-palette\"></div>\n      </button>\n      <button id=\"text-tool\" class=\"palette-button\" title=\"Text\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"4 7 4 4 20 4 20 7\"></polyline><line x1=\"9\" y1=\"20\" x2=\"15\" y2=\"20\"></line><line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"20\"></line></svg>\n      </button>\n      <button id=\"shape-tool\" class=\"palette-button\" title=\"Shapes\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"3\" y=\"3\" width=\"7\" height=\"7\"></rect><rect x=\"14\" y=\"3\" width=\"7\" height=\"7\"></rect><rect x=\"14\" y=\"14\" width=\"7\" height=\"7\"></rect><rect x=\"3\" y=\"14\" width=\"7\" height=\"7\"></rect></svg>\n        <div id=\"shape-options\" class=\"sub-palette\"></div>\n      </button>\n\n      <button id=\"color-picker-btn\" class=\"palette-button\" title=\"Color\">\n        <div id=\"color-swatch-display\" class=\"color-swatch\" style=\"background-color: #ff3b30;\"></div>\n        <div id=\"color-options\" class=\"sub-palette\"></div>\n      </button>\n      <div class=\"palette-separator\"></div>\n      <button id=\"undo-btn\" class=\"palette-button disabled\" title=\"Undo\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"9 14 4 9 9 4\"></polyline><path d=\"M20 20v-7a4 4 0 0 0-4-4H4\"></path></svg>\n      </button>\n      <button id=\"redo-btn\" class=\"palette-button disabled\" title=\"Redo\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 14 20 9 15 4\"></polyline><path d=\"M4 20v-7a4 4 0 0 1 4-4h12\"></path></svg>\n      </button>\n      <button id=\"clear-annotations-btn\" class=\"palette-button\" title=\"Clear All Annotations\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"3 6 5 6 21 6\"></polyline><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\n      </button>\n    </div>\n  </div>\n</div>\n\n<script>\n  if (!window.__editor_component_globals) {\n  window.__editor_component_globals = true;\n\n  const editorLogger = window.createLogger('ImageEditor');\n  const logger = window.createLogger('TextEditor');\n\n  let imageEditorState = {\n  baseCanvas: null, drawingCanvas: null, baseCtx: null, drawingCtx: null,\n  isDrawing: false, isPanning: false, isDragging: false, isResizing: false,\n  startPoint: null, lastPanPosition: { x: 0, y: 0 },\n  transform: { x: 0, y: 0, scale: 1 },\n  currentTool: 'select', currentShape: 'rect',\n  toolOptions: { color: '#ff3b30', thickness: 5, fontSize: 48 },\n  objects: [], selectedObject: null, resizeHandle: null,\n  undoStack: [], redoStack: [],\n  originalImageElement: null, originalRefId: null,\n  originalImage: null, scaleFactor: 1,\n  };\n\n  function uuidv4(){return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16)})}\n  window.getEditorContent=function(){return document.getElementById(\"editor\")?.innerHTML||\"\"};\n  window.setEditorContent=function(e){const t=document.getElementById(\"editor\");if(t)t.innerHTML=e&&!e.startsWith(\"<\")?`<div>${e.replace(/\\\\n/g,\"</div><div>\")}</div>`:e||\"\"};\n  window.applyAlignment=function(e){document.execCommand(\"justify\"+e.charAt(0).toUpperCase()+e.slice(1),!1,null)};\n  window.handleFileSelect=async function(e){const t=e.target.files[0];if(!t)return;const n=uuidv4(),o=Date.now();try{await window.ImageStaging.stageImage(n,t,o);const a=URL.createObjectURL(t),d=document.getElementById(\"editor\");d.focus();document.execCommand(\"insertHTML\",!1,`<img src=\\\"${a}\\\" data-ref-id=\\\"${n}\\\" style=\\\"max-width: 100%; height: auto;\\\" contenteditable=\\\"false\\\">`)}catch(r){logger.error(\"Failed to stage image:\",r),alert(\"Could not save image locally. Please try again.\")}finally{e.target.value=null}};\n  window.copyEditorContent=async function(){const e=document.getElementById(\"editor\");if(!e)return;const t=e.innerHTML,n=e.innerText||e.textContent;navigator.clipboard&&navigator.clipboard.write?await(async function(){try{await navigator.clipboard.write([new ClipboardItem({\"text/html\":new Blob([t],{type:\"text/html\"}),\"text/plain\":new Blob([n],{type:\"text/plain\"})})]),window.displayBanner&&window.displayBanner(\"Contenu formaté copié !\",\"success\")}catch(o){fallbackCopy(e)}})():fallbackCopy(e)};\n  function fallbackCopy(e){let t=!1;const n=function(o){o.preventDefault(),o.clipboardData.setData(\"text/html\",e.innerHTML),o.clipboardData.setData(\"text/plain\",e.innerText||e.textContent),t=!0};document.addEventListener(\"copy\",n);try{document.execCommand(\"copy\")}catch(o){t=!1}finally{document.removeEventListener(\"copy\",n)}t&&window.displayBanner?window.displayBanner(\"Contenu formaté copié !\",\"success\"):window.displayBanner&&window.displayBanner(\"Échec de la copie du contenu.\",\"error\")}\n  window.updateToolbarState=function(){const e={\"textEditor-button-bold\":\"bold\",\"textEditor-button-italic\":\"italic\",\"textEditor-button-underline\":\"underline\"};for(const[t,n]of Object.entries(e)){const o=document.getElementById(t);o&&o.classList.toggle(\"active\",document.queryCommandState(n))}};\n\n  function resetEditorState() {\n  Object.assign(imageEditorState, {\n  isDrawing: false, isPanning: false, isDragging: false, isResizing: false,\n  startPoint: null, objects: [], selectedObject: null, resizeHandle: null,\n  undoStack: [], redoStack: [], transform: { x: 0, y: 0, scale: 1 },\n  originalImage: null, scaleFactor: 1\n  });\n  updateUndoRedoButtons();\n  setActiveTool('select');\n  }\n\n  window.openImageEditor = async function(imgElement) {\n  Object.assign(imageEditorState, {\n  baseCanvas: document.getElementById('base-canvas'),\n  drawingCanvas: document.getElementById('drawing-canvas'),\n  baseCtx: document.getElementById('base-canvas').getContext('2d'),\n  drawingCtx: document.getElementById('drawing-canvas').getContext('2d'),\n  originalImageElement: imgElement,\n  originalRefId: imgElement.getAttribute('data-ref-id')\n  });\n  resetEditorState(); \n  const modal = document.getElementById('image-editor-modal');\n\n  try {\n  const blob = await window.ImageStaging.getStagedImageBlob(imageEditorState.originalRefId);\n  if (!blob) { editorLogger.error(\"Failed to get image blob from staging.\"); return; }\n  const image = new Image();\n  const imageUrl = URL.createObjectURL(blob);\n  image.onload = () => {\n  const MAX_PROXY_DIMENSION = 1920;\n  let proxyWidth = image.width, proxyHeight = image.height;\n  imageEditorState.originalImage = image;\n  if (proxyWidth > MAX_PROXY_DIMENSION || proxyHeight > MAX_PROXY_DIMENSION) {\n  imageEditorState.scaleFactor = (proxyWidth > proxyHeight) ? proxyWidth / MAX_PROXY_DIMENSION : proxyHeight / MAX_PROXY_DIMENSION;\n  proxyWidth = Math.round(image.width / imageEditorState.scaleFactor);\n  proxyHeight = Math.round(image.height / imageEditorState.scaleFactor);\n  }\n  [imageEditorState.baseCanvas, imageEditorState.drawingCanvas].forEach(c => { c.width = proxyWidth; c.height = proxyHeight; });\n  imageEditorState.baseCtx.drawImage(image, 0, 0, proxyWidth, proxyHeight);\n  modal.style.display = 'flex';\n  setTimeout(() => fitCanvasToView(), 0);\n  URL.revokeObjectURL(imageUrl);\n  };\n  image.src = imageUrl;\n  } catch (error) { editorLogger.error(\"Failed to load image into canvas:\", error); }\n  };\n\n  window.closeImageEditor = () => {\n  commitText();\n  document.getElementById('image-editor-modal').style.display = 'none';\n  resetEditorState();\n  };\n\n  function fitCanvasToView() {\n  const { baseCanvas } = imageEditorState;\n  const container = document.getElementById('canvas-container');\n  if (!container || !baseCanvas) return;\n  const scale = Math.min(container.clientWidth / baseCanvas.width, container.clientHeight / baseCanvas.height) * 0.95;\n  const newX = (container.clientWidth - (baseCanvas.width * scale)) / 2;\n  const newY = (container.clientHeight - (baseCanvas.height * scale)) / 2;\n  applyCanvasTransforms(newX, newY, scale);\n  }\n\n  function applyCanvasTransforms(x, y, scale) {\n  Object.assign(imageEditorState.transform, { x, y, scale });\n  const canvasTransform = `translate(${x}px, ${y}px) scale(${scale})`;\n  [imageEditorState.baseCanvas, imageEditorState.drawingCanvas, document.getElementById('temp-text-input-container')].forEach(el => {if(el) el.style.transform = canvasTransform});\n  redrawAll();\n  }\n\n  function getEventCoordinates(e) {\n  const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n  const clientY = e.touches ? e.touches[0].clientY : e.clientY;\n  return { x: clientX, y: clientY };\n  }\n\n  function worldCoordinates(coords) {\n  const { transform, drawingCanvas } = imageEditorState;\n  const rect = drawingCanvas.getBoundingClientRect();\n  return {\n  x: (coords.x - rect.left) / transform.scale,\n  y: (coords.y - rect.top) / transform.scale\n  };\n  }\n\n  function redrawAll() {\n  const { drawingCanvas, drawingCtx, objects, selectedObject } = imageEditorState;\n  if (!drawingCanvas) return;\n  drawingCtx.setTransform(1, 0, 0, 1, 0, 0);\n  drawingCtx.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);\n\n  objects.forEach(obj => drawObject(drawingCtx, obj));\n\n  if (selectedObject) {\n  drawSelectionHandles(drawingCtx, selectedObject);\n  }\n  }\n\n  function drawObject(ctx, obj) {\n  ctx.save();\n  ctx.strokeStyle = obj.color;\n  ctx.lineWidth = obj.thickness;\n  ctx.fillStyle = obj.color;\n  ctx.lineCap = 'round';\n  ctx.lineJoin = 'round';\n\n  switch (obj.type) {\n  case 'pen':\n  ctx.beginPath();\n  if (obj.points && obj.points.length > 0) {\n  ctx.moveTo(obj.points[0].x, obj.points[0].y);\n  obj.points.slice(1).forEach(p => ctx.lineTo(p.x, p.y));\n  }\n  ctx.stroke();\n  break;\n  case 'rect':\n  ctx.strokeRect(obj.x, obj.y, obj.width, obj.height);\n  break;\n  case 'ellipse':\n  ctx.beginPath();\n  ctx.ellipse(obj.x + obj.width / 2, obj.y + obj.height / 2, Math.abs(obj.width / 2), Math.abs(obj.height / 2), 0, 0, 2 * Math.PI);\n  ctx.stroke();\n  break;\n  case 'arrow':\n  drawArrow(ctx, obj.x, obj.y, obj.x + obj.width, obj.y + obj.height, obj.thickness);\n  break;\n  case 'text':\n  ctx.font = `${obj.fontSize}px Arial`;\n  ctx.textBaseline = 'top';\n  ctx.fillText(obj.text, obj.x, obj.y);\n  break;\n  }\n  ctx.restore();\n  }\n\n  function drawArrow(ctx, fromX, fromY, toX, toY, thickness) {\n  const headlen = Math.max(10, thickness * 3);\n  const dx = toX - fromX;\n  const dy = toY - fromY;\n  const angle = Math.atan2(dy, dx);\n  ctx.beginPath();\n  ctx.moveTo(fromX, fromY);\n  ctx.lineTo(toX, toY);\n  ctx.stroke();\n  ctx.beginPath();\n  ctx.moveTo(toX, toY);\n  ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));\n  ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));\n  ctx.closePath();\n  ctx.fill();\n  }\n\n  function drawSelectionHandles(ctx, obj) {\n  const bounds = getObjectBounds(obj);\n  if (!bounds) return;\n  const handleSize = 8 / imageEditorState.transform.scale;\n  ctx.strokeStyle = '#007aff';\n  ctx.lineWidth = 1 / imageEditorState.transform.scale;\n  ctx.setLineDash([4 / imageEditorState.transform.scale, 2 / imageEditorState.transform.scale]);\n  ctx.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height);\n  ctx.setLineDash([]);\n  ctx.fillStyle = '#fff';\n\n  getResizeHandles(bounds).forEach(handle => {\n  ctx.fillRect(handle.x - handleSize / 2, handle.y - handleSize / 2, handleSize, handleSize);\n  ctx.strokeRect(handle.x - handleSize / 2, handle.y - handleSize / 2, handleSize, handleSize);\n  });\n  }\n\n  function getObjectBounds(obj) {\n  switch (obj.type) {\n  case 'pen':\n  if (!obj.points || obj.points.length === 0) return null;\n  const minX = Math.min(...obj.points.map(p => p.x));\n  const minY = Math.min(...obj.points.map(p => p.y));\n  const maxX = Math.max(...obj.points.map(p => p.x));\n  const maxY = Math.max(...obj.points.map(p => p.y));\n  return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\n  case 'rect':\n  case 'ellipse':\n  case 'arrow':\n  return {\n  x: Math.min(obj.x, obj.x + obj.width),\n  y: Math.min(obj.y, obj.y + obj.height),\n  width: Math.abs(obj.width),\n  height: Math.abs(obj.height)\n  };\n  case 'text':\n  return { x: obj.x, y: obj.y, width: obj.width, height: obj.height };\n  }\n  return null;\n  }\n\n  function getResizeHandles(bounds) {\n  return [\n  { x: bounds.x, y: bounds.y, type: 'tl' },\n  { x: bounds.x + bounds.width, y: bounds.y, type: 'tr' },\n  { x: bounds.x, y: bounds.y + bounds.height, type: 'bl' },\n  { x: bounds.x + bounds.width, y: bounds.y + bounds.height, type: 'br' },\n  ];\n  }\n\n  function getHandleAtPoint(pos) {\n  if (!imageEditorState.selectedObject) return null;\n  const bounds = getObjectBounds(imageEditorState.selectedObject);\n  if (!bounds) return null;\n  const handleSize = 8 / imageEditorState.transform.scale;\n  return getResizeHandles(bounds).find(h => \n  pos.x >= h.x - handleSize / 2 && pos.x <= h.x + handleSize / 2 &&\n  pos.y >= h.y - handleSize / 2 && pos.y <= h.y + handleSize / 2\n  );\n  }\n\n  function getObjectAtPoint(pos) {\n  for (let i = imageEditorState.objects.length - 1; i >= 0; i--) {\n  const obj = imageEditorState.objects[i];\n  const bounds = getObjectBounds(obj);\n  if (bounds && pos.x >= bounds.x && pos.x <= bounds.x + bounds.width && pos.y >= bounds.y && pos.y <= bounds.y + bounds.height) {\n  return obj;\n  }\n  }\n  return null;\n  }\n\n  function moveObject(obj, dx, dy) {\n  if (obj.type === 'pen') {\n  obj.points.forEach(p => { p.x += dx; p.y += dy; });\n  } else {\n  obj.x += dx;\n  obj.y += dy;\n  }\n  }\n\n  function resizeObject(obj, pos, handle) {\n  const bounds = getObjectBounds(obj);\n  if (!bounds) return;\n  const originalWidth = bounds.width;\n\n  let newX = obj.x, newY = obj.y, newWidth = obj.width, newHeight = obj.height;\n\n  switch (handle) {\n  case 'tl':\n  newWidth = bounds.x + bounds.width - pos.x;\n  newHeight = bounds.y + bounds.height - pos.y;\n  newX = pos.x;\n  newY = pos.y;\n  break;\n  case 'tr':\n  newWidth = pos.x - bounds.x;\n  newHeight = bounds.y + bounds.height - pos.y;\n  newY = pos.y;\n  break;\n  case 'bl':\n  newWidth = bounds.x + bounds.width - pos.x;\n  newHeight = pos.y - bounds.y;\n  newX = pos.x;\n  break;\n  case 'br':\n  newWidth = pos.x - bounds.x;\n  newHeight = pos.y - bounds.y;\n  break;\n  }\n\n  obj.x = newX;\n  obj.y = newY;\n  obj.width = newWidth;\n  obj.height = newHeight;\n\n  if (obj.type === 'text') {\n  const scaleRatio = Math.abs(newWidth) / originalWidth;\n  obj.fontSize *= scaleRatio;\n  obj.height = obj.fontSize;\n  const ctx = imageEditorState.drawingCtx;\n  ctx.font = `${obj.fontSize}px Arial`;\n  obj.width = ctx.measureText(obj.text).width;\n  }\n  }\n\n  function startInteraction(e) {\n  e.preventDefault();\n  commitText();\n  const pos = worldCoordinates(getEventCoordinates(e));\n  imageEditorState.startPoint = pos;\n\n  const doubleClickTime = 300;\n  const now = Date.now();\n  if (imageEditorState.lastClick && now - imageEditorState.lastClick < doubleClickTime) {\n  handleDoubleClick(pos);\n  imageEditorState.lastClick = null;\n  return;\n  }\n  imageEditorState.lastClick = now;\n\n  if (imageEditorState.currentTool === 'pan') {\n  imageEditorState.isPanning = true;\n  imageEditorState.lastPanPosition = getEventCoordinates(e);\n  imageEditorState.drawingCanvas.style.cursor = 'grabbing';\n  return;\n  }\n\n  if (imageEditorState.currentTool === 'select') {\n  const handle = getHandleAtPoint(pos);\n  const object = getObjectAtPoint(pos);\n  if (handle && imageEditorState.selectedObject) {\n  saveStateForUndo();\n  imageEditorState.isResizing = true;\n  imageEditorState.resizeHandle = handle.type;\n  } else if (object) {\n  saveStateForUndo();\n  imageEditorState.isDragging = true;\n  imageEditorState.selectedObject = object;\n  } else {\n  imageEditorState.selectedObject = null;\n  }\n  redrawAll();\n  return;\n  }\n\n  imageEditorState.isDrawing = true;\n  saveStateForUndo();\n  let newObject;\n  switch (imageEditorState.currentTool) {\n  case 'pen':\n  newObject = { type: 'pen', points: [pos], ...imageEditorState.toolOptions };\n  break;\n  case 'shape':\n  newObject = { type: imageEditorState.currentShape, x: pos.x, y: pos.y, width: 0, height: 0, ...imageEditorState.toolOptions };\n  break;\n  case 'text':\n  handleTextToolClick(pos);\n  imageEditorState.isDrawing = false;\n  break;\n  }\n  if (newObject) {\n  imageEditorState.objects.push(newObject);\n  imageEditorState.selectedObject = (imageEditorState.currentTool !== 'pen') ? newObject : null;\n  }\n  redrawAll();\n  }\n\n  function moveInteraction(e) {\n  if (!imageEditorState.isDrawing && !imageEditorState.isPanning && !imageEditorState.isDragging && !imageEditorState.isResizing) return;\n  e.preventDefault();\n  const pos = worldCoordinates(getEventCoordinates(e));\n\n  if (imageEditorState.isPanning) {\n  const currentPanPos = getEventCoordinates(e);\n  const dx = currentPanPos.x - imageEditorState.lastPanPosition.x;\n  const dy = currentPanPos.y - imageEditorState.lastPanPosition.y;\n  applyCanvasTransforms(imageEditorState.transform.x + dx, imageEditorState.transform.y + dy, imageEditorState.transform.scale);\n  imageEditorState.lastPanPosition = currentPanPos;\n  return;\n  }\n\n  if (imageEditorState.isDragging && imageEditorState.selectedObject) {\n  const dx = pos.x - imageEditorState.startPoint.x;\n  const dy = pos.y - imageEditorState.startPoint.y;\n  moveObject(imageEditorState.selectedObject, dx, dy);\n  imageEditorState.startPoint = pos;\n  redrawAll();\n  return;\n  }\n\n  if (imageEditorState.isResizing && imageEditorState.selectedObject) {\n  resizeObject(imageEditorState.selectedObject, pos, imageEditorState.resizeHandle);\n  redrawAll();\n  return;\n  }\n\n  if (imageEditorState.isDrawing) {\n  const currentObject = imageEditorState.objects[imageEditorState.objects.length - 1];\n  if (!currentObject) return;\n  switch (currentObject.type) {\n  case 'pen':\n  currentObject.points.push(pos);\n  break;\n  case 'rect':\n  case 'ellipse':\n  case 'arrow':\n  currentObject.width = pos.x - currentObject.x;\n  currentObject.height = pos.y - currentObject.y;\n  break;\n  }\n  redrawAll();\n  }\n  }\n\n  function endInteraction(e) {\n  if (imageEditorState.isDrawing && imageEditorState.currentTool !== 'text') {\n  const currentObject = imageEditorState.objects[imageEditorState.objects.length - 1];\n  if (currentObject && currentObject.type !== 'pen') {\n  if (Math.abs(currentObject.width) < 5 || Math.abs(currentObject.height) < 5) {\n  imageEditorState.objects.pop();\n  }\n  }\n  }\n  imageEditorState.isDrawing = false;\n  imageEditorState.isPanning = false;\n  imageEditorState.isDragging = false;\n  imageEditorState.isResizing = false;\n  imageEditorState.startPoint = null;\n  setActiveTool(imageEditorState.currentTool); // Resets cursor\n  redrawAll();\n  }\n\n  function handleDoubleClick(pos) {\n  const object = getObjectAtPoint(pos);\n  if (object && object.type === 'text') {\n  saveStateForUndo();\n  // Temporarily remove object for editing\n  imageEditorState.objects = imageEditorState.objects.filter(obj => obj !== object);\n  imageEditorState.selectedObject = null;\n  redrawAll();\n  handleTextToolClick(pos, object);\n  }\n  }\n\n  function handleTextToolClick(pos, existingObject = null) {\n  commitText();\n  const container = document.getElementById('temp-text-input-container');\n  const input = document.createElement('div');\n  input.id = 'temp-text-input';\n  input.contentEditable = true;\n\n  if (existingObject) {\n  input.textContent = existingObject.text;\n  input.style.left = `${existingObject.x}px`;\n  input.style.top = `${existingObject.y}px`;\n  input.style.fontSize = `${existingObject.fontSize}px`;\n  input.style.color = existingObject.color;\n  input.dataset.editingId = imageEditorState.objects.indexOf(existingObject);\n  } else {\n  input.style.left = `${pos.x}px`;\n  input.style.top = `${pos.y}px`;\n  input.style.color = imageEditorState.toolOptions.color;\n  input.style.fontSize = `${imageEditorState.toolOptions.fontSize}px`;\n  }\n\n  container.appendChild(input);\n  input.focus();\n  document.execCommand('selectAll', false, null);\n\n  const onBlur = () => commitText(existingObject);\n  input.addEventListener('blur', onBlur);\n  input.addEventListener('keydown', (e) => {\n  if (e.key === 'Enter' && !e.shiftKey) {\n  e.preventDefault();\n  input.removeEventListener('blur', onBlur);\n  commitText(existingObject);\n  }\n  });\n  }\n\n  function commitText(editingObject = null) {\n  const input = document.getElementById('temp-text-input');\n  if (!input) return;\n\n  const text = input.textContent;\n  if (text.trim()) {\n  if (!editingObject) saveStateForUndo(); // Only save new objects, edits save state before calling\n  const newObject = editingObject || { type: 'text' };\n  Object.assign(newObject, {\n  text,\n  x: parseFloat(input.style.left),\n  y: parseFloat(input.style.top),\n  fontSize: parseFloat(input.style.fontSize),\n  color: input.style.color,\n  fontFamily: 'Arial',\n  });\n  const ctx = imageEditorState.drawingCtx;\n  ctx.font = `${newObject.fontSize}px Arial`;\n  const metrics = ctx.measureText(text);\n  newObject.width = metrics.width;\n  newObject.height = newObject.fontSize;\n  if (!editingObject) imageEditorState.objects.push(newObject);\n  imageEditorState.selectedObject = newObject;\n  }\n  input.remove();\n  redrawAll();\n  }\n\n  function handleWheelZoom(e) {\n  e.preventDefault();\n  const { transform } = imageEditorState;\n  const container = document.getElementById('canvas-container'); if (!container) return;\n  const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;\n  const newScale = Math.max(0.1, Math.min(transform.scale * zoomFactor, 10));\n  const rect = container.getBoundingClientRect();\n  const mouseX = e.clientX - rect.left, mouseY = e.clientY - rect.top;\n  const newX = mouseX - (mouseX - transform.x) * (newScale / transform.scale);\n  const newY = mouseY - (mouseY - transform.y) * (newScale / transform.scale);\n  applyCanvasTransforms(newX, newY, newScale);\n  }\n\n  function saveStateForUndo() {\n  imageEditorState.redoStack = [];\n  imageEditorState.undoStack.push(JSON.parse(JSON.stringify(imageEditorState.objects)));\n  updateUndoRedoButtons();\n  }\n\n  function undo() {\n  if (imageEditorState.undoStack.length > 0) {\n  imageEditorState.redoStack.push(JSON.parse(JSON.stringify(imageEditorState.objects)));\n  imageEditorState.objects = imageEditorState.undoStack.pop();\n  imageEditorState.selectedObject = null;\n  redrawAll();\n  updateUndoRedoButtons();\n        }\n    }\n    \n    function redo() {\n        if (imageEditorState.redoStack.length > 0) {\n            imageEditorState.undoStack.push(JSON.parse(JSON.stringify(imageEditorState.objects)));\n            imageEditorState.objects = imageEditorState.redoStack.pop();\n            imageEditorState.selectedObject = null;\n            redrawAll();\n            updateUndoRedoButtons();\n        }\n    }\n\n    function updateUndoRedoButtons() {\n        document.getElementById('undo-btn').classList.toggle('disabled', imageEditorState.undoStack.length === 0);\n        document.getElementById('redo-btn').classList.toggle('disabled', imageEditorState.redoStack.length === 0);\n    }\n\n    function buildSubPalettes() {\n        const penOptions = document.getElementById('pen-options');\n        penOptions.innerHTML = '';\n        [2, 5, 10].forEach(t => {\n            const option = document.createElement('div');\n            option.className = 'thickness-option';\n            option.dataset.thickness = t;\n            option.innerHTML = `<div class=\"dot\" style=\"width:${t*2}px; height:${t*2}px;\"></div>`;\n            option.onclick = () => { imageEditorState.toolOptions.thickness = t; updateToolOptions(); };\n            penOptions.appendChild(option);\n        });\n\n        const shapeOptions = document.getElementById('shape-options');\n        shapeOptions.innerHTML = '';\n        const shapes = [\n            { name: 'rect', svg: '<svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect></svg>' },\n            { name: 'ellipse', svg: '<svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle></svg>' },\n            { name: 'arrow', svg: '<svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line><polyline points=\"12 5 19 12 12 19\"></polyline></svg>' }\n        ];\n        shapes.forEach(s => {\n            const option = document.createElement('div');\n            option.className = 'shape-option';\n            option.dataset.shape = s.name;\n            option.innerHTML = s.svg;\n            option.onclick = () => { imageEditorState.currentShape = s.name; updateToolOptions(); };\n            shapeOptions.appendChild(option);\n        });\n\n        const colorOptions = document.getElementById('color-options');\n        colorOptions.innerHTML = '<div class=\"color-grid\"></div>';\n        const colorGrid = colorOptions.querySelector('.color-grid');\n        ['#ff3b30', '#ff9500', '#ffcc00', '#34c759', '#007aff', '#5856d6', '#ff2d55', '#af52de', '#ffffff', '#000000'].forEach(c => {\n            const option = document.createElement('div');\n            option.className = 'color-option';\n            option.style.backgroundColor = c;\n            option.dataset.color = c;\n            option.onclick = () => { imageEditorState.toolOptions.color = c; updateToolOptions(); };\n            colorGrid.appendChild(option);\n        });\n        updateToolOptions();\n    }\n    \n    function updateToolOptions() {\n        document.querySelectorAll('.thickness-option').forEach(o => o.classList.toggle('active', parseInt(o.dataset.thickness) === imageEditorState.toolOptions.thickness));\n        document.querySelectorAll('.shape-option').forEach(o => o.classList.toggle('active', o.dataset.shape === imageEditorState.currentShape));\n        document.querySelectorAll('.color-option').forEach(o => o.classList.toggle('active', o.dataset.color === imageEditorState.toolOptions.color));\n        document.getElementById('color-swatch-display').style.backgroundColor = imageEditorState.toolOptions.color;\n        \n        if (imageEditorState.selectedObject) {\n            saveStateForUndo();\n            imageEditorState.selectedObject.color = imageEditorState.toolOptions.color;\n            if ('thickness' in imageEditorState.selectedObject) {\n                imageEditorState.selectedObject.thickness = imageEditorState.toolOptions.thickness;\n            }\n            redrawAll();\n        }\n    }\n    \n    function setActiveTool(toolName) {\n        if (imageEditorState.drawingCanvas) {\n            imageEditorState.drawingCanvas.style.cursor = toolName === 'pan' ? 'grab' : (toolName === 'select' ? 'default' : 'crosshair');\n        }\n        imageEditorState.currentTool = toolName;\n        document.querySelectorAll('.tool-palette .palette-button').forEach(btn => btn.classList.remove('active'));\n        const toolButton = document.getElementById(`${toolName}-tool`);\n        if (toolButton) {\n            toolButton.classList.add('active');\n        }\n        document.querySelectorAll('.sub-palette').forEach(p => p.classList.remove('visible'));\n    }\n\n    window.initializeEditor = function(retryCount = 0) {\n        if (retryCount > 20) { logger.error(\"Fatal Error: #editor element not found.\"); return; }\n        const editorDiv = document.getElementById('editor');\n        if (!editorDiv) { setTimeout(() => window.initializeEditor(retryCount + 1), 50); return; }\n        \n        const addButtonListener = (id, handler) => { const btn = document.getElementById(id); if(btn) { const newBtn = btn.cloneNode(true); btn.parentNode.replaceChild(newBtn, btn); newBtn.addEventListener('click', (e) => { e.preventDefault(); if (!newBtn.disabled) handler(e); }); } };\n        addButtonListener('textEditor-button-undo', () => anvil.call(editorDiv.closest('.anvil-container'), 'undo_change'));\n        addButtonListener('textEditor-button-redo', () => anvil.call(editorDiv.closest('.anvil-container'), 'redo_change'));\n        addButtonListener('textEditor-button-bold', () => { document.execCommand('bold', false, null); updateToolbarState(); });\n        addButtonListener('textEditor-button-italic', () => { document.execCommand('italic', false, null); updateToolbarState(); });\n        addButtonListener('textEditor-button-underline', () => { document.execCommand('underline', false, null); updateToolbarState(); });\n        addButtonListener('textEditor-button-alignLeft', () => applyAlignment('left'));\n        addButtonListener('textEditor-button-alignCenter', () => applyAlignment('center'));\n        addButtonListener('textEditor-button-alignRight', () => applyAlignment('right'));\n        addButtonListener('textEditor-button-copy', window.copyEditorContent);\n        addButtonListener('textEditor-button-export', () => anvil.call(editorDiv.closest('.anvil-container'), 'export_content'));\n        const imageFileInput = document.getElementById('image-file-input');\n        if (imageFileInput) { const newFileInput = imageFileInput.cloneNode(true); imageFileInput.parentNode.replaceChild(newFileInput, imageFileInput); newFileInput.addEventListener('change', window.handleFileSelect); }\n        addButtonListener('textEditor-button-insertImage', () => document.getElementById('image-file-input')?.click());\n        \n        editorDiv.addEventListener('mouseup', updateToolbarState);\n        editorDiv.addEventListener('keyup', updateToolbarState);\n        editorDiv.addEventListener('focus', updateToolbarState);\n        editorDiv.addEventListener('blur', () => anvil.call(editorDiv.closest('.anvil-container'), 'on_blur_handler'));\n        editorDiv.addEventListener('click', (event) => { if (event.target.tagName === 'IMG' && event.target.hasAttribute('data-ref-id')) window.openImageEditor(event.target); });\n\n        buildSubPalettes();\n        const canvasContainer = document.getElementById('canvas-container');\n        const drawingCanvas = document.getElementById('drawing-canvas');\n        \n        const reattachModalListener = (id, event, handler) => {\n            const element = document.getElementById(id);\n            if (element) {\n                const newElement = element.cloneNode(true);\n                element.parentNode.replaceChild(newElement, element);\n                newElement.addEventListener(event, handler);\n            }\n        };\n\n        if (drawingCanvas) {\n            drawingCanvas.addEventListener('mousedown', startInteraction); \n            drawingCanvas.addEventListener('mousemove', moveInteraction); \n            drawingCanvas.addEventListener('mouseup', endInteraction); \n            drawingCanvas.addEventListener('mouseleave', endInteraction);\n            drawingCanvas.addEventListener('touchstart', startInteraction, { passive: false }); \n            drawingCanvas.addEventListener('touchmove', moveInteraction, { passive: false }); \n            drawingCanvas.addEventListener('touchend', endInteraction);\n        }\n        if (canvasContainer) {\n            canvasContainer.addEventListener('wheel', handleWheelZoom, { passive: false });\n        }\n\n        reattachModalListener('select-tool', 'click', () => setActiveTool('select'));\n        reattachModalListener('pan-tool', 'click', () => setActiveTool('pan'));\n        reattachModalListener('pen-tool', 'click', (e) => { setActiveTool('pen'); document.getElementById('pen-options').classList.toggle('visible'); e.stopPropagation(); });\n        reattachModalListener('text-tool', 'click', () => setActiveTool('text'));\n        reattachModalListener('shape-tool', 'click', (e) => { setActiveTool('shape'); document.getElementById('shape-options').classList.toggle('visible'); e.stopPropagation(); });\n        reattachModalListener('color-picker-btn', 'click', (e) => { document.getElementById('color-options').classList.toggle('visible'); document.querySelectorAll('.sub-palette:not(#color-options)').forEach(p=>p.classList.remove('visible')); e.stopPropagation(); });\n        reattachModalListener('undo-btn', 'click', undo);\n        reattachModalListener('redo-btn', 'click', redo);\n        reattachModalListener('clear-annotations-btn', 'click', () => { if(confirm(\"Clear all drawings from this image?\")) { saveStateForUndo(); imageEditorState.objects = []; imageEditorState.selectedObject = null; redrawAll(); } });\n        reattachModalListener('cancel-edit-btn', 'click', window.closeImageEditor);\n        \n        reattachModalListener('validate-edit-btn', 'click', () => {\n            commitText();\n            const { originalImage, objects, scaleFactor } = imageEditorState;\n            if (!originalImage) { editorLogger.error(\"Cannot save, original image not found.\"); return; }\n            const mergeCanvas = document.createElement('canvas');\n            mergeCanvas.width = originalImage.width; mergeCanvas.height = originalImage.height;\n            const mergeCtx = mergeCanvas.getContext('2d');\n            mergeCtx.drawImage(originalImage, 0, 0);\n\n            objects.forEach(obj => {\n                const scaledObj = JSON.parse(JSON.stringify(obj));\n                if (scaledObj.type === 'pen') {\n                    scaledObj.points.forEach(p => { p.x *= scaleFactor; p.y *= scaleFactor; });\n                } else {\n                    scaledObj.x *= scaleFactor;\n                    scaledObj.y *= scaleFactor;\n                    scaledObj.width *= scaleFactor;\n                    scaledObj.height *= scaleFactor;\n                }\n                if (scaledObj.fontSize) scaledObj.fontSize *= scaleFactor;\n                scaledObj.thickness *= scaleFactor;\n                drawObject(mergeCtx, scaledObj);\n            });\n\n            mergeCanvas.toBlob(async (blob) => {\n              await window.ImageStaging.stageImage(imageEditorState.originalRefId, blob, Date.now());\n              const newUrl = URL.createObjectURL(blob);\n              const oldUrl = imageEditorState.originalImageElement.src;\n              imageEditorState.originalImageElement.src = newUrl;\n              if (oldUrl && oldUrl.startsWith('blob:')) URL.revokeObjectURL(oldUrl);\n              window.closeImageEditor();\n            }, 'image/png');\n        });\n\n        document.body.addEventListener('click', (e) => { \n            if (!e.target.closest('.palette-button')) { \n                document.querySelectorAll('.sub-palette').forEach(p => p.classList.remove('visible'));\n            } \n        });\n    };\n  }\n</script>"
    visible: true
  type: HtmlTemplate
custom_component: true
is_package: true
properties:
- {default_binding_prop: true, default_value: true, important: true, name: show_image_button, type: boolean}
- {default_value: true, important: true, name: show_style_buttons, type: boolean}
- {default_value: true, important: true, name: show_copy_button, type: boolean}
- {default_value: true, important: true, name: show_align_buttons, type: boolean}
- {default_value: false, important: true, name: show_undo_redo_buttons, type: boolean}
- {default_value: '', important: true, name: show_export_button, type: string}
