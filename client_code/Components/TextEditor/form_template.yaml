components: []
container:
  properties:
    html: |-
      <div class="editor-section">
        <style>
          .editor-section { background: #fff; border-radius: 8px; overflow: hidden; border: 1px solid #ddd; }
          #toolbar { padding: 10px; background: #f8f8f8; border-bottom: 1px solid #ddd; display: flex; flex-wrap: wrap; gap: 5px; align-items: center; }
          .toolbar-button { padding: 6px 12px; border: 1px solid #ddd; border-radius: 4px; background: #fff; cursor: pointer; }
          .toolbar-button:hover { background: #f5f5f5; }
          .toolbar-button.active { background-color: #d0ebff; border-color: #66b0ff; box-shadow: inset 0 2px 4px rgba(0,0,0,0.1); }
          .toolbar-button svg { vertical-align: middle; }
          #editor { min-height: 300px; padding: 20px; overflow-y: auto; font-size: 16px; line-height: 1.5; }
          #editor p, #editor div { margin: 0; }
          .toolbar-group { display: inline-flex; gap: 5px; }
          .toolbar-button.disabled { background-color: #cccccc; color: #666666; cursor: not-allowed; pointer-events: none; border-color: #bbbbbb; }
          .toolbar-button.disabled:hover { background-color: #cccccc; border-color: #bbbbbb; }
        </style>

        <div id="toolbar">
          <div id="undoRedoButtons" class="toolbar-group">
            <button id="textEditor-button-undo" class="toolbar-button" title="Undo">↩️</button>
            <button id="textEditor-button-redo" class="toolbar-button" title="Redo">↪️</button>
          </div>
          <div id="styleButtons" class="toolbar-group">
            <button id="textEditor-button-bold" class="toolbar-button" title="Bold"><b>B</b></button>
            <button id="textEditor-button-italic" class="toolbar-button" title="Italic"><i>I</i></button>
            <button id="textEditor-button-underline" class="toolbar-button" title="Underline"><u>U</u></button>
          </div>
          <div id="alignButtons" class="toolbar-group">
            <button id="textEditor-button-alignLeft" class="toolbar-button" title="Align Left"><svg width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M1 3h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm0 4h10a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm0 4h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2z"/></svg></button>
            <button id="textEditor-button-alignCenter" class="toolbar-button" title="Align Center"><svg width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M3 3h10a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2zm-2 4h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm2 4h10a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2z"/></svg></button>
            <button id="textEditor-button-alignRight" class="toolbar-button" title="Align Right"><svg width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M5 3h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2zM1 7h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm4 4h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2z"/></svg></button>
          </div>
          <button id="textEditor-button-insertImage" class="toolbar-button disabled">Image</button>
          <span style="margin-left:auto;"></span>
          <button id="textEditor-button-copy" class="toolbar-button">Copy</button>
        </div>
        <div id="editor" contenteditable="true"></div>
      </div>

      <script>
        if (!window.__editor_component_globals) {
          window.__editor_component_globals = true;

          const logger = window.createLogger('TextEditor');

          window.getEditorContent = function() {
            const editor = document.getElementById("editor");
            return editor ? editor.innerHTML : "";
          };

          window.setEditorContent = function(value) {
            const editor = document.getElementById("editor");
            if (editor) {
              if (value && !value.startsWith('<')) {
                editor.innerHTML = `<div>${value.replace(/\\n/g, '</div><div>')}</div>`;
              } else {
                editor.innerHTML = value || "";
              }
            }
          };

          window.applyAlignment = function(align) {
            document.execCommand('justify' + align.charAt(0).toUpperCase() + align.slice(1), false, null);
          };

          window.copyEditorContent = function() {
            const editor = document.getElementById("editor");
            if (!editor) return;

            navigator.clipboard.writeText(editor.innerText || editor.textContent).then(() => {
              if (window.displayBanner) {
                window.displayBanner("Content copied!", "success");
              }
            }).catch(err => {
              logger.error("Error copying content: ", err);
              if (window.displayBanner) {
                window.displayBanner("Failed to copy content.", "error");
              }
            });
          };

          window.updateToolbarState = function() {
            const simpleCommands = {
              'textEditor-button-bold': 'bold',
              'textEditor-button-italic': 'italic',
              'textEditor-button-underline': 'underline'
            };
            for (const [buttonId, command] of Object.entries(simpleCommands)) {
              const button = document.getElementById(buttonId);
              if (button) {
                try {
                  button.classList.toggle('active', document.queryCommandState(command));
                } catch (e) { /* Fails in some edge cases, ignore */ }
              }
            }
          };

          window.initializeEditor = function(retryCount = 0) {
            logger.log("Initializing editor and attaching listeners.");
            const editorDiv = document.getElementById('editor');
            if (!editorDiv) {
              if (retryCount < 20) {
                setTimeout(() => window.initializeEditor(retryCount + 1), 50);
              } else {
                logger.error("Fatal Error: #editor element not found after multiple retries.");
              }
              return;
            }

            const addButtonListener = (buttonId, handler) => {
              const button = document.getElementById(buttonId);
              if (button) {
                const newButton = button.cloneNode(true);
                button.parentNode.replaceChild(newButton, button);
                newButton.addEventListener('mousedown', (event) => {
                  event.preventDefault();
                  if (!newButton.disabled) { handler(); }
                });
              } else {
                logger.warn(`Button #${buttonId} not found.`);
              }
            };

            addButtonListener('textEditor-button-undo', () => anvil.call(editorDiv.closest('.anvil-container'), 'undo_change'));
            addButtonListener('textEditor-button-redo', () => anvil.call(editorDiv.closest('.anvil-container'), 'redo_change'));
            addButtonListener('textEditor-button-bold', () => { document.execCommand('bold', false, null); window.updateToolbarState(); });
            addButtonListener('textEditor-button-italic', () => { document.execCommand('italic', false, null); window.updateToolbarState(); });
            addButtonListener('textEditor-button-underline', () => { document.execCommand('underline', false, null); window.updateToolbarState(); });
            addButtonListener('textEditor-button-alignLeft', () => { window.applyAlignment('left'); window.updateToolbarState(); });
            addButtonListener('textEditor-button-alignCenter', () => { window.applyAlignment('center'); window.updateToolbarState(); });
            addButtonListener('textEditor-button-alignRight', () => { window.applyAlignment('right'); window.updateToolbarState(); });
            addButtonListener('textEditor-button-copy', window.copyEditorContent);

            if (!editorDiv.dataset.stateListenersAttached) {
              editorDiv.dataset.stateListenersAttached = 'true';
              editorDiv.addEventListener('mouseup', window.updateToolbarState);
              editorDiv.addEventListener('keyup', window.updateToolbarState);
              editorDiv.addEventListener('focus', window.updateToolbarState);
            }

            if (!editorDiv.dataset.blurAttached) {
              editorDiv.dataset.blurAttached = 'true';
              editorDiv.addEventListener('blur', () => {
                anvil.call(editorDiv.closest('.anvil-container'), 'on_blur_handler');
              });
            }
          };
        }
      </script>
  type: HtmlTemplate
custom_component: true
is_package: true
properties:
- {default_binding_prop: true, default_value: true, important: true, name: show_image_button, type: boolean}
- {default_value: true, important: true, name: show_style_buttons, type: boolean}
- {default_value: true, important: true, name: show_copy_button, type: boolean}
- {default_value: true, important: true, name: show_align_buttons, type: boolean}
- {default_value: false, important: true, name: show_undo_redo_buttons, type: boolean}
