components: []
container:
  properties:
    html: "<div class=\"editor-section\">\n  <style>\n    .editor-section { background: #fff; border-radius: 8px; overflow: hidden; border: 1px solid #ddd; }\n    #toolbar { padding: 10px; background: #f8f8f8; border-bottom: 1px solid #ddd; display: flex; flex-wrap: wrap; gap: 5px; align-items: center; }\n    .toolbar-button { padding: 6px 12px; border: 1px solid #ddd; border-radius: 4px; background: #fff; cursor: pointer; }\n    .toolbar-button:hover { background: #f5f5f5; }\n    .toolbar-button.active { background-color: #d0ebff; border-color: #66b0ff; box-shadow: inset 0 2px 4px rgba(0,0,0,0.1); }\n    .toolbar-button svg { vertical-align: middle; }\n    #editor { min-height: 300px; padding: 20px; overflow-y: auto; font-size: 16px; line-height: 1.5; }\n    #editor p, #editor div { margin: 0; }\n    .toolbar-group { display: inline-flex; gap: 5px; }\n    .toolbar-button.disabled { background-color: #cccccc; color: #666666; cursor: not-allowed; pointer-events: none; border-color: #bbbbbb; }\n    .toolbar-button.disabled:hover { background-color: #cccccc; border-color: #bbbbbb; }\n\n    /* === ADVANCED IMAGE EDITOR STYLES === */\n    .image-editor-modal {\n    display: none;\n    position: fixed;\n    z-index: 10010;\n    left: 0; top: 0; width: 100%; height: 100%;\n    background-color: rgba(0,0,0,0.8);\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    }\n    .image-editor-content {\n    background-color: #2c2c2e; /* Dark theme for focus */\n    border-radius: 12px;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.5);\n    width: 95vw;\n    height: 90vh;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden; /* Contains the canvas */\n    position: relative; /* For tool palette positioning */\n    }\n    .editor-canvas-container {\n    flex-grow: 1; /* Takes up all available space */\n    position: relative;\n    overflow: hidden;\n    touch-action: none;\n    background-color: #1c1c1e; /* Dark background */\n    cursor: crosshair;\n    }\n    #base-canvas, #drawing-canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    transform-origin: 0 0;\n    }\n    #temp-text-input {\n    position: absolute;\n    background: transparent;\n    border: 1px dashed #fff;\n    color: white;\n    outline: none;\n    z-index: 10;\n    padding: 2px;\n    font-family: Arial, sans-serif;\n    line-height: 1.2;\n    }\n    .tool-palette {\n    position: absolute;\n    bottom: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    background-color: rgba(60, 60, 60, 0.85);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border-radius: 12px;\n    padding: 8px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.4);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    }\n    .palette-button {\n    background: transparent;\n    border: none;\n    color: white;\n    width: 44px;\n    height: 44px;\n    border-radius: 8px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: background-color 0.2s;\n    position: relative;\n    }\n    .palette-button:hover {\n    background-color: rgba(255, 255, 255, 0.15);\n    }\n    .palette-button.active {\n    background-color: rgba(0, 122, 255, 0.7);\n    }\n    .palette-button.disabled {\n    color: #666;\n    cursor: not-allowed;\n    }\n    .palette-separator {\n    width: 1px;\n    height: 24px;\n    background-color: rgba(255, 255, 255, 0.2);\n    }\n    .color-swatch {\n    width: 28px;\n    height: 28px;\n    border-radius: 50%;\n    border: 2px solid white;\n    box-shadow: 0 0 0 1px rgba(0,0,0,0.2);\n    }\n    .sub-palette {\n    display: none;\n    position: absolute;\n    bottom: calc(100% + 10px);\n    left: 50%;\n    transform: translateX(-50%);\n    background-color: rgba(80, 80, 80, 0.9);\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    border-radius: 10px;\n    padding: 10px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.4);\n    }\n    .sub-palette.visible {\n    display: flex;\n    gap: 10px;\n    align-items: center;\n    }\n    .thickness-option {\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    background-color: #eee;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    border: 2px solid transparent;\n    }\n    .thickness-option.active {\n    border-color: #007bff;\n    }\n    .thickness-option .dot {\n    background-color: #333;\n    border-radius: 50%;\n    }\n    .color-grid {\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 8px;\n    }\n    .color-option {\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    cursor: pointer;\n    border: 2px solid transparent;\n    transition: transform 0.1s;\n    }\n    .color-option:hover {\n    transform: scale(1.1);\n    }\n    .color-option.active {\n    border-color: white;\n    }\n\n    @media (max-width: 480px) {\n    .tool-palette {\n    gap: 4px;\n    padding: 6px;\n    }\n    .palette-button {\n    width: 40px;\n    height: 40px;\n    }\n    }\n  </style>\n\n  <div id=\"toolbar\">\n    <div id=\"undoRedoButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-undo\" class=\"toolbar-button\" title=\"Undo\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"9 14 4 9 9 4\"></polyline><path d=\"M20 20v-7a4 4 0 0 0-4-4H4\"></path></svg>\n      </button>\n      <button id=\"textEditor-button-redo\" class=\"toolbar-button\" title=\"Redo\">\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 14 20 9 15 4\"></polyline><path d=\"M4 20v-7a4 4 0 0 1 4-4h12\"></path></svg>\n      </button>\n    </div>\n    <div id=\"styleButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-bold\" class=\"toolbar-button\" title=\"Bold\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-bold\">\n        <path d=\"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path>\n        <path d=\"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path>\n      </svg>\n      </button>\n      <button id=\"textEditor-button-italic\" class=\"toolbar-button\" title=\"Italic\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-italic\">\n        <line x1=\"19\" y1=\"4\" x2=\"10\" y2=\"4\"></line>\n        <line x1=\"14\" y1=\"20\" x2=\"5\" y2=\"20\"></line>\n        <line x1=\"15\" y1=\"4\" x2=\"9\" y2=\"20\"></line>\n      </svg>\n      </button>\n      <button id=\"textEditor-button-underline\" class=\"toolbar-button\" title=\"Underline\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-underline\">\n        <path d=\"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3\"></path>\n        <line x1=\"4\" y1=\"21\" x2=\"20\" y2=\"21\"></line>\n      </svg>\n      </button>\n    </div>\n    <div id=\"alignButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-alignLeft\" class=\"toolbar-button\" title=\"Align Left\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-align-left\">\n        <line x1=\"17\" y1=\"10\" x2=\"3\" y2=\"10\"></line>\n        <line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line>\n        <line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line>\n        <line x1=\"17\" y1=\"18\" x2=\"3\" y2=\"18\"></line>\n      </svg>\n      </button>\n      <button id=\"textEditor-button-alignCenter\" class=\"toolbar-button\" title=\"Align Center\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-align-center\">\n        <line x1=\"18\" y1=\"10\" x2=\"6\" y2=\"10\"></line>\n        <line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line>\n        <line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line>\n        <line x1=\"18\" y1=\"18\" x2=\"6\" y2=\"18\"></line>\n      </svg>\n      </button>\n      <button id=\"textEditor-button-alignRight\" class=\"toolbar-button\" title=\"Align Right\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-align-right\">\n        <line x1=\"21\" y1=\"10\" x2=\"7\" y2=\"10\"></line>\n        <line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line>\n        <line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line>\n        <line x1=\"21\" y1=\"18\" x2=\"7\" y2=\"18\"></line>\n      </svg>\n      </button>\n    </div>\n    <input type=\"file\" id=\"image-file-input\" accept=\"image/png,image/jpeg,image/gif\" style=\"display: none;\">\n    <button id=\"textEditor-button-insertImage\" class=\"toolbar-button\" title=\"Import Image\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-image\">\n        <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\n        <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"></circle>\n        <polyline points=\"21 15 16 10 5 21\"></polyline>\n      </svg>\n    </button>\n    <span style=\"margin-left:auto;\"></span>\n    <button id=\"textEditor-button-copy\" class=\"toolbar-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-clipboard\">\n      <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path>\n      <rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect>\n    </svg>\n    </button>\n    <button id=\"textEditor-button-export\" class=\"toolbar-button\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-share\">\n      <path d=\"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8\"></path>\n      <polyline points=\"16 6 12 2 8 6\"></polyline>\n      <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"15\"></line>\n    </svg>\n    </button>\n  </div>\n  <div id=\"editor\" contenteditable=\"true\"></div>\n</div>\n\n<div id=\"image-editor-modal\" class=\"image-editor-modal\">\n  <div class=\"image-editor-content\" id=\"image-editor-content\">\n    <div class=\"editor-canvas-container\" id=\"canvas-container\">\n      <canvas id=\"base-canvas\"></canvas>\n      <canvas id=\"drawing-canvas\"></canvas>\n    </div>\n    <div class=\"tool-palette\">\n      <button id=\"cancel-edit-btn\" class=\"palette-button\" title=\"Cancel\">✕</button>\n      <button id=\"validate-edit-btn\" class=\"palette-button\" title=\"Done\" style=\"font-weight: bold; color: #34c759;\">✓</button>\n      <div class=\"palette-separator\"></div>\n      <button id=\"pen-tool\" class=\"palette-button active\" title=\"Pen\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"></path></svg>\n        <div id=\"pen-options\" class=\"sub-palette\"></div>\n      </button>\n      <!-- NEW: Text Tool Button -->\n      <button id=\"text-tool\" class=\"palette-button\" title=\"Text\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"4 7 4 4 20 4 20 7\"></polyline><line x1=\"9\" y1=\"20\" x2=\"15\" y2=\"20\"></line><line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"20\"></line></svg>\n      </button>\n      <!-- NEW: Square Tool Button -->\n      <button id=\"square-tool\" class=\"palette-button\" title=\"Square\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect></svg>\n      </button>\n      <!-- NEW: Ellipse Tool Button -->\n      <button id=\"ellipse-tool\" class=\"palette-button\" title=\"Ellipse\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle></svg>\n      </button>\n      <button id=\"color-picker-btn\" class=\"palette-button\" title=\"Color\">\n        <div id=\"color-swatch-display\" class=\"color-swatch\" style=\"background-color: #ff3b30;\"></div>\n        <div id=\"color-options\" class=\"sub-palette\"></div>\n      </button>\n      <div class=\"palette-separator\"></div>\n      <button id=\"undo-btn\" class=\"palette-button disabled\" title=\"Undo\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"9 14 4 9 9 4\"></polyline><path d=\"M20 20v-7a4 4 0 0 0-4-4H4\"></path></svg>\n      </button>\n      <button id=\"redo-btn\" class=\"palette-button disabled\" title=\"Redo\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 14 20 9 15 4\"></polyline><path d=\"M4 20v-7a4 4 0 0 1 4-4h12\"></path></svg>\n      </button>\n      <button id=\"clear-annotations-btn\" class=\"palette-button\" title=\"Clear All Annotations\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"3 6 5 6 21 6\"></polyline><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg>\n      </button>\n    </div>\n  </div>\n</div>\n\n<script>\n  if (!window.__editor_component_globals) {\n  window.__editor_component_globals = true;\n\n  const editorLogger = {\n  log: (...args) => console.log('[ImageEditor]', ...args),\n  error: (...args) => console.error('[ImageEditor]', ...args)\n  };\n\n  if (!window.createLogger) {\n  window.createLogger = () => ({ log: console.log, error: console.error });\n  }\n  const logger = window.createLogger('TextEditor');\n\n  let imageEditorState = {\n  baseCanvas: null, drawingCanvas: null, baseCtx: null, drawingCtx: null,\n  isDrawing: false, isPanning: false,\n  startPoint: null, // For shapes\n  lastPosition: { x: 0, y: 0 },\n  startPinchDist: 0,\n  lastPanMidpoint: null,\n  transform: { x: 0, y: 0, scale: 1 },\n  currentTool: 'pen',\n  // Options are now shared for simplicity\n  toolOptions: { color: '#ff3b30', thickness: 5, fontSize: 48 }, \n  originalImageElement: null, originalRefId: null,\n  originalImage: null,\n  scaleFactor: 1,\n  undoStack: [], redoStack: [],\n  };\n\n  function uuidv4(){return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16)})}\n  window.getEditorContent=function(){const e=document.getElementById(\"editor\");return e?e.innerHTML:\"\"};\n  window.setEditorContent=function(e){const t=document.getElementById(\"editor\");t&&(t.innerHTML=e&&!e.startsWith(\"<\")?`<div>${e.replace(/\\\\n/g,\"</div><div>\")}</div>`:e||\"\")};\n  window.applyAlignment=function(e){document.execCommand(\"justify\"+e.charAt(0).toUpperCase()+e.slice(1),!1,null)};\n  window.handleFileSelect=async function(e){const t=e.target.files[0];if(!t)return;const n=uuidv4(),o=Date.now();try{await window.ImageStaging.stageImage(n,t,o);const a=URL.createObjectURL(t),d=document.getElementById(\"editor\");d.focus();document.execCommand(\"insertHTML\",!1,`<img src=\\\"${a}\\\" data-ref-id=\\\"${n}\\\" style=\\\"max-width: 100%; height: auto;\\\" contenteditable=\\\"false\\\">`)}catch(r){logger.error(\"Failed to stage image:\",r),alert(\"Could not save image locally. Please try again.\")}finally{e.target.value=null}};\n  window.copyEditorContent=async function(){const e=document.getElementById(\"editor\");if(!e)return;const t=e.innerHTML,n=e.innerText||e.textContent;navigator.clipboard&&navigator.clipboard.write?async function(){try{await navigator.clipboard.write([new ClipboardItem({\"text/html\":new Blob([t],{type:\"text/html\"}),\"text/plain\":new Blob([n],{type:\"text/plain\"})})]),window.displayBanner&&window.displayBanner(\"Contenu formaté copié !\",\"success\")}catch(o){fallbackCopy(e)}}():fallbackCopy(e)};\n  function fallbackCopy(e){let t=!1;const n=function(o){o.preventDefault(),o.clipboardData.setData(\"text/html\",e.innerHTML),o.clipboardData.setData(\"text/plain\",e.innerText||e.textContent),t=!0};document.addEventListener(\"copy\",n);try{document.execCommand(\"copy\")}catch(o){t=!1}finally{document.removeEventListener(\"copy\",n)}t&&window.displayBanner?window.displayBanner(\"Contenu formaté copié !\",\"success\"):window.displayBanner&&window.displayBanner(\"Échec de la copie du contenu.\",\"error\")}\n  window.updateToolbarState=function(){const e={ \"textEditor-button-bold\":\"bold\",\"textEditor-button-italic\":\"italic\",\"textEditor-button-underline\":\"underline\"};for(const[t,n]of Object.entries(e)){const o=document.getElementById(t);o&&o.classList.toggle(\"active\",document.queryCommandState(n))}};\n\n  function resetEditorState() {\n  imageEditorState = { ...imageEditorState, isDrawing: false, isPanning: false, startPoint: null, undoStack: [], redoStack: [], lastPanMidpoint: null, transform: { x: 0, y: 0, scale: 1 }, originalImage: null, scaleFactor: 1 };\n  updateUndoRedoButtons();\n  }\n\n  window.openImageEditor = async function(imgElement) {\n  editorLogger.log('openImageEditor: Starting...');\n  resetEditorState();\n  const modal = document.getElementById('image-editor-modal');\n  Object.assign(imageEditorState, {\n  baseCanvas: document.getElementById('base-canvas'),\n  drawingCanvas: document.getElementById('drawing-canvas'),\n  baseCtx: document.getElementById('base-canvas').getContext('2d'),\n  drawingCtx: document.getElementById('drawing-canvas').getContext('2d', { willReadFrequently: true }),\n  originalImageElement: imgElement,\n  originalRefId: imgElement.getAttribute('data-ref-id')\n  });\n\n  try {\n  const blob = await window.ImageStaging.getStagedImageBlob(imageEditorState.originalRefId);\n  if (!blob) {\n  editorLogger.error(\"openImageEditor: Failed to get image blob from staging.\");\n  return;\n  }\n\n  const image = new Image();\n  const imageUrl = URL.createObjectURL(blob);\n\n  image.onload = () => {\n  const MAX_PROXY_DIMENSION = 1920;\n  let proxyWidth = image.width;\n  let proxyHeight = image.height;\n  imageEditorState.originalImage = image;\n  imageEditorState.scaleFactor = 1;\n\n  if (proxyWidth > MAX_PROXY_DIMENSION || proxyHeight > MAX_PROXY_DIMENSION) {\n  if (proxyWidth > proxyHeight) {\n  imageEditorState.scaleFactor = proxyWidth / MAX_PROXY_DIMENSION;\n  proxyHeight = Math.round(proxyHeight / imageEditorState.scaleFactor);\n  proxyWidth = MAX_PROXY_DIMENSION;\n  } else {\n  imageEditorState.scaleFactor = proxyHeight / MAX_PROXY_DIMENSION;\n  proxyWidth = Math.round(proxyWidth / imageEditorState.scaleFactor);\n  proxyHeight = MAX_PROXY_DIMENSION;\n  }\n  editorLogger.log(`Image downscaled for proxy editing. Factor: ${imageEditorState.scaleFactor}`);\n  }\n\n  [imageEditorState.baseCanvas, imageEditorState.drawingCanvas].forEach(c => {\n  c.width = proxyWidth; c.height = proxyHeight;\n  });\n  imageEditorState.baseCtx.drawImage(image, 0, 0, proxyWidth, proxyHeight);\n\n  modal.style.display = 'flex';\n  setTimeout(() => { fitCanvasToView(); }, 0); \n  URL.revokeObjectURL(imageUrl);\n  };\n  image.src = imageUrl;\n  } catch (error) { editorLogger.error(\"openImageEditor: Failed to load image into canvas:\", error); }\n  };\n\n  function fitCanvasToView() {\n  const { baseCanvas } = imageEditorState;\n  const container = document.getElementById('canvas-container');\n  if (!container || !baseCanvas) return;\n  const containerWidth = container.clientWidth, containerHeight = container.clientHeight;\n  const canvasWidth = baseCanvas.width, canvasHeight = baseCanvas.height;\n  if (containerWidth === 0 || containerHeight === 0 || canvasWidth === 0 || canvasHeight === 0) return;\n  const scale = Math.min(containerWidth / canvasWidth, containerHeight / canvasHeight) * 0.95;\n  const newX = (containerWidth - (canvasWidth * scale)) / 2;\n  const newY = (containerHeight - (canvasHeight * scale)) / 2;\n  applyCanvasTransforms(newX, newY, scale);\n  }\n\n  function applyCanvasTransforms(x, y, scale) {\n  const { transform } = imageEditorState;\n  transform.x = x; transform.y = y; transform.scale = scale;\n  const canvasTransform = `translate(${transform.x}px, ${transform.y}px) scale(${transform.scale})`;\n  if (imageEditorState.baseCanvas && imageEditorState.drawingCanvas) {\n  imageEditorState.baseCanvas.style.transform = canvasTransform;\n  imageEditorState.drawingCanvas.style.transform = canvasTransform;\n  }\n  }\n\n  function redrawAll() {\n  const { drawingCanvas, drawingCtx, undoStack } = imageEditorState;\n  if (!drawingCanvas) return;\n  drawingCtx.setTransform(1, 0, 0, 1, 0, 0);\n  drawingCtx.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);\n\n  undoStack.forEach(item => {\n  drawingCtx.strokeStyle = item.color;\n  drawingCtx.lineWidth = item.thickness;\n  drawingCtx.fillStyle = item.color; // For text and filled shapes\n\n  switch (item.tool) {\n  case 'pen':\n  drawingCtx.beginPath();\n  drawingCtx.moveTo(item.points[0].x, item.points[0].y);\n  item.points.slice(1).forEach(p => drawingCtx.lineTo(p.x, p.y));\n  drawingCtx.stroke();\n  break;\n  case 'square':\n  drawingCtx.strokeRect(item.start.x, item.start.y, item.end.x - item.start.x, item.end.y - item.start.y);\n  break;\n  case 'ellipse':\n  const centerX = (item.start.x + item.end.x) / 2;\n  const centerY = (item.start.y + item.end.y) / 2;\n  const radiusX = Math.abs((item.end.x - item.start.x) / 2);\n  const radiusY = Math.abs((item.end.y - item.start.y) / 2);\n  drawingCtx.beginPath();\n  drawingCtx.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, 2 * Math.PI);\n  drawingCtx.stroke();\n  break;\n  case 'text':\n  drawingCtx.font = `${item.fontSize}px Arial`;\n  drawingCtx.fillText(item.text, item.x, item.y);\n  break;\n  }\n  });\n  }\n\n  function getEventCoordinates(e, index = 0) {\n  const clientX = e.touches ? e.touches[index].clientX : e.clientX;\n  const clientY = e.touches ? e.touches[index].clientY : e.clientY;\n  return { x: clientX, y: clientY };\n  }\n\n  function worldCoordinates(coords) {\n  const { transform } = imageEditorState;\n  const rect = imageEditorState.drawingCanvas.getBoundingClientRect();\n  const worldX = (coords.x - rect.left) / transform.scale;\n  const worldY = (coords.y - rect.top) / transform.scale;\n  return { x: worldX, y: worldY };\n  }\n\n  function startInteraction(e) {\n  e.preventDefault();\n  commitText(); // If a text input is active, commit it before starting a new action.\n  const touches = e.touches;\n  if (touches && touches.length > 1) {\n  imageEditorState.isPanning = true; imageEditorState.isDrawing = false;\n  const p1 = getEventCoordinates(e, 0), p2 = getEventCoordinates(e, 1);\n  imageEditorState.startPinchDist = Math.hypot(p1.x - p2.x, p1.y - p2.y);\n  imageEditorState.lastPanMidpoint = { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };\n  } else {\n  imageEditorState.isDrawing = true; imageEditorState.isPanning = false;\n  const pos = worldCoordinates(getEventCoordinates(e));\n\n  switch (imageEditorState.currentTool) {\n  case 'pen':\n  imageEditorState.lastPosition = pos;\n  const newStroke = { tool: 'pen', ...imageEditorState.toolOptions, points: [pos] };\n  imageEditorState.undoStack.push(newStroke);\n  imageEditorState.redoStack = [];\n  redrawAll();\n  break;\n  case 'square':\n  case 'ellipse':\n  imageEditorState.startPoint = pos;\n  break;\n  case 'text':\n  handleTextToolClick(pos);\n  imageEditorState.isDrawing = false; // Don't drag for text\n  break;\n  }\n  }\n  updateUndoRedoButtons();\n  }\n\n  function moveInteraction(e) {\n  if (!imageEditorState.isDrawing && !imageEditorState.isPanning) return;\n  e.preventDefault();\n  if (imageEditorState.isPanning && e.touches && e.touches.length > 1) {\n  const { transform, lastPanMidpoint, startPinchDist } = imageEditorState;\n  const container = document.getElementById('canvas-container');\n  if (!container) return;\n  const rect = container.getBoundingClientRect();\n  const p1 = getEventCoordinates(e, 0), p2 = getEventCoordinates(e, 1);\n  const currentMidpoint = { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };\n  const panDeltaX = currentMidpoint.x - lastPanMidpoint.x, panDeltaY = currentMidpoint.y - lastPanMidpoint.y;\n  let newX = transform.x + panDeltaX, newY = transform.y + panDeltaY;\n  const currentPinchDist = Math.hypot(p1.x - p2.x, p1.y - p2.y);\n  let newScale = transform.scale;\n  if (startPinchDist > 0) newScale = Math.max(0.1, Math.min(transform.scale * (currentPinchDist / startPinchDist), 10));\n  const midpointX_relative = currentMidpoint.x - rect.left, midpointY_relative = currentMidpoint.y - rect.top;\n  newX = midpointX_relative - (midpointX_relative - newX) * (newScale / transform.scale);\n  newY = midpointY_relative - (midpointY_relative - newY) * (newScale / transform.scale);\n  applyCanvasTransforms(newX, newY, newScale);\n  imageEditorState.startPinchDist = currentPinchDist;\n  imageEditorState.lastPanMidpoint = currentMidpoint;\n  } else if (imageEditorState.isDrawing) {\n  const pos = worldCoordinates(getEventCoordinates(e));\n  switch (imageEditorState.currentTool) {\n  case 'pen':\n  imageEditorState.undoStack[imageEditorState.undoStack.length - 1].points.push(pos);\n  redrawAll();\n  break;\n  case 'square':\n  case 'ellipse':\n  redrawAll(); // Redraw history\n  const { drawingCtx, startPoint, toolOptions } = imageEditorState;\n  drawingCtx.strokeStyle = toolOptions.color;\n  drawingCtx.lineWidth = toolOptions.thickness;\n  if (imageEditorState.currentTool === 'square') {\n  drawingCtx.strokeRect(startPoint.x, startPoint.y, pos.x - startPoint.x, pos.y - startPoint.y);\n  } else { // ellipse\n  const centerX = (startPoint.x + pos.x) / 2;\n  const centerY = (startPoint.y + pos.y) / 2;\n  const radiusX = Math.abs((pos.x - startPoint.x) / 2);\n  const radiusY = Math.abs((pos.y - startPoint.y) / 2);\n  drawingCtx.beginPath();\n  drawingCtx.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, 2 * Math.PI);\n  drawingCtx.stroke();\n  }\n  break;\n  }\n  }\n  }\n\n  function endInteraction(e) {\n  if (!imageEditorState.isDrawing) {\n  imageEditorState.isPanning = false;\n  imageEditorState.lastPanMidpoint = null;\n  return;\n  }\n  const { currentTool, startPoint } = imageEditorState;\n  const endPoint = worldCoordinates(getEventCoordinates(e));\n\n  if ((currentTool === 'square' || currentTool === 'ellipse') && startPoint) {\n  const shape = {\n  tool: currentTool,\n  ...imageEditorState.toolOptions,\n  start: startPoint,\n  end: endPoint\n  };\n  imageEditorState.undoStack.push(shape);\n  imageEditorState.redoStack = [];\n  imageEditorState.startPoint = null;\n  updateUndoRedoButtons();\n  }\n  redrawAll();\n  imageEditorState.isDrawing = false;\n  }\n\n  function handleTextToolClick(pos) {\n  commitText(); // Commit any existing text input first\n  const canvasContainer = document.getElementById('canvas-container');\n  const input = document.createElement('div');\n  input.id = 'temp-text-input';\n  input.contentEditable = true;\n  input.style.left = `${pos.x}px`;\n  input.style.top = `${pos.y}px`;\n  input.style.color = imageEditorState.toolOptions.color;\n  input.style.fontSize = `${imageEditorState.toolOptions.fontSize / imageEditorState.transform.scale}px`;\n\n  canvasContainer.appendChild(input);\n  input.focus();\n\n  input.addEventListener('blur', () => commitText());\n  input.addEventListener('keydown', (e) => {\n  if (e.key === 'Enter' && !e.shiftKey) {\n  e.preventDefault();\n  commitText();\n  }\n  });\n  }\n\n  function commitText() {\n  const input = document.getElementById('temp-text-input');\n  if (!input) return;\n\n  const text = input.innerText;\n  if (text.trim()) {\n  const textAction = {\n  tool: 'text',\n  text: text,\n  x: parseFloat(input.style.left),\n  y: parseFloat(input.style.top) + (imageEditorState.toolOptions.fontSize / imageEditorState.transform.scale), // Adjust for baseline\n  color: imageEditorState.toolOptions.color,\n  fontSize: imageEditorState.toolOptions.fontSize / imageEditorState.transform.scale,\n  fontFamily: 'Arial',\n  };\n  imageEditorState.undoStack.push(textAction);\n  imageEditorState.redoStack = [];\n  updateUndoRedoButtons();\n  redrawAll();\n  }\n  input.remove();\n  }\n\n  function handleWheelZoom(e) {\n  e.preventDefault();\n  const { transform } = imageEditorState;\n  const container = document.getElementById('canvas-container'); if (!container) return;\n  const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;\n  const newScale = Math.max(0.1, Math.min(transform.scale * zoomFactor, 10));\n  const rect = container.getBoundingClientRect();\n  const mouseX = e.clientX - rect.left, mouseY = e.clientY - rect.top;\n  const newX = mouseX - (mouseX - transform.x) * (newScale / transform.scale);\n  const newY = mouseY - (mouseY - transform.y) * (newScale / transform.scale);\n  applyCanvasTransforms(newX, newY, newScale);\n  }\n\n  function updateUndoRedoButtons() {\n  document.getElementById('undo-btn').classList.toggle('disabled', imageEditorState.undoStack.length === 0);\n  document.getElementById('redo-btn').classList.toggle('disabled', imageEditorState.redoStack.length === 0);\n  }\n\n  window.closeImageEditor = function() {\n  commitText();\n  const modal = document.getElementById('image-editor-modal');\n  if (modal) modal.style.display = 'none';\n  resetEditorState();\n  };\n\n  function buildSubPalettes() {\n  const penOptions = document.getElementById('pen-options'); penOptions.innerHTML = '';\n  [2, 5, 10].forEach(t => {\n  const option = document.createElement('div'); option.className = 'thickness-option'; option.dataset.thickness = t;\n  option.innerHTML = `<div class=\\\"dot\\\" style=\\\"width:${t*2}px; height:${t*2}px;\\\"></div>`;\n  option.addEventListener('click', () => {\n  imageEditorState.toolOptions.thickness = t;\n  document.querySelectorAll('#pen-options .thickness-option').forEach(o => o.classList.remove('active'));\n  option.classList.add('active');\n  });\n  penOptions.appendChild(option);\n  });\n  const activeThickness = penOptions.querySelector(`[data-thickness='${imageEditorState.toolOptions.thickness}']`); if (activeThickness) activeThickness.classList.add('active');\n  const colorOptions = document.getElementById('color-options'); colorOptions.innerHTML = '<div class=\\\"color-grid\\\"></div>';\n  const colorGrid = colorOptions.querySelector('.color-grid');\n  ['#ff3b30', '#ff9500', '#ffcc00', '#34c759', '#007aff', '#5856d6', '#ff2d55', '#af52de', '#ffffff', '#000000'].forEach(c => {\n  const option = document.createElement('div'); option.className = 'color-option'; option.style.backgroundColor = c; option.dataset.color = c;\n  option.addEventListener('click', () => {\n  imageEditorState.toolOptions.color = c;\n  document.getElementById('color-swatch-display').style.backgroundColor = c;\n  document.querySelectorAll('.color-option').forEach(o => o.classList.remove('active'));\n  option.classList.add('active');\n  });\n  colorGrid.appendChild(option);\n  });\n  const activeColor = colorGrid.querySelector(`[data-color='${imageEditorState.toolOptions.color}']`); if (activeColor) activeColor.classList.add('active');\n  }\n\n  window.initializeEditor = function(retryCount = 0) {\n  if (retryCount > 20) { logger.error(\"Fatal Error: #editor element not found.\"); return; }\n  const editorDiv = document.getElementById('editor');\n  if (!editorDiv) { setTimeout(() => window.initializeEditor(retryCount + 1), 50); return; }\n  const addButtonListener = (id, handler) => { const btn = document.getElementById(id); if(btn) { const newBtn = btn.cloneNode(true); btn.parentNode.replaceChild(newBtn, btn); newBtn.addEventListener('click', (e) => { e.preventDefault(); if (!newBtn.disabled) handler(e); }); } };\n  addButtonListener('textEditor-button-undo', () => anvil.call(editorDiv.closest('.anvil-container'), 'undo_change'));\n  addButtonListener('textEditor-button-redo', () => anvil.call(editorDiv.closest('.anvil-container'), 'redo_change'));\n  addButtonListener('textEditor-button-bold', () => { document.execCommand('bold', false, null); window.updateToolbarState(); });\n  addButtonListener('textEditor-button-italic', () => { document.execCommand('italic', false, null); window.updateToolbarState(); });\n  addButtonListener('textEditor-button-underline', () => { document.execCommand('underline', false, null); window.updateToolbarState(); });\n  addButtonListener('textEditor-button-alignLeft', () => { window.applyAlignment('left'); window.updateToolbarState(); });\n  addButtonListener('textEditor-button-alignCenter', () => { window.applyAlignment('center'); window.updateToolbarState(); });\n  addButtonListener('textEditor-button-alignRight', () => { window.applyAlignment('right'); window.updateToolbarState(); });\n  addButtonListener('textEditor-button-copy', window.copyEditorContent);\n  addButtonListener('textEditor-button-export', () => anvil.call(editorDiv.closest('.anvil-container'), 'export_content'));\n  const imageFileInput = document.getElementById('image-file-input');\n  if (imageFileInput) { const newFileInput = imageFileInput.cloneNode(true); imageFileInput.parentNode.replaceChild(newFileInput, imageFileInput); newFileInput.addEventListener('change', window.handleFileSelect); }\n  addButtonListener('textEditor-button-insertImage', () => { document.getElementById('image-file-input')?.click(); });\n\n  editorDiv.addEventListener('mouseup', window.updateToolbarState);\n  editorDiv.addEventListener('keyup', window.updateToolbarState);\n  editorDiv.addEventListener('focus', window.updateToolbarState);\n  editorDiv.addEventListener('blur', () => { anvil.call(editorDiv.closest('.anvil-container'), 'on_blur_handler'); });\n\n  let touchStartX = 0, touchStartY = 0, isDragging = false, potentialImageTarget = null;\n  const DRAG_THRESHOLD = 10;\n  editorDiv.addEventListener('touchstart', (event) => { if (event.target.tagName === 'IMG' && event.target.hasAttribute('data-ref-id')) { potentialImageTarget = event.target; touchStartX = event.touches[0].clientX; touchStartY = event.touches[0].clientY; isDragging = false; } }, { passive: true });\n  editorDiv.addEventListener('touchmove', (event) => { if (!potentialImageTarget) return; const touchCurrentX = event.touches[0].clientX, touchCurrentY = event.touches[0].clientY; const diffX = Math.abs(touchCurrentX - touchStartX), diffY = Math.abs(touchCurrentY - touchStartY); if (diffX > DRAG_THRESHOLD || diffY > DRAG_THRESHOLD) isDragging = true; });\n  editorDiv.addEventListener('touchend', (event) => { if (!potentialImageTarget || isDragging) { potentialImageTarget = null; return; } event.preventDefault(); window.openImageEditor(potentialImageTarget); potentialImageTarget = null; });\n  editorDiv.addEventListener('click', (event) => { if (event.target.tagName === 'IMG' && event.target.hasAttribute('data-ref-id')) window.openImageEditor(event.target); });\n\n  buildSubPalettes();\n  const canvasContainer = document.getElementById('canvas-container');\n  const drawingCanvas = document.getElementById('drawing-canvas');\n\n  const reattachModalListener = (id, event, handler) => {\n  const element = document.getElementById(id);\n  if (element) {\n  const newElement = element.cloneNode(true);\n  element.parentNode.replaceChild(newElement, element);\n  newElement.addEventListener(event, handler);\n  }\n  };\n\n  if (drawingCanvas) {\n  drawingCanvas.addEventListener('mousedown', startInteraction); \n  drawingCanvas.addEventListener('mousemove', moveInteraction); \n  drawingCanvas.addEventListener('mouseup', endInteraction); \n  drawingCanvas.addEventListener('mouseleave', endInteraction);\n  drawingCanvas.addEventListener('touchstart', startInteraction, { passive: false }); \n  drawingCanvas.addEventListener('touchmove', moveInteraction, { passive: false }); \n  drawingCanvas.addEventListener('touchend', endInteraction);\n  }\n  if (canvasContainer) {\n  canvasContainer.addEventListener('wheel', handleWheelZoom, { passive: false });\n  }\n\n  const setActiveTool = (toolName) => {\n  commitText(); // Commit any pending text before switching tools\n  imageEditorState.currentTool = toolName;\n  document.querySelectorAll('.tool-palette .palette-button').forEach(btn => btn.classList.remove('active'));\n  document.getElementById(`${toolName}-tool`).classList.add('active');\n  document.querySelectorAll('.sub-palette').forEach(p => p.classList.remove('visible'));\n  };\n\n  reattachModalListener('pen-tool', 'click', (e) => { \n  setActiveTool('pen');\n  document.getElementById('pen-options').classList.toggle('visible'); \n  e.stopPropagation();\n  });\n  reattachModalListener('text-tool', 'click', () => setActiveTool('text'));\n  reattachModalListener('square-tool', 'click', () => setActiveTool('square'));\n  reattachModalListener('ellipse-tool', 'click', () => setActiveTool('ellipse'));\n\n  reattachModalListener('color-picker-btn', 'click', (e) => { \n  document.getElementById('color-options').classList.toggle('visible'); \n  document.getElementById('pen-options').classList.remove('visible'); \n  e.stopPropagation(); \n  });\n\n  reattachModalListener('undo-btn', 'click', () => { \n  if(imageEditorState.undoStack.length > 0) { \n  imageEditorState.redoStack.push(imageEditorState.undoStack.pop()); \n  redrawAll(); \n  updateUndoRedoButtons(); \n  } \n  });\n\n  reattachModalListener('redo-btn', 'click', () => { \n  if(imageEditorState.redoStack.length > 0) { \n  imageEditorState.undoStack.push(imageEditorState.redoStack.pop()); \n  redrawAll(); \n  updateUndoRedoButtons(); \n  } \n  });\n\n  reattachModalListener('clear-annotations-btn', 'click', () => { \n  if(confirm(\"Clear all drawings from this image?\")) { \n  imageEditorState.undoStack = []; \n  imageEditorState.redoStack = []; \n  redrawAll(); \n  updateUndoRedoButtons(); \n  } \n  });\n\n  reattachModalListener('cancel-edit-btn', 'click', window.closeImageEditor);\n  \n  reattachModalListener('validate-edit-btn', 'click', () => {\n    const { originalImage, undoStack, scaleFactor } = imageEditorState;\n    if (!originalImage) { editorLogger.error(\"Cannot save, original image not found.\"); return; }\n    const mergeCanvas = document.createElement('canvas');\n    mergeCanvas.width = originalImage.width; mergeCanvas.height = originalImage.height;\n    const mergeCtx = mergeCanvas.getContext('2d');\n    mergeCtx.drawImage(originalImage, 0, 0);\n\n    undoStack.forEach(item => {\n        mergeCtx.strokeStyle = item.color;\n        mergeCtx.lineWidth = item.thickness * scaleFactor;\n        mergeCtx.fillStyle = item.color;\n\n        switch (item.tool) {\n            case 'pen':\n                mergeCtx.beginPath();\n                mergeCtx.moveTo(item.points[0].x * scaleFactor, item.points[0].y * scaleFactor);\n                item.points.slice(1).forEach(p => { mergeCtx.lineTo(p.x * scaleFactor, p.y * scaleFactor); });\n                mergeCtx.stroke();\n                break;\n            case 'square':\n                mergeCtx.strokeRect(item.start.x * scaleFactor, item.start.y * scaleFactor, (item.end.x - item.start.x) * scaleFactor, (item.end.y - item.start.y) * scaleFactor);\n                break;\n            case 'ellipse':\n                const centerX = ((item.start.x + item.end.x) / 2) * scaleFactor;\n                const centerY = ((item.start.y + item.end.y) / 2) * scaleFactor;\n                const radiusX = Math.abs((item.end.x - item.start.x) / 2) * scaleFactor;\n                const radiusY = Math.abs((item.end.y - item.start.y) / 2) * scaleFactor;\n                mergeCtx.beginPath();\n                mergeCtx.ellipse(centerX, centerY, radiusX, radiusY, 0, 0, 2 * Math.PI);\n                mergeCtx.stroke();\n                break;\n            case 'text':\n                mergeCtx.font = `${item.fontSize * scaleFactor}px Arial`;\n                mergeCtx.fillText(item.text, item.x * scaleFactor, item.y * scaleFactor);\n                break;\n        }\n    });\n\n    mergeCanvas.toBlob(async (blob) => {\n      await window.ImageStaging.stageImage(imageEditorState.originalRefId, blob, Date.now());\n      const newUrl = URL.createObjectURL(blob);\n      const oldUrl = imageEditorState.originalImageElement.src;\n      imageEditorState.originalImageElement.src = newUrl;\n      if (oldUrl && oldUrl.startsWith('blob:')) URL.revokeObjectURL(oldUrl);\n      window.closeImageEditor();\n    }, 'image/png');\n  });\n\n  document.body.addEventListener('click', (e) => { \n      if (!e.target.closest('.palette-button')) { \n          document.getElementById('pen-options').classList.remove('visible'); \n          document.getElementById('color-options').classList.remove('visible'); \n      } \n  });\n};\n}\n</script>"
    visible: true
  type: HtmlTemplate
custom_component: true
is_package: true
properties:
- {default_binding_prop: true, default_value: true, important: true, name: show_image_button, type: boolean}
- {default_value: true, important: true, name: show_style_buttons, type: boolean}
- {default_value: true, important: true, name: show_copy_button, type: boolean}
- {default_value: true, important: true, name: show_align_buttons, type: boolean}
- {default_value: false, important: true, name: show_undo_redo_buttons, type: boolean}
- {default_value: '', important: true, name: show_export_button, type: string}
