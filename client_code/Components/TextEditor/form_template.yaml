components: []
container:
  properties:
    html: "<div class=\"editor-section\">\n  <style>\n    .editor-section { background: #fff; border-radius: 8px; overflow: hidden; border: 1px solid #ddd; }\n    #toolbar { padding: 10px; background: #f8f8f8; border-bottom: 1px solid #ddd; display: flex; flex-wrap: wrap; gap: 5px; align-items: center; }\n    .toolbar-button { padding: 6px 12px; border: 1px solid #ddd; border-radius: 4px; background: #fff; cursor: pointer; }\n    .toolbar-button:hover { background: #f5f5f5; }\n    .toolbar-button.active { background-color: #d0ebff; border-color: #66b0ff; box-shadow: inset 0 2px 4px rgba(0,0,0,0.1); }\n    .toolbar-button svg { vertical-align: middle; }\n    #editor { min-height: 300px; padding: 20px; overflow-y: auto; font-size: 16px; line-height: 1.5; }\n    #editor p, #editor div { margin: 0; }\n    .toolbar-group { display: inline-flex; gap: 5px; }\n    .toolbar-button.disabled { background-color: #cccccc; color: #666666; cursor: not-allowed; pointer-events: none; border-color: #bbbbbb; }\n    .toolbar-button.disabled:hover { background-color: #cccccc; border-color: #bbbbbb; }\n\n    /* === ADVANCED IMAGE EDITOR STYLES === */\n    .image-editor-modal {\n      display: none;\n      position: fixed;\n      z-index: 10010;\n      left: 0; top: 0; width: 100%; height: 100%;\n      background-color: rgba(0,0,0,0.8);\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n    }\n    .image-editor-content {\n      background-color: #2c2c2e; /* Dark theme for focus */\n      border-radius: 12px;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.5);\n      width: 95vw;\n      height: 90vh;\n      display: flex;\n      flex-direction: column;\n      overflow: hidden; /* Contains the canvas */\n      position: relative; /* For tool palette positioning */\n    }\n    .editor-canvas-container {\n      flex-grow: 1; /* Takes up all available space */\n      position: relative;\n      overflow: hidden;\n      touch-action: none;\n      background-color: #1c1c1e; /* Dark background */\n      cursor: crosshair;\n    }\n    #base-canvas, #drawing-canvas {\n      position: absolute;\n      top: 0;\n      left: 0;\n      transform-origin: 0 0;\n    }\n    .tool-palette {\n      position: absolute;\n      bottom: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: rgba(60, 60, 60, 0.85);\n      backdrop-filter: blur(10px);\n      -webkit-backdrop-filter: blur(10px);\n      border-radius: 12px;\n      padding: 8px;\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.4);\n      border: 1px solid rgba(255, 255, 255, 0.1);\n    }\n    .palette-button {\n      background: transparent;\n      border: none;\n      color: white;\n      width: 44px;\n      height: 44px;\n      border-radius: 8px;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: background-color 0.2s;\n      position: relative;\n    }\n    .palette-button:hover {\n      background-color: rgba(255, 255, 255, 0.15);\n    }\n    .palette-button.active {\n      background-color: rgba(0, 122, 255, 0.7);\n    }\n    .palette-button.disabled {\n      color: #666;\n      cursor: not-allowed;\n    }\n    .palette-separator {\n      width: 1px;\n      height: 24px;\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n    .color-swatch {\n      width: 28px;\n      height: 28px;\n      border-radius: 50%;\n      border: 2px solid white;\n      box-shadow: 0 0 0 1px rgba(0,0,0,0.2);\n    }\n    .sub-palette {\n      display: none;\n      position: absolute;\n      bottom: calc(100% + 10px);\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: rgba(80, 80, 80, 0.9);\n      backdrop-filter: blur(10px);\n      -webkit-backdrop-filter: blur(10px);\n      border-radius: 10px;\n      padding: 10px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.4);\n    }\n    .sub-palette.visible {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    }\n    .thickness-option {\n      width: 32px;\n      height: 32px;\n      border-radius: 50%;\n      background-color: #eee;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      cursor: pointer;\n      border: 2px solid transparent;\n    }\n    .thickness-option.active {\n      border-color: #007bff;\n    }\n    .thickness-option .dot {\n      background-color: #333;\n      border-radius: 50%;\n    }\n    .color-grid {\n      display: grid;\n      grid-template-columns: repeat(5, 1fr);\n      gap: 8px;\n    }\n    .color-option {\n      width: 30px;\n      height: 30px;\n      border-radius: 50%;\n      cursor: pointer;\n      border: 2px solid transparent;\n      transition: transform 0.1s;\n    }\n    .color-option:hover {\n      transform: scale(1.1);\n    }\n    .color-option.active {\n      border-color: white;\n    }\n  </style>\n\n  <div id=\"toolbar\">\n    <div id=\"undoRedoButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-undo\" class=\"toolbar-button\" title=\"Undo\">↩️</button>\n      <button id=\"textEditor-button-redo\" class=\"toolbar-button\" title=\"Redo\">↪️</button>\n    </div>\n    <div id=\"styleButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-bold\" class=\"toolbar-button\" title=\"Bold\"><b>B</b></button>\n      <button id=\"textEditor-button-italic\" class=\"toolbar-button\" title=\"Italic\"><i>I</i></button>\n      <button id=\"textEditor-button-underline\" class=\"toolbar-button\" title=\"Underline\"><u>U</u></button>\n    </div>\n    <div id=\"alignButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-alignLeft\" class=\"toolbar-button\" title=\"Align Left\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" d=\"M1 3h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm0 4h10a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm0 4h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2z\"/></svg></button>\n      <button id=\"textEditor-button-alignCenter\" class=\"toolbar-button\" title=\"Align Center\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" d=\"M3 3h10a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2zm-2 4h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm2 4h10a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2z\"/></svg></button>\n      <button id=\"textEditor-button-alignRight\" class=\"toolbar-button\" title=\"Align Right\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" d=\"M5 3h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2zM1 7h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm4 4h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2z\"/></svg></button>\n    </div>\n    <input type=\"file\" id=\"image-file-input\" accept=\"image/png,image/jpeg,image/gif\" style=\"display: none;\">\n    <button id=\"textEditor-button-insertImage\" class=\"toolbar-button\">Image</button>\n    <span style=\"margin-left:auto;\"></span>\n    <button id=\"textEditor-button-copy\" class=\"toolbar-button\">Copy</button>\n    <button id=\"textEditor-button-export\" class=\"toolbar-button\">Export</button>\n  </div>\n  <div id=\"editor\" contenteditable=\"true\"></div>\n</div>\n\n<div id=\"image-editor-modal\" class=\"image-editor-modal\">\n  <div class=\"image-editor-content\" id=\"image-editor-content\">\n    <div class=\"editor-canvas-container\" id=\"canvas-container\">\n      <canvas id=\"base-canvas\"></canvas>\n      <canvas id=\"drawing-canvas\"></canvas>\n    </div>\n    <div class=\"tool-palette\">\n      <button id=\"cancel-edit-btn\" class=\"palette-button\" title=\"Cancel\">✕</button>\n      <button id=\"validate-edit-btn\" class=\"palette-button\" title=\"Done\" style=\"font-weight: bold; color: #34c759;\">✓</button>\n      <div class=\"palette-separator\"></div>\n      <button id=\"pen-tool\" class=\"palette-button active\" title=\"Pen\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M12 19l7-7 3 3-7 7-3-3z\"></path><path d=\"M18 13l-1.5-7.5L2 4l7.5 1.5L18 13z\"></path></svg>\n        <div id=\"pen-options\" class=\"sub-palette\"></div>\n      </button>\n      <button id=\"eraser-tool\" class=\"palette-button\" title=\"Object Eraser\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M20 5H8.5a3.5 3.5 0 0 0-3.5 3.5V15H4a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-1V8.5A3.5 3.5 0 0 0 16.5 5H20z\"></path><line x1=\"10\" y1=\"10\" x2=\"14\" y2=\"10\"></line></svg>\n      </button>\n      <button id=\"color-picker-btn\" class=\"palette-button\" title=\"Color\">\n        <div id=\"color-swatch-display\" class=\"color-swatch\" style=\"background-color: #ff3b30;\"></div>\n        <div id=\"color-options\" class=\"sub-palette\"></div>\n      </button>\n      <div class=\"palette-separator\"></div>\n      <button id=\"undo-btn\" class=\"palette-button disabled\" title=\"Undo\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M21 13H4.56a2 2 0 0 1-1.79-1.11L.3 7.11A2 2 0 0 1 2.09 4H10\"></path><path d=\"M4 8L2 6l2-2\"></path></svg>\n      </button>\n      <button id=\"redo-btn\" class=\"palette-button disabled\" title=\"Redo\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M3 13h16.44a2 2 0 0 0 1.79-1.11l2.46-4.78A2 2 0 0 0 21.91 4H14\"></path><path d=\"M20 8l2-2-2-2\"></path></svg>\n      </button>\n      <button id=\"clear-annotations-btn\" class=\"palette-button\" title=\"Clear All Annotations\">\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"3 6 5 6 21 6\"></polyline><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path></svg>\n      </button>\n    </div>\n  </div>\n</div>\n\n<script>\n  if (!window.__editor_component_globals) {\n    window.__editor_component_globals = true;\n\n    const editorLogger = {\n      log: (...args) => console.log('[ImageEditor]', ...args),\n      error: (...args) => console.error('[ImageEditor]', ...args)\n    };\n\n    if (!window.createLogger) {\n      window.createLogger = () => ({ log: console.log, error: console.error });\n    }\n    const logger = window.createLogger('TextEditor');\n\n    let imageEditorState = {\n      baseCanvas: null, drawingCanvas: null, baseCtx: null, drawingCtx: null,\n      isDrawing: false, isPanning: false,\n      lastPosition: { x: 0, y: 0 },\n      startPinchDist: 0,\n      transform: { x: 0, y: 0, scale: 1 },\n      currentTool: 'pen',\n      penOptions: { color: '#ff3b30', thickness: 5 },\n      originalImageElement: null, originalRefId: null,\n      undoStack: [], redoStack: [],\n    };\n\n    function uuidv4(){return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){var r=Math.random()*16|0,v=c=='x'?r:r&0x3|0x8;return v.toString(16)})}\n    window.getEditorContent=function(){const e=document.getElementById(\"editor\");return e?e.innerHTML:\"\"};\n    window.setEditorContent=function(e){const t=document.getElementById(\"editor\");t&&(t.innerHTML=e&&!e.startsWith(\"<\")?`<div>${e.replace(/\\\\n/g,\"</div><div>\")}</div>`:e||\"\")};\n    window.applyAlignment=function(e){document.execCommand(\"justify\"+e.charAt(0).toUpperCase()+e.slice(1),!1,null)};\n    window.handleFileSelect=async function(e){const t=e.target.files[0];if(!t)return;const n=uuidv4(),o=Date.now();try{await window.ImageStaging.stageImage(n,t,o);const a=URL.createObjectURL(t),d=document.getElementById(\"editor\");d.focus(),document.execCommand(\"insertHTML\",!1,`<img src=\\\"${a}\\\" data-ref-id=\\\"${n}\\\" style=\\\"max-width: 100%; height: auto;\\\">`)}catch(r){logger.error(\"Failed to stage image:\",r),alert(\"Could not save image locally. Please try again.\")}finally{e.target.value=null}};\n    window.copyEditorContent=async function(){const e=document.getElementById(\"editor\");if(!e)return;const t=e.innerHTML,n=e.innerText||e.textContent;navigator.clipboard&&navigator.clipboard.write?async function(){try{await navigator.clipboard.write([new ClipboardItem({\"text/html\":new Blob([t],{type:\"text/html\"}),\"text/plain\":new Blob([n],{type:\"text/plain\"})})]),window.displayBanner&&window.displayBanner(\"Contenu formaté copié !\",\"success\")}catch(o){fallbackCopy(e)}}():fallbackCopy(e)};\n    function fallbackCopy(e){let t=!1;const n=function(o){o.preventDefault(),o.clipboardData.setData(\"text/html\",e.innerHTML),o.clipboardData.setData(\"text/plain\",e.innerText||e.textContent),t=!0};document.addEventListener(\"copy\",n);try{document.execCommand(\"copy\")}catch(o){t=!1}finally{document.removeEventListener(\"copy\",n)}t&&window.displayBanner?window.displayBanner(\"Contenu formaté copié !\",\"success\"):window.displayBanner&&window.displayBanner(\"Échec de la copie du contenu.\",\"error\")}\n    window.updateToolbarState=function(){const e={ \"textEditor-button-bold\":\"bold\",\"textEditor-button-italic\":\"italic\",\"textEditor-button-underline\":\"underline\"};for(const[t,n]of Object.entries(e)){const o=document.getElementById(t);o&&o.classList.toggle(\"active\",document.queryCommandState(n))}};\n\n    function resetEditorState() {\n      imageEditorState = { ...imageEditorState, isDrawing: false, isPanning: false, undoStack: [], redoStack: [], transform: { x: 0, y: 0, scale: 1 }};\n      updateUndoRedoButtons();\n    }\n\n    window.openImageEditor = async function(imgElement) {\n      editorLogger.log('openImageEditor: Starting...');\n      resetEditorState();\n      const modal = document.getElementById('image-editor-modal');\n      Object.assign(imageEditorState, {\n        baseCanvas: document.getElementById('base-canvas'),\n        drawingCanvas: document.getElementById('drawing-canvas'),\n        baseCtx: document.getElementById('base-canvas').getContext('2d'),\n        drawingCtx: document.getElementById('drawing-canvas').getContext('2d', { willReadFrequently: true }),\n        originalImageElement: imgElement,\n        originalRefId: imgElement.getAttribute('data-ref-id')\n      });\n      editorLogger.log('openImageEditor: State initialized for refId:', imageEditorState.originalRefId);\n\n      try {\n        const blob = await window.ImageStaging.getStagedImageBlob(imageEditorState.originalRefId);\n        if (!blob) {\n          editorLogger.error(\"openImageEditor: Failed to get image blob from staging.\");\n          return;\n        }\n        editorLogger.log('openImageEditor: Blob retrieved, size:', blob.size);\n\n        const image = new Image();\n        const imageUrl = URL.createObjectURL(blob);\n\n        image.onload = () => {\n          editorLogger.log('openImageEditor: Image loaded into Image object.');\n          const { width, height } = image;\n          editorLogger.log('openImageEditor: Original image dimensions:', { width, height });\n\n          [imageEditorState.baseCanvas, imageEditorState.drawingCanvas].forEach(c => { c.width = width; c.height = height; });\n          editorLogger.log('openImageEditor: Canvases resized to image dimensions.');\n\n          imageEditorState.baseCtx.drawImage(image, 0, 0);\n          editorLogger.log('openImageEditor: Image drawn to base canvas.');\n\n          // *** FIX: Make modal visible BEFORE calculating size ***\n          modal.style.display = 'flex';\n          editorLogger.log('openImageEditor: Modal displayed.');\n\n          // *** FIX: Defer fitCanvasToView to ensure container has dimensions ***\n          setTimeout(() => {\n            fitCanvasToView();\n          }, 0); // A timeout of 0 waits for the next event cycle, allowing the DOM to update\n\n          URL.revokeObjectURL(imageUrl);\n        };\n        image.onerror = () => {\n          editorLogger.error(\"openImageEditor: Image failed to load from blob URL.\");\n        };\n        image.src = imageUrl;\n      } catch (error) { editorLogger.error(\"openImageEditor: Failed to load image into canvas:\", error); }\n    };\n\n    function fitCanvasToView() {\n      editorLogger.log('fitCanvasToView: Starting calculation...');\n      const { baseCanvas } = imageEditorState;\n      const container = document.getElementById('canvas-container');\n      if (!container || !baseCanvas) {\n        editorLogger.error('fitCanvasToView: Missing container or baseCanvas.');\n        return;\n      }\n\n      const containerWidth = container.clientWidth;\n      const containerHeight = container.clientHeight;\n      const canvasWidth = baseCanvas.width;\n      const canvasHeight = baseCanvas.height;\n\n      editorLogger.log('fitCanvasToView: Dimensions:', { containerWidth, containerHeight, canvasWidth, canvasHeight });\n\n      if (containerWidth === 0 || containerHeight === 0 || canvasWidth === 0 || canvasHeight === 0) {\n        editorLogger.error('fitCanvasToView: One of the dimensions is zero, aborting.');\n        return;\n      }\n\n      const scale = Math.min(containerWidth / canvasWidth, containerHeight / canvasHeight) * 0.95;\n      const newWidth = canvasWidth * scale;\n      const newHeight = canvasHeight * scale;\n      const newX = (containerWidth - newWidth) / 2;\n      const newY = (containerHeight - newHeight) / 2;\n\n      editorLogger.log('fitCanvasToView: Calculated values:', { scale, newWidth, newHeight, newX, newY });\n\n      applyCanvasTransforms(newX, newY, scale);\n    }\n\n    function applyCanvasTransforms(x, y, scale) {\n      editorLogger.log('applyCanvasTransforms: Applying transform:', { x, y, scale });\n      const { transform } = imageEditorState;\n      transform.x = x;\n      transform.y = y;\n      transform.scale = scale;\n\n      const canvasTransform = `translate(${transform.x}px, ${transform.y}px) scale(${transform.scale})`;\n\n      if (imageEditorState.baseCanvas && imageEditorState.drawingCanvas) {\n        imageEditorState.baseCanvas.style.transform = canvasTransform;\n        imageEditorState.drawingCanvas.style.transform = canvasTransform;\n      }\n    }\n\n    function redrawAll() {\n      // editorLogger.log('redrawAll: Redrawing all strokes.');\n      const { drawingCanvas, drawingCtx, undoStack } = imageEditorState;\n      if (!drawingCanvas) return;\n\n      drawingCtx.setTransform(1, 0, 0, 1, 0, 0);\n      drawingCtx.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);\n      drawingCtx.lineCap = 'round';\n      drawingCtx.lineJoin = 'round';\n\n      undoStack.forEach(stroke => {\n        drawingCtx.strokeStyle = stroke.color;\n        drawingCtx.lineWidth = stroke.thickness;\n        drawingCtx.beginPath();\n        drawingCtx.moveTo(stroke.points[0].x, stroke.points[0].y);\n        stroke.points.slice(1).forEach(p => drawingCtx.lineTo(p.x, p.y));\n        drawingCtx.stroke();\n      });\n    }\n\n    function getEventCoordinates(e, index = 0) {\n      const clientX = e.touches ? e.touches[index].clientX : e.clientX;\n      const clientY = e.touches ? e.touches[index].clientY : e.clientY;\n      return { x: clientX, y: clientY };\n    }\n\n    function worldCoordinates(coords) {\n      const { transform } = imageEditorState;\n      const rect = imageEditorState.drawingCanvas.getBoundingClientRect();\n\n      const worldX = (coords.x - rect.left) / transform.scale;\n      const worldY = (coords.y - rect.top) / transform.scale;\n\n      // This log is very noisy, uncomment if needed for deep debugging\n      // editorLogger.log('worldCoordinates: Calculation:', {\n      //     'Screen Coords': coords,\n      //     'Canvas Bounding Rect': { top: rect.top, left: rect.left },\n      //     'Current Transform': transform,\n      //     'Result (World Coords)': { x: worldX, y: worldY }\n      // });\n\n      return { x: worldX, y: worldY };\n    }\n\n    function startInteraction(e) {\n      e.preventDefault();\n      // editorLogger.log('startInteraction: Event started.', { type: e.type });\n      const touches = e.touches;\n      if (touches && touches.length > 1) {\n        imageEditorState.isPanning = true;\n        imageEditorState.isDrawing = false;\n        const p1 = getEventCoordinates(e, 0);\n        const p2 = getEventCoordinates(e, 1);\n        imageEditorState.startPinchDist = Math.hypot(p1.x - p2.x, p1.y - p2.y);\n      } else {\n        imageEditorState.isDrawing = true;\n        imageEditorState.isPanning = false;\n        const pos = worldCoordinates(getEventCoordinates(e));\n        imageEditorState.lastPosition = pos;\n        if(imageEditorState.currentTool === 'pen') {\n          const newStroke = { tool: 'pen', ...imageEditorState.penOptions, points: [pos] };\n          imageEditorState.undoStack.push(newStroke);\n          imageEditorState.redoStack = [];\n          redrawAll();\n        }\n      }\n      updateUndoRedoButtons();\n    }\n\n    function moveInteraction(e) {\n      if (!imageEditorState.isDrawing && !imageEditorState.isPanning) return;\n      e.preventDefault();\n\n      if (imageEditorState.isPanning && e.touches && e.touches.length > 1) {\n        // Pinch & Pan logic here\n      } else if (imageEditorState.isDrawing) {\n        const pos = worldCoordinates(getEventCoordinates(e));\n        if (imageEditorState.currentTool === 'pen') {\n          imageEditorState.undoStack[imageEditorState.undoStack.length - 1].points.push(pos);\n        } else if (imageEditorState.currentTool === 'eraser') {\n          const eraserSize = 20 / imageEditorState.transform.scale;\n          const originalStackSize = imageEditorState.undoStack.length;\n          imageEditorState.undoStack = imageEditorState.undoStack.filter(stroke => \n            !stroke.points.some(p => Math.hypot(p.x - pos.x, p.y - pos.y) < eraserSize)\n                                                                        );\n            if(imageEditorState.undoStack.length < originalStackSize) updateUndoRedoButtons();\n            }\n            redrawAll();\n            }\n            }\n\n            function endInteraction() {\n            // editorLogger.log('endInteraction: Event ended.');\n            imageEditorState.isDrawing = false;\n            imageEditorState.isPanning = false;\n            }\n\n            // *** NEW: Handler for mouse wheel zoom ***\n            function handleWheelZoom(e) {\n            e.preventDefault();\n            const { transform } = imageEditorState;\n            const container = document.getElementById('canvas-container');\n            if (!container) return;\n\n            const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1; // Zoom out for scroll down, in for scroll up\n            const newScale = Math.max(0.1, Math.min(transform.scale * zoomFactor, 10)); // Clamp scale\n\n            // Get mouse position relative to the container\n            const rect = container.getBoundingClientRect();\n            const mouseX = e.clientX - rect.left;\n            const mouseY = e.clientY - rect.top;\n\n            // Adjust translation to zoom towards the mouse pointer\n            const newX = mouseX - (mouseX - transform.x) * (newScale / transform.scale);\n            const newY = mouseY - (mouseY - transform.y) * (newScale / transform.scale);\n\n            editorLogger.log('handleWheelZoom:', { oldScale: transform.scale, newScale, mouseX, mouseY });\n\n            applyCanvasTransforms(newX, newY, newScale);\n            }\n\n            function updateUndoRedoButtons() {\n            document.getElementById('undo-btn').classList.toggle('disabled', imageEditorState.undoStack.length === 0);\n            document.getElementById('redo-btn').classList.toggle('disabled', imageEditorState.redoStack.length === 0);\n            }\n\n            window.closeImageEditor = function() {\n            editorLogger.log('closeImageEditor: Closing modal.');\n            const modal = document.getElementById('image-editor-modal');\n            if (modal) modal.style.display = 'none';\n            resetEditorState();\n            };\n\n            function buildSubPalettes() {\n            const penOptions = document.getElementById('pen-options');\n            penOptions.innerHTML = '';\n            [2, 5, 10].forEach(t => {\n            const option = document.createElement('div');\n            option.className = 'thickness-option';\n            option.dataset.thickness = t;\n            option.innerHTML = `<div class=\"dot\" style=\"width:${t*2}px; height:${t*2}px;\"></div>`;\n            option.addEventListener('click', () => {\n            imageEditorState.penOptions.thickness = t;\n            document.querySelectorAll('#pen-options .thickness-option').forEach(o => o.classList.remove('active'));\n            option.classList.add('active');\n            });\n            penOptions.appendChild(option);\n            });\n            const activeThickness = penOptions.querySelector(`[data-thickness='${imageEditorState.penOptions.thickness}']`);\n            if (activeThickness) activeThickness.classList.add('active');\n\n            const colorOptions = document.getElementById('color-options');\n            colorOptions.innerHTML = '<div class=\"color-grid\"></div>';\n            const colorGrid = colorOptions.querySelector('.color-grid');\n            ['#ff3b30', '#ff9500', '#ffcc00', '#34c759', '#007aff', '#5856d6', '#ff2d55', '#af52de', '#ffffff', '#000000'].forEach(c => {\n            const option = document.createElement('div');\n            option.className = 'color-option';\n            option.style.backgroundColor = c;\n            option.dataset.color = c;\n            option.addEventListener('click', () => {\n            imageEditorState.penOptions.color = c;\n            document.getElementById('color-swatch-display').style.backgroundColor = c;\n            document.querySelectorAll('.color-option').forEach(o => o.classList.remove('active'));\n            option.classList.add('active');\n            });\n            colorGrid.appendChild(option);\n            });\n            const activeColor = colorGrid.querySelector(`[data-color='${imageEditorState.penOptions.color}']`);\n            if (activeColor) activeColor.classList.add('active');\n            }\n\n            window.initializeEditor = function(retryCount = 0) {\n            if (retryCount > 20) { logger.error(\"Fatal Error: #editor element not found.\"); return; }\n            const editorDiv = document.getElementById('editor');\n            if (!editorDiv) {\n            setTimeout(() => window.initializeEditor(retryCount + 1), 50);\n            return;\n            }\n\n            const addButtonListener = (id, handler) => {\n            const btn = document.getElementById(id);\n            if(btn) {\n            const newBtn = btn.cloneNode(true);\n            btn.parentNode.replaceChild(newBtn, btn);\n            newBtn.addEventListener('click', (e) => { e.preventDefault(); if (!newBtn.disabled) handler(e); });\n            }\n            };\n\n            addButtonListener('textEditor-button-undo', () => anvil.call(editorDiv.closest('.anvil-container'), 'undo_change'));\n            addButtonListener('textEditor-button-redo', () => anvil.call(editorDiv.closest('.anvil-container'), 'redo_change'));\n            addButtonListener('textEditor-button-bold', () => { document.execCommand('bold', false, null); window.updateToolbarState(); });\n            addButtonListener('textEditor-button-italic', () => { document.execCommand('italic', false, null); window.updateToolbarState(); });\n            addButtonListener('textEditor-button-underline', () => { document.execCommand('underline', false, null); window.updateToolbarState(); });\n            addButtonListener('textEditor-button-alignLeft', () => { window.applyAlignment('left'); window.updateToolbarState(); });\n            addButtonListener('textEditor-button-alignCenter', () => { window.applyAlignment('center'); window.updateToolbarState(); });\n            addButtonListener('textEditor-button-alignRight', () => { window.applyAlignment('right'); window.updateToolbarState(); });\n            addButtonListener('textEditor-button-copy', window.copyEditorContent);\n            addButtonListener('textEditor-button-export', () => anvil.call(editorDiv.closest('.anvil-container'), 'export_content'));\n\n            const imageFileInput = document.getElementById('image-file-input');\n            if (imageFileInput) {\n            const newFileInput = imageFileInput.cloneNode(true);\n            imageFileInput.parentNode.replaceChild(newFileInput, imageFileInput);\n            newFileInput.addEventListener('change', window.handleFileSelect);\n            }\n\n            addButtonListener('textEditor-button-insertImage', () => {\n            document.getElementById('image-file-input')?.click();\n            });\n\n            if (!editorDiv.dataset.stateListenersAttached) {\n            editorDiv.dataset.stateListenersAttached = 'true';\n            editorDiv.addEventListener('mouseup', window.updateToolbarState);\n            editorDiv.addEventListener('keyup', window.updateToolbarState);\n            editorDiv.addEventListener('focus', window.updateToolbarState);\n            }\n            if (!editorDiv.dataset.blurAttached) {\n            editorDiv.dataset.blurAttached = 'true';\n            editorDiv.addEventListener('blur', () => { anvil.call(editorDiv.closest('.anvil-container'), 'on_blur_handler'); });\n            }\n            if (!editorDiv.dataset.imageClickListenerAttached) {\n            editorDiv.dataset.imageClickListenerAttached = 'true';\n            editorDiv.addEventListener('click', (event) => {\n            if (event.target.tagName === 'IMG' && event.target.hasAttribute('data-ref-id')) {\n            event.preventDefault();\n            window.openImageEditor(event.target);\n            }\n            });\n            }\n\n            if (!document.body.dataset.imageEditorListenersAttached) {\n            document.body.dataset.imageEditorListenersAttached = 'true';\n            buildSubPalettes();\n\n            const canvasContainer = document.getElementById('canvas-container');\n            const drawingCanvas = document.getElementById('drawing-canvas');\n\n            // Drawing Listeners\n            drawingCanvas.addEventListener('mousedown', startInteraction);\n            drawingCanvas.addEventListener('mousemove', moveInteraction);\n            drawingCanvas.addEventListener('mouseup', endInteraction);\n            drawingCanvas.addEventListener('mouseleave', endInteraction);\n            drawingCanvas.addEventListener('touchstart', startInteraction, { passive: false });\n            drawingCanvas.addEventListener('touchmove', moveInteraction, { passive: false });\n            drawingCanvas.addEventListener('touchend', endInteraction);\n\n            // *** NEW: Zoom Listener on the container ***\n            canvasContainer.addEventListener('wheel', handleWheelZoom, { passive: false });\n\n            document.getElementById('pen-tool').addEventListener('click', (e) => {\n            imageEditorState.currentTool = 'pen';\n            document.getElementById('pen-tool').classList.add('active');\n            document.getElementById('eraser-tool').classList.remove('active');\n            document.getElementById('pen-options').classList.toggle('visible');\n            document.getElementById('color-options').classList.remove('visible');\n            e.stopPropagation();\n            });\n            document.getElementById('eraser-tool').addEventListener('click', () => {\n            imageEditorState.currentTool = 'eraser';\n            document.getElementById('eraser-tool').classList.add('active');\n            document.getElementById('pen-tool').classList.remove('active');\n            document.getElementById('pen-options').classList.remove('visible');\n            document.getElementById('color-options').classList.remove('visible');\n            });\n            document.getElementById('color-picker-btn').addEventListener('click', (e) => {\n            document.getElementById('color-options').classList.toggle('visible');\n            document.getElementById('pen-options').classList.remove('visible');\n            e.stopPropagation();\n            });\n\n            document.getElementById('undo-btn').addEventListener('click', () => {\n            if(imageEditorState.undoStack.length > 0) {\n            imageEditorState.redoStack.push(imageEditorState.undoStack.pop());\n            redrawAll();\n            updateUndoRedoButtons();\n            }\n            });\n            document.getElementById('redo-btn').addEventListener('click', () => {\n            if(imageEditorState.redoStack.length > 0) {\n            imageEditorState.undoStack.push(imageEditorState.redoStack.pop());\n            redrawAll();\n            updateUndoRedoButtons();\n            }\n            });\n            document.getElementById('clear-annotations-btn').addEventListener('click', () => {\n            if(confirm(\"Clear all drawings from this image?\")) {\n            imageEditorState.undoStack = [];\n            imageEditorState.redoStack = [];\n            redrawAll();\n            updateUndoRedoButtons();\n            }\n            });\n\n            document.getElementById('cancel-edit-btn').addEventListener('click', window.closeImageEditor);\n            document.getElementById('validate-edit-btn').addEventListener('click', () => {\n            const mergeCanvas = document.createElement('canvas');\n            mergeCanvas.width = imageEditorState.baseCanvas.width;\n            mergeCanvas.height = imageEditorState.baseCanvas.height;\n            const mergeCtx = mergeCanvas.getContext('2d');\n            mergeCtx.drawImage(imageEditorState.baseCanvas, 0, 0);\n            mergeCtx.drawImage(imageEditorState.drawingCanvas, 0, 0);\n\n            mergeCanvas.toBlob(async (blob) => {\n            await window.ImageStaging.stageImage(imageEditorState.originalRefId, blob, Date.now());\n            const newUrl = URL.createObjectURL(blob);\n            const oldUrl = imageEditorState.originalImageElement.src;\n            imageEditorState.originalImageElement.src = newUrl;\n            if (oldUrl && oldUrl.startsWith('blob:')) {\n            URL.revokeObjectURL(oldUrl);\n            }\n            window.closeImageEditor();\n            }, 'image/png');\n            });\n\n            document.body.addEventListener('click', (e) => {\n            if (!e.target.closest('.palette-button')) {\n            document.getElementById('pen-options').classList.remove('visible');\n            document.getElementById('color-options').classList.remove('visible');\n            }\n            });\n            }\n            };\n            }\n            </script>"
    visible: true
  type: HtmlTemplate
custom_component: true
is_package: true
properties:
- {default_binding_prop: true, default_value: true, important: true, name: show_image_button, type: boolean}
- {default_value: true, important: true, name: show_style_buttons, type: boolean}
- {default_value: true, important: true, name: show_copy_button, type: boolean}
- {default_value: true, important: true, name: show_align_buttons, type: boolean}
- {default_value: false, important: true, name: show_undo_redo_buttons, type: boolean}
- {default_value: '', important: true, name: show_export_button, type: string}
