components: []
container:
  properties:
    html: "<div class=\"editor-section\">\n  <style>\n    .editor-section { background: #fff; border-radius: 8px; overflow: hidden; border: 1px solid #ddd; }\n    #toolbar { padding: 10px; background: #f8f8f8; border-bottom: 1px solid #ddd; display: flex; flex-wrap: wrap; gap: 5px; align-items: center; }\n    .toolbar-button { padding: 6px 12px; border: 1px solid #ddd; border-radius: 4px; background: #fff; cursor: pointer; }\n    .toolbar-button:hover { background: #f5f5f5; }\n    .toolbar-button.active { background-color: #d0ebff; border-color: #66b0ff; box-shadow: inset 0 2px 4px rgba(0,0,0,0.1); }\n    .toolbar-button svg { vertical-align: middle; }\n    #editor { min-height: 300px; padding: 20px; overflow-y: auto; font-size: 16px; line-height: 1.5; }\n    #editor p, #editor div { margin: 0; }\n    .toolbar-group { display: inline-flex; gap: 5px; }\n    .toolbar-button.disabled { background-color: #cccccc; color: #666666; cursor: not-allowed; pointer-events: none; border-color: #bbbbbb; }\n    .toolbar-button.disabled:hover { background-color: #cccccc; border-color: #bbbbbb; }\n    .image-editor-modal {\n      display: none;\n      position: fixed;\n      z-index: 10010; /* High z-index to be on top */\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0,0,0,0.6);\n      align-items: center;\n      justify-content: center;\n    }\n    .image-editor-content {\n      background-color: #fff;\n      padding: 15px;\n      border-radius: 8px;\n      box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n      width: 95%;\n      max-width: 800px;\n      display: flex;\n      flex-direction: column;\n    }\n    .editor-canvas-container {\n      border: 1px solid #ccc;\n      margin-bottom: 10px;\n      position: relative; /* For cursor */\n      touch-action: none; /* For mobile drawing */\n    }\n    #image-editor-canvas {\n      display: block; /* Removes any default spacing */\n      max-width: 100%;\n    }\n    .editor-toolbar {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n      padding: 10px;\n      background-color: #f1f1f1;\n      border-radius: 4px;\n      margin-bottom: 10px;\n      flex-wrap: wrap;\n    }\n    .editor-toolbar .tool-button {\n      padding: 8px 12px;\n      border: 1px solid #ccc;\n      background-color: #fff;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .editor-toolbar .tool-button.active {\n      background-color: #d0ebff;\n      border-color: #007bff;\n    }\n    .editor-toolbar input[type=\"color\"] {\n      border: none;\n      padding: 0;\n      width: 30px;\n      height: 30px;\n      cursor: pointer;\n      background: none;\n    }\n    .editor-actions {\n      display: flex;\n      justify-content: flex-end;\n      gap: 10px;\n    }\n  </style>\n\n  <div id=\"toolbar\">\n    <div id=\"undoRedoButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-undo\" class=\"toolbar-button\" title=\"Undo\">‚Ü©Ô∏è</button>\n      <button id=\"textEditor-button-redo\" class=\"toolbar-button\" title=\"Redo\">‚Ü™Ô∏è</button>\n    </div>\n    <div id=\"styleButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-bold\" class=\"toolbar-button\" title=\"Bold\"><b>B</b></button>\n      <button id=\"textEditor-button-italic\" class=\"toolbar-button\" title=\"Italic\"><i>I</i></button>\n      <button id=\"textEditor-button-underline\" class=\"toolbar-button\" title=\"Underline\"><u>U</u></button>\n    </div>\n    <div id=\"alignButtons\" class=\"toolbar-group\">\n      <button id=\"textEditor-button-alignLeft\" class=\"toolbar-button\" title=\"Align Left\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" d=\"M1 3h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm0 4h10a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm0 4h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2z\"/></svg></button>\n      <button id=\"textEditor-button-alignCenter\" class=\"toolbar-button\" title=\"Align Center\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" d=\"M3 3h10a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2zm-2 4h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm2 4h10a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2z\"/></svg></button>\n      <button id=\"textEditor-button-alignRight\" class=\"toolbar-button\" title=\"Align Right\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\"><path fill=\"currentColor\" d=\"M5 3h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2zM1 7h14a1 1 0 0 1 0 2H1a1 1 0 0 1 0-2zm4 4h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2z\"/></svg></button>\n    </div>\n    <input type=\"file\" id=\"image-file-input\" accept=\"image/png,image/jpeg,image/gif\" style=\"display: none;\">\n    <button id=\"textEditor-button-insertImage\" class=\"toolbar-button\">Image</button>\n    <span style=\"margin-left:auto;\"></span>\n    <button id=\"textEditor-button-copy\" class=\"toolbar-button\">Copy</button>\n    <button id=\"textEditor-button-export\" class=\"toolbar-button\">Export</button>\n  </div>\n  <div id=\"editor\" contenteditable=\"true\"></div>\n  <div id=\"image-editor-modal\" class=\"image-editor-modal\">\n    <div class=\"image-editor-content\">\n      <div class=\"editor-toolbar\">\n        <button class=\"tool-button active\" id=\"pen-tool\">Pen</button>\n        <button class=\"tool-button\" id=\"eraser-tool\">Eraser</button>\n        <input type=\"color\" id=\"color-picker\" value=\"#ff0000\" title=\"Pen Color\">\n        <div style=\"margin-left: auto;\"> <!-- Pushes trash to the right -->\n          <button class=\"tool-button\" id=\"trash-tool\" title=\"Delete Image\">üóëÔ∏è</button>\n        </div>\n      </div>\n      <div class=\"editor-canvas-container\">\n        <canvas id=\"image-editor-canvas\"></canvas>\n      </div>\n      <div class=\"editor-actions\">\n        <button class=\"tool-button\" id=\"cancel-edit-btn\">Cancel</button>\n        <button class=\"tool-button\" id=\"validate-edit-btn\" style=\"background-color: #4CAF50; color: white;\">Validate</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  if (!window.__editor_component_globals) {\n    window.__editor_component_globals = true;\n\n    const logger = window.createLogger('TextEditor');\n    let imageEditorState = {\n      canvas: null,\n      ctx: null,\n      isDrawing: false,\n      currentTool: 'pen',\n      currentColor: '#ff0000',\n      originalImageElement: null,\n      originalRefId: null\n    };\n    \n    function uuidv4() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n      });\n    }\n\n    window.getEditorContent = function() {\n      const editor = document.getElementById(\"editor\");\n      return editor ? editor.innerHTML : \"\";\n    };\n\n    window.setEditorContent = function(value) {\n      const editor = document.getElementById(\"editor\");\n      if (editor) {\n        if (value && !value.startsWith('<')) {\n          editor.innerHTML = `<div>${value.replace(/\\\\n/g, '</div><div>')}</div>`;\n        } else {\n          editor.innerHTML = value || \"\";\n        }\n      }\n    };\n\n    window.applyAlignment = function(align) {\n      document.execCommand('justify' + align.charAt(0).toUpperCase() + align.slice(1), false, null);\n    };\n\n    window.handleFileSelect = async function(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      const referenceId = uuidv4();\n      const timestamp = Date.now();\n\n      try {\n        await window.ImageStaging.stageImage(referenceId, file, timestamp);\n        const blobUrl = URL.createObjectURL(file);\n\n        const editor = document.getElementById('editor');\n        editor.focus();\n        document.execCommand('insertHTML', false, `<img src=\"${blobUrl}\" data-ref-id=\"${referenceId}\" style=\"max-width: 100%; height: auto;\">`);\n\n      } catch (error) {\n        logger.error('Failed to stage image:', error);\n        alert('Could not save image locally. Please try again.');\n      } finally {\n        event.target.value = null;\n      }\n    };\n\n    window.copyEditorContent = async function() {\n      const editor = document.getElementById(\"editor\");\n      if (!editor) {\n        window.createLogger('TextEditor').error(\"Editor element not found for copying.\");\n        return;\n      }\n\n      const htmlContent = editor.innerHTML;\n      const textContent = editor.innerText || editor.textContent;\n\n      if (navigator.clipboard && navigator.clipboard.write) {\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({ \n              'text/html': new Blob([htmlContent], { type: 'text/html' }),\n              'text/plain': new Blob([textContent], { type: 'text/plain' })\n            })\n          ]);\n\n          if (window.displayBanner) {\n            window.displayBanner(\"Contenu format√© copi√© !\", \"success\");\n          }\n        } catch (err) {\n          console.error(\"√âchec de la copie avec l'API Clipboard:\", err);\n          fallbackCopy(editor);\n        }\n      } else {\n        fallbackCopy(editor);\n      }\n    };\n\n    function fallbackCopy(editor) {\n      let succeeded = false;\n      const listener = function(e) {\n        e.preventDefault();\n        e.clipboardData.setData('text/html', editor.innerHTML);\n        e.clipboardData.setData('text/plain', editor.innerText || editor.textContent);\n        succeeded = true;\n      };\n\n      document.addEventListener('copy', listener);\n      try {\n        document.execCommand('copy');\n      } catch (err) {\n        window.createLogger('TextEditor').error(\"Le repli de copie a √©chou√©:\", err);\n        succeeded = false;\n      } finally {\n        document.removeEventListener('copy', listener);\n      }\n\n      if (succeeded && window.displayBanner) {\n        window.displayBanner(\"Contenu format√© copi√© !\", \"success\");\n      } else if (window.displayBanner) {\n        window.displayBanner(\"√âchec de la copie du contenu.\", \"error\");\n      }\n    }\n    window.updateToolbarState = function() {\n      const simpleCommands = {\n        'textEditor-button-bold': 'bold',\n        'textEditor-button-italic': 'italic',\n        'textEditor-button-underline': 'underline'\n      };\n      for (const [buttonId, command] of Object.entries(simpleCommands)) {\n        const button = document.getElementById(buttonId);\n        if (button) {\n          try {\n            button.classList.toggle('active', document.queryCommandState(command));\n          } catch (e) { /* Fails in some edge cases, ignore */ }\n        }\n      }\n    };\n    window.openImageEditor = async function(imgElement) {\n      logger.log(\"Opening image editor for:\", imgElement);\n      const modal = document.getElementById('image-editor-modal');\n      imageEditorState.canvas = document.getElementById('image-editor-canvas');\n      imageEditorState.ctx = imageEditorState.canvas.getContext('2d');\n      imageEditorState.originalImageElement = imgElement;\n      imageEditorState.originalRefId = imgElement.getAttribute('data-ref-id');\n\n      if (!imageEditorState.originalRefId) {\n        logger.error(\"Image does not have a data-ref-id. Cannot edit.\");\n        return;\n      }\n\n      try {\n        const blob = await window.ImageStaging.getStagedImageBlob(imageEditorState.originalRefId);\n        if (!blob) {\n          logger.error(\"Could not retrieve blob from ImageStaging for refId:\", imageEditorState.originalRefId);\n          return;\n        }\n\n        const image = new Image();\n        image.onload = () => {\n          imageEditorState.canvas.width = image.width;\n          imageEditorState.canvas.height = image.height;\n          imageEditorState.ctx.drawImage(image, 0, 0);\n          modal.style.display = 'flex';\n          URL.revokeObjectURL(image.src); // Clean up memory\n        };\n        image.src = URL.createObjectURL(blob);\n\n        // Attach drawing listeners\n        imageEditorState.canvas.addEventListener('mousedown', startDrawing);\n        imageEditorState.canvas.addEventListener('mousemove', draw);\n        imageEditorState.canvas.addEventListener('mouseup', stopDrawing);\n        imageEditorState.canvas.addEventListener('mouseleave', stopDrawing);\n\n      } catch (error) {\n        logger.error(\"Failed to load image into canvas:\", error);\n      }\n    };\n\n    function startDrawing(e) {\n      imageEditorState.isDrawing = true;\n      const { x, y } = getCanvasCoordinates(e);\n      imageEditorState.ctx.beginPath();\n      imageEditorState.ctx.moveTo(x, y);\n    }\n\n    function draw(e) {\n      if (!imageEditorState.isDrawing) return;\n      const { x, y } = getCanvasCoordinates(e);\n\n      imageEditorState.ctx.lineCap = 'round';\n      imageEditorState.ctx.lineWidth = 5;\n\n      if(imageEditorState.currentTool === 'pen') {\n        imageEditorState.ctx.globalCompositeOperation = 'source-over';\n        imageEditorState.ctx.strokeStyle = imageEditorState.currentColor;\n      } else if (imageEditorState.currentTool === 'eraser') {\n        imageEditorState.ctx.globalCompositeOperation = 'destination-out';\n        imageEditorState.ctx.lineWidth = 20; // Make eraser bigger\n      }\n\n      imageEditorState.ctx.lineTo(x, y);\n      imageEditorState.ctx.stroke();\n    }\n\n    function stopDrawing() {\n      if (imageEditorState.isDrawing) {\n        imageEditorState.ctx.closePath();\n        imageEditorState.isDrawing = false;\n      }\n    }\n\n    function getCanvasCoordinates(e) {\n      const rect = imageEditorState.canvas.getBoundingClientRect();\n      return {\n        x: e.clientX - rect.left,\n        y: e.clientY - rect.top\n      };\n    }\n    window.closeImageEditor = function() {\n      logger.log(\"Closing image editor.\");\n      const modal = document.getElementById('image-editor-modal');\n      if (modal) modal.style.display = 'none';\n\n      // Clean up\n      if (imageEditorState.canvas) {\n        imageEditorState.canvas.removeEventListener('mousedown', startDrawing);\n        imageEditorState.canvas.removeEventListener('mousemove', draw);\n        imageEditorState.canvas.removeEventListener('mouseup', stopDrawing);\n        imageEditorState.canvas.removeEventListener('mouseleave', stopDrawing);\n        // Clear the canvas\n        imageEditorState.ctx.clearRect(0, 0, imageEditorState.canvas.width, imageEditorState.canvas.height);\n      }\n\n      imageEditorState.originalImageElement = null;\n      imageEditorState.originalRefId = null;\n      imageEditorState.isDrawing = false;\n    };\n\n    window.initializeEditor = function(retryCount = 0) {\n      logger.log(\"Initializing editor and attaching listeners.\");\n      try {\n        document.execCommand('defaultParagraphSeparator', false, 'p');\n      } catch (e) {\n        logger.warn(\"La commande 'defaultParagraphSeparator' n'est pas support√©e par ce navigateur.\");\n      }\n      const editorDiv = document.getElementById('editor');\n      if (!editorDiv) {\n        if (retryCount < 20) {\n          setTimeout(() => window.initializeEditor(retryCount + 1), 50);\n        } else {\n          logger.error(\"Fatal Error: #editor element not found after multiple retries.\");\n        }\n        return;\n      }\n      if (!editorDiv.dataset.imageClickListenerAttached) {\n        editorDiv.dataset.imageClickListenerAttached = 'true';\n        editorDiv.addEventListener('click', (event) => {\n          if (event.target.tagName === 'IMG' && event.target.hasAttribute('data-ref-id')) {\n            event.preventDefault(); // Prevent default browser behavior for images\n            window.openImageEditor(event.target);\n          }\n        });\n      }\n      if (!document.body.dataset.imageEditorListenersAttached) {\n        document.body.dataset.imageEditorListenersAttached = 'true';\n\n        // Tool selection\n        document.getElementById('pen-tool').addEventListener('click', () => {\n          imageEditorState.currentTool = 'pen';\n          document.getElementById('pen-tool').classList.add('active');\n          document.getElementById('eraser-tool').classList.remove('active');\n        });\n        document.getElementById('eraser-tool').addEventListener('click', () => {\n          imageEditorState.currentTool = 'eraser';\n          document.getElementById('eraser-tool').classList.add('active');\n          document.getElementById('pen-tool').classList.remove('active');\n        });\n        document.getElementById('color-picker').addEventListener('input', (e) => {\n          imageEditorState.currentColor = e.target.value;\n        });\n\n        // Action buttons\n        document.getElementById('cancel-edit-btn').addEventListener('click', window.closeImageEditor);\n\n        document.getElementById('validate-edit-btn').addEventListener('click', async () => {\n          if (!imageEditorState.canvas || !imageEditorState.originalRefId) return;\n\n          imageEditorState.canvas.toBlob(async (blob) => {\n            try {\n              // Update the blob in IndexedDB\n              await window.ImageStaging.stageImage(imageEditorState.originalRefId, blob, Date.now());\n\n              // Update the src of the image in the editor to reflect the changes\n              const newBlobUrl = URL.createObjectURL(blob);\n              imageEditorState.originalImageElement.src = newBlobUrl;\n\n              logger.log(\"Image updated successfully.\");\n              window.closeImageEditor();\n            } catch (error) {\n              logger.error(\"Failed to save edited image:\", error);\n            }\n          }, 'image/png'); // Save as PNG to support transparency from eraser\n        });\n\n        document.getElementById('trash-tool').addEventListener('click', async () => {\n          if (confirm(\"Are you sure you want to delete this image?\")) {\n            try {\n              // Remove from IndexedDB\n              await window.ImageStaging.clearStagedImages([imageEditorState.originalRefId]);\n\n              // Remove from the editor DOM\n              imageEditorState.originalImageElement.remove();\n\n              logger.log(\"Image deleted successfully.\");\n              window.closeImageEditor();\n            } catch (error) {\n              logger.error(\"Failed to delete image:\", error);\n            }\n          }\n        });\n      }\n\n      const addButtonListener = (buttonId, handler) => {\n        const button = document.getElementById(buttonId);\n        if (button) {\n          const newButton = button.cloneNode(true);\n          button.parentNode.replaceChild(newButton, button);\n          newButton.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            if (!newButton.disabled) { handler(); }\n          });\n        } else {\n          logger.warn(`Button #${buttonId} not found.`);\n        }\n      };\n\n      addButtonListener('textEditor-button-undo', () => anvil.call(editorDiv.closest('.anvil-container'), 'undo_change'));\n      addButtonListener('textEditor-button-redo', () => anvil.call(editorDiv.closest('.anvil-container'), 'redo_change'));\n      addButtonListener('textEditor-button-bold', () => { document.execCommand('bold', false, null); window.updateToolbarState(); });\n      addButtonListener('textEditor-button-italic', () => { document.execCommand('italic', false, null); window.updateToolbarState(); });\n      addButtonListener('textEditor-button-underline', () => { document.execCommand('underline', false, null); window.updateToolbarState(); });\n      addButtonListener('textEditor-button-alignLeft', () => { window.applyAlignment('left'); window.updateToolbarState(); });\n      addButtonListener('textEditor-button-alignCenter', () => { window.applyAlignment('center'); window.updateToolbarState(); });\n      addButtonListener('textEditor-button-alignRight', () => { window.applyAlignment('right'); window.updateToolbarState(); });\n      addButtonListener('textEditor-button-copy', window.copyEditorContent);\n      addButtonListener('textEditor-button-export', () => anvil.call(editorDiv.closest('.anvil-container'), 'export_content'));\n\n      const imageFileInput = document.getElementById('image-file-input');\n      if (imageFileInput) {\n        const newFileInput = imageFileInput.cloneNode(true);\n        imageFileInput.parentNode.replaceChild(newFileInput, imageFileInput);\n        newFileInput.addEventListener('change', window.handleFileSelect);\n      }\n\n      addButtonListener('textEditor-button-insertImage', () => {\n        const fileInput = document.getElementById('image-file-input');\n        if (fileInput) fileInput.click();\n      });\n\n      if (!editorDiv.dataset.stateListenersAttached) {\n        editorDiv.dataset.stateListenersAttached = 'true';\n        editorDiv.addEventListener('mouseup', window.updateToolbarState);\n        editorDiv.addEventListener('keyup', window.updateToolbarState);\n        editorDiv.addEventListener('focus', window.updateToolbarState);\n      }\n\n      if (!editorDiv.dataset.blurAttached) {\n        editorDiv.dataset.blurAttached = 'true';\n        editorDiv.addEventListener('blur', () => {\n          anvil.call(editorDiv.closest('.anvil-container'), 'on_blur_handler');\n        });\n      }\n    };\n  }\n</script>"
    visible: true
  type: HtmlTemplate
custom_component: true
is_package: true
properties:
- {default_binding_prop: true, default_value: true, important: true, name: show_image_button, type: boolean}
- {default_value: true, important: true, name: show_style_buttons, type: boolean}
- {default_value: true, important: true, name: show_copy_button, type: boolean}
- {default_value: true, important: true, name: show_align_buttons, type: boolean}
- {default_value: false, important: true, name: show_undo_redo_buttons, type: boolean}
- {default_value: '', important: true, name: show_export_button, type: string}
