components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Viewport responsive -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Audio Manager – Secretariat Edit (Revamped)</title>\n  <style>\n    /****************************************************\n     *  Basic Layout + Container\n     ****************************************************/\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      overflow: hidden;\n    }\n    .container {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      width: 100%;\n      max-width: 800px;\n      margin: 0 auto;\n      background: #fff;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    /****************************************************\n     *  Back Bar\n     ****************************************************/\n    .retour-bar {\n      background: #e5e5e5;\n      padding: 15px 20px;\n      cursor: pointer;\n      font-size: 16px;\n      text-align: center;\n      border-bottom: 1px solid #ddd;\n      user-select: none;\n    }\n\n    /****************************************************\n     *  Scrollable Content\n     ****************************************************/\n    .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n      padding-bottom: 80px; /* space for bottom buttons */\n    }\n\n    /****************************************************\n     *  AUDIO SECTION\n     ****************************************************/\n    .audio-section {\n      background: #fff;\n      padding: 20px;\n      border-radius: 8px;\n      margin-bottom: 20px;\n      position: relative;\n    }\n    #audioBar {\n      width: 100%;\n      background-color: #4caf50;\n      color: #fff;\n      text-align: center;\n      padding: 15px;\n      font-size: 18px;\n      cursor: pointer;\n      margin-bottom: 20px;\n      border-radius: 5px;\n    }\n\n    .recording-controls {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 20px auto;\n    }\n    #circularProgress {\n      position: relative;\n      width: 200px;\n      height: 200px;\n    }\n    #progressRing {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background: conic-gradient(#ddd 0deg, #ddd 0deg);\n    }\n    #centerHole {\n      position: absolute;\n      top: 8px;\n      left: 8px;\n      width: 184px;\n      height: 184px;\n      background: #fff;\n      border-radius: 50%;\n      z-index: 1;\n    }\n    .control-button-group {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 30px;\n      z-index: 2;\n    }\n    .control-button {\n      width: 45px;\n      height: 45px;\n      border: 1px solid #666;\n      border-radius: 2px;\n      cursor: pointer;\n      background: #fff;\n      color: #666;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 24px;\n      transition: all 0.3s ease;\n      padding: 0;\n    }\n    .control-button:hover {\n      background: #f5f5f5;\n      border-color: #333;\n      color: #333;\n    }\n\n    @keyframes recordingFlash {\n      0%   { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n      50%  { background: conic-gradient(#fff 0deg, #fff 360deg); }\n      100% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n    }\n    .recording-flash {\n      animation: recordingFlash 1.5s infinite;\n    }\n    /* Hidden audio element */\n    #audioPlayback {\n      display: none;\n    }\n\n    /****************************************************\n     *  EDITOR SECTION\n     ****************************************************/\n    .editor-section {\n      background: #fff;\n      border-radius: 8px;\n      overflow: hidden;\n    }\n    #toolbar {\n      padding: 10px;\n      background: #f8f8f8;\n      border-bottom: 1px solid #ddd;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 5px;\n      align-items: center;\n    }\n    .toolbar-button {\n      padding: 6px 12px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: #fff;\n      cursor: pointer;\n    }\n    .toolbar-button:hover {\n      background: #f5f5f5;\n    }\n    #editor {\n      min-height: 300px;\n      padding: 20px;\n      border: 1px solid #ddd;\n      overflow-y: auto;\n      font-size: 16px;\n      line-height: 1.5;\n    }\n\n    /****************************************************\n     *  BOTTOM BUTTONS\n     ****************************************************/\n    .bottom-buttons {\n      position: fixed;\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 800px;\n      max-width: 100%;\n      background: #fff;\n      padding: 15px 20px;\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      border-top: 1px solid #ddd;\n      box-shadow: 0 -2px 4px rgba(0,0,0,0.1);\n      z-index: 10;\n    }\n    .bottom-button {\n      padding: 10px 30px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: #fff;\n      cursor: pointer;\n      font-size: 14px;\n      transition: all 0.2s ease;\n    }\n    .bottom-button:hover {\n      background: #f5f5f5;\n      border-color: #999;\n    }\n\n    /****************************************************\n     *  NOTIFICATION BANNERS\n     ****************************************************/\n    #bannerContainer {\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      z-index: 2000;\n    }\n    .banner {\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      transition: opacity 0.3s ease;\n    }\n    .banner-success {\n      background-color: #4caf50;\n    }\n    .banner-error {\n      background-color: #f44336;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- Back bar -->\n    <div class=\"retour-bar\" id=\"retourBar\">← Back</div>\n\n    <!-- Scrollable content -->\n    <div class=\"scrollable-content\">\n      <!-- AUDIO SECTION -->\n      <div class=\"audio-section\">\n        <!-- This button re-runs AI on the existing transcript (if you implement similar logic in Python) -->\n        <div id=\"audioBar\">Relaunch AI from my audio</div>\n        \n        <div class=\"recording-controls\">\n          <div id=\"circularProgress\">\n            <div id=\"progressRing\"></div>\n            <div id=\"centerHole\"></div>\n            <div class=\"control-button-group\">\n              <!-- Start/Pause -->\n              <button id=\"playButton\" class=\"control-button\">\n                <!-- Microphone icon -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                  <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n                  <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n                  <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n                </svg>\n              </button>\n              <!-- Stop -->\n              <button id=\"stopButton\" class=\"control-button\">\n                <!-- Checkmark icon -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n                  <path d=\"M4 12l5 5L20 7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n        <audio id=\"audioPlayback\"></audio>\n      </div>\n\n      <!-- EDITOR SECTION -->\n      <div class=\"editor-section\">\n        <div id=\"toolbar\">\n          <button onclick=\"formatDoc('bold')\" class=\"toolbar-button\"><b>B</b></button>\n          <button onclick=\"formatDoc('italic')\" class=\"toolbar-button\"><i>I</i></button>\n          <button onclick=\"formatDoc('underline')\" class=\"toolbar-button\"><u>U</u></button>\n          <button onclick=\"formatDoc('justifyleft')\" class=\"toolbar-button\">Left</button>\n          <button onclick=\"formatDoc('justifycenter')\" class=\"toolbar-button\">Center</button>\n          <button onclick=\"formatDoc('justifyright')\" class=\"toolbar-button\">Right</button>\n          <button onclick=\"insertImage()\" class=\"toolbar-button\">Image</button>\n          <span style=\"margin-left:auto;\"></span>\n          <button onclick=\"copyEditorContent()\" class=\"toolbar-button\">Copy</button>\n        </div>\n        <div id=\"editor\" contenteditable=\"true\"></div>\n      </div>\n    </div>\n\n    <!-- Bottom buttons -->\n    <div class=\"bottom-buttons\">\n      <button class=\"bottom-button\" id=\"statutButton\" data-click=\"statut\">Status</button>\n      <button class=\"bottom-button\" id=\"archiverButton\" data-click=\"update\">Archive</button>\n      <button class=\"bottom-button\" id=\"partagerButton\" data-click=\"partager\">Share</button>\n    </div>\n  </div>\n\n  <!-- Notification Banner Container -->\n  <div id=\"bannerContainer\"></div>\n\n  <!-- PDF libraries if needed -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n\n  <script>\n    /****************************************************\n     * 1) GLOBALS & UTILITIES\n     ****************************************************/\n    console.log(\"=== Loading revamped EN_AudioManagerEditSecretariat HTML/JS ===\");\n\n    // Prevent double-definition\n    if (!window.__my_audio_manager_globals_en_secretariat) {\n      window.__my_audio_manager_globals_en_secretariat = true;\n\n      // Audio manager state\n      window.audioManagerData = {\n        mediaRecorder: null,\n        recordedChunks: [],\n        audioBlob: null,\n        stream: null,\n        isRecording: false\n      };\n\n      // Transcription progress\n      window.transcriptionProgressData = {\n        currentProgress: 0,\n        intervalId: null\n      };\n\n      // Convert blob -> base64\n      window.blobToBase64 = function(blob) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            const base64 = reader.result.split(\",\")[1];\n            resolve(base64);\n          };\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        });\n      };\n\n      // Conic gradient ring\n      window.setRingPercentage = function(percentage) {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (!ringElem) return;\n        const clamped = Math.max(0, Math.min(100, percentage));\n        const angle = (clamped / 100) * 360;\n        ringElem.style.background = `conic-gradient(#4caf50 ${angle}deg, #ddd ${angle}deg)`;\n      };\n\n      // Animate from 0..90% while waiting\n      window.simulateTranscriptionProgress = function() {\n        const data = window.transcriptionProgressData;\n        data.currentProgress = 0;\n        window.setRingPercentage(0);\n        data.intervalId = setInterval(() => {\n          if (data.currentProgress < 90) {\n            data.currentProgress += 2;\n            window.setRingPercentage(data.currentProgress);\n          } else {\n            clearInterval(data.intervalId);\n          }\n        }, 300);\n      };\n\n      window.finishTranscriptionProgress = function() {\n        const data = window.transcriptionProgressData;\n        clearInterval(data.intervalId);\n        data.currentProgress = 100;\n        window.setRingPercentage(100);\n      };\n\n      // Flash ring while recording\n      window.startRecordingFlash = function() {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (ringElem) ringElem.classList.add(\"recording-flash\");\n      };\n      window.stopRecordingFlash = function() {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (ringElem) ringElem.classList.remove(\"recording-flash\");\n      };\n\n      // Exec commands on the editor\n      window.formatDoc = function(cmd) {\n        document.execCommand(cmd, false, null);\n      };\n\n      // Insert image\n      window.insertImage = function() {\n        const input = document.createElement(\"input\");\n        input.type = \"file\";\n        input.accept = \"image/*\";\n        input.onchange = function(e) {\n          const file = e.target.files[0];\n          if (!file) return;\n          const reader = new FileReader();\n          reader.onload = function(evt) {\n            const img = document.createElement(\"img\");\n            img.src = evt.target.result;\n            img.style.maxWidth = \"100%\";\n            img.dataset.referenceId = \"img_\" + Date.now();\n            const editorEl = document.getElementById(\"editor\");\n            if (editorEl) editorEl.appendChild(img);\n          };\n          reader.readAsDataURL(file);\n        };\n        input.click();\n      };\n\n      // Copy all editor content\n      window.copyEditorContent = function() {\n        const editor = document.getElementById(\"editor\");\n        if (!editor) return;\n        const range = document.createRange();\n        range.selectNodeContents(editor);\n        const sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n        try {\n          document.execCommand(\"copy\");\n          displayBanner(\"Content copied!\", \"success\");\n        } catch (err) {\n          console.error(\"Error copying content =>\", err);\n        }\n        sel.removeAllRanges();\n      };\n\n      // Display banner\n      window.displayBanner = function(message, type) {\n        const container = document.getElementById(\"bannerContainer\");\n        if (!container) return;\n        const banner = document.createElement(\"div\");\n        banner.className = \"banner \" + (type === \"success\" ? \"banner-success\" : \"banner-error\");\n        banner.textContent = message;\n        container.appendChild(banner);\n\n        setTimeout(() => {\n          banner.style.opacity = \"0\";\n          setTimeout(() => {\n            if (banner.parentNode) banner.parentNode.removeChild(banner);\n          }, 300);\n        }, 3000);\n      };\n\n      // Editor getters for python bridging\n      window.getEditorContent = function() {\n        const editor = document.getElementById(\"editor\");\n        return editor ? editor.innerHTML : \"\";\n      };\n      window.setEditorContent = function(value) {\n        const editor = document.getElementById(\"editor\");\n        if (editor) editor.innerHTML = value || \"\";\n      };\n\n      // Send audio to python function\n      window.processRecording = async function(blob) {\n        try {\n          window.simulateTranscriptionProgress();\n          const base64Audio = await window.blobToBase64(blob);\n          const stopBtn = document.getElementById(\"stopButton\");\n          anvil.call(stopBtn, \"process_recording\", base64Audio)\n            .then(() => {\n              window.finishTranscriptionProgress();\n              window.audioManagerData.audioBlob = blob;\n              window.lastAudioBlob = blob;\n            })\n            .catch(error => {\n              console.error(\"Error process_recording =>\", error);\n              alert(\"Error processing the recording.\");\n              window.finishTranscriptionProgress();\n            });\n        } catch (e) {\n          console.error(\"Exception converting blob =>\", e);\n          alert(\"Error converting the audio blob to base64.\");\n          window.finishTranscriptionProgress();\n        }\n      };\n    }\n\n    /****************************************************\n     * 2) ATTACH EVENT LISTENERS\n     ****************************************************/\n    window.__attachAudioManagerEventsEN = function() {\n      console.log(\"=== Attaching event listeners for EN_AudioManagerEditSecretariat (revamped) ===\");\n      const data = window.audioManagerData;\n\n      // \"Back\" bar\n      const retourBar = document.getElementById(\"retourBar\");\n      if (retourBar) {\n        retourBar.replaceWith(retourBar.cloneNode(true));\n        const newRetourBar = document.getElementById(\"retourBar\");\n        newRetourBar.addEventListener(\"click\", e => {\n          anvil.call(e.target, \"retour_clicked\");\n        });\n      }\n\n      // \"Relaunch AI\" bar\n      const audioBar = document.getElementById(\"audioBar\");\n      if (audioBar) {\n        audioBar.replaceWith(audioBar.cloneNode(true));\n        const newAudioBar = document.getElementById(\"audioBar\");\n        newAudioBar.addEventListener(\"click\", e => {\n          // Calls the server method \"relaunch_ai\" if you implement it\n          anvil.call(e.target, \"relaunch_ai\");\n        });\n      }\n\n      // Start/Pause button\n      const playButton = document.getElementById(\"playButton\");\n      if (playButton) {\n        playButton.replaceWith(playButton.cloneNode(true));\n      }\n      const newPlayButton = document.getElementById(\"playButton\");\n\n      // Stop button\n      const stopButton = document.getElementById(\"stopButton\");\n      if (stopButton) {\n        stopButton.replaceWith(stopButton.cloneNode(true));\n      }\n      const newStopButton = document.getElementById(\"stopButton\");\n\n      // Icons\n      window.micIconHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n          <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n          <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n          <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n        </svg>\n      `;\n      window.pauseIconHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n          <rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/>\n          <path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n        </svg>\n      `;\n\n      if (newPlayButton) {\n        newPlayButton.addEventListener(\"click\", async evt => {\n          // if not recording => start or resume\n          if (!data.isRecording) {\n            if (data.mediaRecorder && data.mediaRecorder.state === \"inactive\") {\n              data.mediaRecorder = null;\n            }\n            if (!data.mediaRecorder) {\n              try {\n                data.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                data.mediaRecorder = new MediaRecorder(data.stream);\n                data.recordedChunks = [];\n                data.mediaRecorder.ondataavailable = e => data.recordedChunks.push(e.data);\n                data.mediaRecorder.start();\n                data.isRecording = true;\n                newPlayButton.innerHTML = window.pauseIconHTML;\n                anvil.call(evt.target, \"start_recording\");\n                window.startRecordingFlash();\n              } catch (err) {\n                console.error(\"Microphone error:\", err);\n                anvil.call(evt.target, \"show_error\", \"Microphone access was denied or unavailable.\");\n              }\n            } else if (data.mediaRecorder.state === \"paused\") {\n              data.mediaRecorder.resume();\n              data.isRecording = true;\n              newPlayButton.innerHTML = window.pauseIconHTML;\n              anvil.call(evt.target, \"start_recording\");\n            }\n          } else {\n            // if recording => pause\n            if (data.mediaRecorder && data.mediaRecorder.state === \"recording\") {\n              data.mediaRecorder.pause();\n              data.isRecording = false;\n              newPlayButton.innerHTML = window.micIconHTML;\n              anvil.call(evt.target, \"pause_recording\");\n            }\n          }\n        });\n      }\n\n      if (newStopButton) {\n        newStopButton.addEventListener(\"click\", evt => {\n          if (data.mediaRecorder && data.mediaRecorder.state !== \"inactive\") {\n            data.mediaRecorder.onstop = () => {\n              data.audioBlob = new Blob(data.recordedChunks, { type: \"audio/webm\" });\n              const audioPlayback = document.getElementById(\"audioPlayback\");\n              if (audioPlayback) {\n                const audioURL = URL.createObjectURL(data.audioBlob);\n                audioPlayback.src = audioURL;\n                audioPlayback.load();\n              }\n              window.processRecording(data.audioBlob);\n              anvil.call(evt.target, \"stop_recording\");\n              window.stopRecordingFlash();\n            };\n            data.mediaRecorder.stop();\n            data.isRecording = false;\n            if (newPlayButton) newPlayButton.innerHTML = window.micIconHTML;\n          }\n        });\n      }\n\n      // Bottom buttons (Status, Archive, Share)\n      const bottomButtons = document.querySelectorAll(\".bottom-button\");\n      bottomButtons.forEach(btn => {\n        btn.removeEventListener(\"click\", btn.__listener);\n        const newListener = function(e) {\n          const action = e.currentTarget.dataset.click;\n          if (action === \"statut\") {\n            anvil.call(e.currentTarget, \"on_statut_clicked\").then(chosenStatut => {\n              if (chosenStatut) {\n                e.currentTarget.textContent = chosenStatut;\n              }\n            });\n          } else if (action === \"update\") {\n            // Archive => call update_report\n            const contentJSON = JSON.stringify({ content: window.getEditorContent() });\n            const images = Array.from(document.querySelectorAll(\"#editor img\")).map(img => ({\n              media: img.src,\n              reference_id: img.dataset.referenceId || (\"img_\" + Date.now()),\n              position: img.offsetTop.toString()\n            }));\n            anvil.call(e.currentTarget, \"update_report\", e.currentTarget.textContent, contentJSON, images);\n          } else if (action === \"partager\") {\n            // Future dev\n            displayBanner(\"Functionality under development (Secretariat – EN)\", \"success\");\n          }\n        };\n        btn.__listener = newListener;\n        btn.addEventListener(\"click\", newListener);\n      });\n\n      console.log(\"=== Done attaching event listeners for EN_AudioManagerEditSecretariat form ===\");\n    };\n\n    /****************************************************\n     * 3) INIT ON LOAD\n     ****************************************************/\n    console.log(\"Calling __attachAudioManagerEventsEN() for Secretariat (EN) now...\");\n    window.__attachAudioManagerEventsEN();\n\n    // Handle session refresh on visibility or online changes\n    if (!window.__session_handlers_initialized_en_secretariat) {\n      window.__session_handlers_initialized_en_secretariat = true;\n      document.addEventListener(\"visibilitychange\", () => {\n        if (document.visibilityState === \"visible\") {\n          anvil.call(document.body, \"refresh_session_relay\");\n        }\n      });\n      window.addEventListener(\"online\", () => {\n        anvil.call(document.body, \"refresh_session_relay\");\n      });\n    }\n\n    console.log(\"=== EN_AudioManagerEditSecretariat (Revamped) HTML/JS fully loaded ===\");\n  </script>\n</body>\n</html>\n"
  type: HtmlTemplate
is_package: true
