components: []
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>Mobile Installation Guide</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 0; background-color: #f5f5f5; }
            .container { position: relative; width: 100%; height: 100vh; display: flex; align-items: center; justify-content: center; }

            .modal {
              position: fixed;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              background: white;
              padding: 20px;
              border-radius: 8px;
              box-shadow: 0 4px 10px rgba(0,0,0,0.2);
              width: 90%;
              max-width: 500px;
              max-height: 90vh;
              z-index: 1000;
              display: none;
              flex-direction: column;
            }
            .modal.active { display: flex; }

            .modal-content {
              overflow-y: auto;
              padding-right: 15px; /* for scrollbar */
            }

            .modal h2 { margin-top: 0; margin-bottom: 10px; font-size: 22px; }
            .modal p { margin-bottom: 15px; color: #666; font-size: 16px; line-height: 1.5; }
            .modal img {
              max-width: 100%;
              height: auto;
              border-radius: 5px;
              border: 1px solid #eee;
              margin-bottom: 15px;
              display: block;
            }

            .button-group {
              display: flex;
              gap: 10px;
              margin-top: auto; /* Pushes buttons to the bottom */
              padding-top: 20px;
              border-top: 1px solid #eee;
            }
            .custom-button {
              padding: 10px 20px;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
              font-size: 14px;
              font-weight: 500;
              transition: background-color 0.3s;
            }
            .btn-primary {
              background-color: #4CAF50;
              color: white;
              border-color: #4CAF50;
              margin-left: auto; /* Pushes primary button to the right */
            }
            .btn-primary:hover { background-color: #45a049; }
            .btn-secondary { background-color: #f0f0f0; color: #333; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="modal" id="guide-modal">
              <div class="modal-content">
                <h2 id="guide-title"></h2>
                <p id="guide-text"></p>
                <img id="guide-image" src="" alt="Installation step instruction">
              </div>
              <div class="button-group">
                <button id="guide-back-btn" class="custom-button btn-secondary">Back</button>
                <button id="guide-next-btn" class="custom-button btn-primary">Next</button>
                <button id="guide-finish-btn" class="custom-button btn-primary">I've Installed It</button>
              </div>
            </div>
          </div>

          <script>
            if (!window.__installation_flow_globals) {
              window.__installation_flow_globals = true;

              const logger = window.createLogger('InstallationFlow');
              let guideSteps = [];
              let currentStepIndex = 0;

              window.detect_environment = function() {
                const ua = navigator.userAgent;
                const platform = navigator.platform;
                let os = 'android'; // Default fallback
                let browser = 'chrome'; // Default fallback

                if (/iPad|iPhone|iPod/.test(ua) || (platform === 'MacIntel' && navigator.maxTouchPoints > 1)) {
                  os = 'ios';
                  browser = /CriOS/.test(ua) ? 'chrome' : 'safari'; // Check for Chrome on iOS
                } else if (/Android/.test(ua)) {
                  os = 'android';
                  browser = 'chrome'; // Assume Chrome for Android for simplicity
                }

                logger.log(`Detected Environment: OS=${os}, Browser=${browser}`);
                return { os, browser };
              };

              window.render_guide = function(steps, buttonTexts) {
                if (!steps || steps.length === 0) {
                  logger.error("Render guide called with no steps. Aborting render.");
                  return;
                }
                logger.log(`Received ${steps.length} steps to render.`, { buttons: buttonTexts });
                guideSteps = steps;
                currentStepIndex = 0;

                document.getElementById('guide-back-btn').textContent = buttonTexts.back;
                document.getElementById('guide-next-btn').textContent = buttonTexts.next;
                document.getElementById('guide-finish-btn').textContent = buttonTexts.finish;

                display_current_step();
                window.openModal('guide-modal');
              };

              function display_current_step() {
                const step = guideSteps[currentStepIndex];
                if (!step) return;

                logger.debug(`Displaying step ${currentStepIndex + 1}/${guideSteps.length}: "${step.title}"`);

                document.getElementById('guide-title').textContent = step.title;
                document.getElementById('guide-text').textContent = step.text;
                document.getElementById('guide-image').src = step.image;
                document.getElementById('guide-image').alt = step.title;

                document.getElementById('guide-back-btn').style.display = currentStepIndex > 0 ? 'block' : 'none';
                document.getElementById('guide-next-btn').style.display = currentStepIndex < guideSteps.length - 1 ? 'block' : 'none';
                document.getElementById('guide-finish-btn').style.display = currentStepIndex === guideSteps.length - 1 ? 'block' : 'none';
              }

              function attachGuideEvents() {
                const container = document.querySelector('.container');

                document.getElementById('guide-back-btn').addEventListener('click', () => {
                  logger.debug("Back button clicked.");
                  if (currentStepIndex > 0) {
                    currentStepIndex--;
                    display_current_step();
                  }
                });

                document.getElementById('guide-next-btn').addEventListener('click', () => {
                  logger.debug("Next button clicked.");
                  if (currentStepIndex < guideSteps.length - 1) {
                    currentStepIndex++;
                    display_current_step();
                  }
                });

                document.getElementById('guide-finish-btn').addEventListener('click', () => {
                  logger.log("Finish button clicked, calling python `installation_complete_click`.");
                  anvil.call(container, 'installation_complete_click');
                });
                logger.log("Installation guide event listeners attached.");
              }

              attachGuideEvents();
            }
          </script>
        </body>
      </html>
  type: HtmlTemplate
is_package: true
