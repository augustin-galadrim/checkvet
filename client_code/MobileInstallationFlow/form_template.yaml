components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Mobile Installation Guide</title>\n    <style>\n      body { font-family: Arial, sans-serif; margin: 0; background-color: #f5f5f5; }\n      .container { position: relative; width: 100%; height: 100vh; display: flex; align-items: center; justify-content: center; }\n\n      /* --- FINAL MODAL STYLE --- */\n      /* This is the full-screen semi-transparent overlay */\n      .modal {\n        display: none;\n        position: fixed;\n        z-index: 1000;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0,0,0,0.4);\n\n        /* THIS IS THE KEY CHANGE: The overlay itself is now scrollable */\n        overflow-y: auto; \n\n        /* Add some padding so the modal doesn't touch the screen edges when scrolling */\n        padding: 20px 0;\n      }\n      .modal.active { display: block; } /* Use block instead of flex to allow natural scrolling flow */\n\n      /* This is the white content box */\n      .modal-content {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        box-shadow: 0 4px 10px rgba(0,0,0,0.2);\n        width: 90%;\n        max-width: 500px;\n\n        /* Center the modal horizontally */\n        margin: auto; \n\n        /* The height is now determined by its content, no max-height */\n      }\n\n      .modal h2 { margin-top: 0; margin-bottom: 10px; font-size: 22px; }\n      .modal p { margin-bottom: 15px; color: #666; font-size: 16px; line-height: 1.5; }\n      .modal img {\n        max-width: 100%;\n        height: auto;\n        border-radius: 5px;\n        border: 1px solid #eee;\n        margin-bottom: 15px;\n        display: block;\n      }\n\n      .button-group {\n        display: flex;\n        gap: 10px;\n        margin-top: 20px; /* Use margin instead of flex auto */\n        padding-top: 20px;\n        border-top: 1px solid #eee;\n      }\n      .custom-button {\n        padding: 10px 20px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: 500;\n        transition: background-color 0.3s;\n      }\n      .btn-primary {\n        background-color: #4CAF50;\n        color: white;\n        border-color: #4CAF50;\n        margin-left: auto; /* Pushes primary button to the right */\n      }\n      .btn-primary:hover { background-color: #45a049; }\n      .btn-secondary { background-color: #f0f0f0; color: #333; }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <!-- This is the scrollable overlay -->\n      <div class=\"modal\" id=\"guide-modal\">\n        <!-- This is the centered white box -->\n        <div class=\"modal-content\">\n          <!-- Content is now directly inside, no extra scroll wrapper -->\n          <h2 id=\"guide-title\"></h2>\n          <p id=\"guide-text\"></p>\n          <img id=\"guide-image\" src=\"\" alt=\"Installation step instruction\">\n\n          <!-- Buttons are inside the white box -->\n          <div class=\"button-group\">\n            <button id=\"guide-back-btn\" class=\"custom-button btn-secondary\">Back</button>\n            <button id=\"guide-next-btn\" class=\"custom-button btn-primary\">Next</button>\n            <button id=\"guide-finish-btn\" class=\"custom-button btn-primary\">I've Installed It</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <script>\n      if (!window.__installation_flow_globals) {\n        window.__installation_flow_globals = true;\n\n        const logger = window.createLogger('InstallationFlow');\n        let guideSteps = [];\n        let currentStepIndex = 0;\n\n        // This JS function is generic and does not need to change\n        window.detect_environment = function() {\n          const ua = navigator.userAgent;\n          const platform = navigator.platform;\n          let os = 'android';\n          let browser = 'chrome';\n          if (/iPad|iPhone|iPod/.test(ua) || (platform === 'MacIntel' && navigator.maxTouchPoints > 1)) {\n            os = 'ios';\n            browser = /CriOS/.test(ua) ? 'chrome' : 'safari';\n          } else if (/Android/.test(ua)) {\n            os = 'android';\n            browser = 'chrome';\n          }\n          logger.log(`Detected Environment: OS=${os}, Browser=${browser}`);\n          return { os, browser };\n        };\n\n        // This JS function is generic and does not need to change\n        window.render_guide = function(steps, buttonTexts) {\n          if (!steps || steps.length === 0) {\n            logger.error(\"Render guide called with no steps. Aborting render.\");\n            return;\n          }\n          logger.log(`Received ${steps.length} steps to render.`, { buttons: buttonTexts });\n          guideSteps = steps;\n          currentStepIndex = 0;\n\n          document.getElementById('guide-back-btn').textContent = buttonTexts.back;\n          document.getElementById('guide-next-btn').textContent = buttonTexts.next;\n          document.getElementById('guide-finish-btn').textContent = buttonTexts.finish;\n\n          display_current_step();\n          window.openModal('guide-modal');\n        };\n\n        // This JS function is generic and does not need to change\n        function display_current_step() {\n          const step = guideSteps[currentStepIndex];\n          if (!step) return;\n          logger.debug(`Displaying step ${currentStepIndex + 1}/${guideSteps.length}: \"${step.title}\"`);\n          document.getElementById('guide-title').textContent = step.title;\n          document.getElementById('guide-text').textContent = step.text;\n          document.getElementById('guide-image').src = step.image;\n          document.getElementById('guide-image').alt = step.title;\n          document.getElementById('guide-back-btn').style.display = currentStepIndex > 0 ? 'block' : 'none';\n          document.getElementById('guide-next-btn').style.display = currentStepIndex < guideSteps.length - 1 ? 'block' : 'none';\n          document.getElementById('guide-finish-btn').style.display = currentStepIndex === guideSteps.length - 1 ? 'block' : 'none';\n        }\n\n        // This JS function is generic and does not need to change\n        function attachGuideEvents() {\n          const container = document.querySelector('.container');\n          document.getElementById('guide-back-btn').addEventListener('click', () => {\n            logger.debug(\"Back button clicked.\");\n            if (currentStepIndex > 0) { currentStepIndex--; display_current_step(); }\n          });\n          document.getElementById('guide-next-btn').addEventListener('click', () => {\n            logger.debug(\"Next button clicked.\");\n            if (currentStepIndex < guideSteps.length - 1) { currentStepIndex++; display_current_step(); }\n          });\n          document.getElementById('guide-finish-btn').addEventListener('click', () => {\n            logger.log(\"Finish button clicked, calling python `installation_complete_click`.\");\n            anvil.call(container, 'installation_complete_click');\n          });\n          logger.log(\"Installation guide event listeners attached.\");\n        }\n        attachGuideEvents();\n      }\n    </script>\n  </body>\n</html>"
  type: HtmlTemplate
is_package: true
