components:
- layout_properties: {slot: time_display_slot}
  name: time_display_1
  properties: {}
  type: form:Components.TimeDisplay
- event_bindings: {x_save_clicked: report_footer_1_save_clicked, x_status_clicked: report_footer_1_status_clicked}
  layout_properties: {slot: bottom_buttons_slot}
  name: report_footer_1
  properties: {}
  type: form:Components.ReportFooter
- event_bindings: {}
  layout_properties: {slot: playback_slot}
  name: audio_playback_1
  properties: {}
  type: form:Components.AudioPlayback
- layout_properties: {slot: editor_slot}
  name: text_editor_1
  properties: {show_undo_redo_buttons: true}
  type: form:Components.TextEditor
- data_bindings:
  - {code: '', property: item, writeback: false}
  event_bindings: {}
  layout_properties: {slot: recorder_slot}
  name: recording_widget
  properties: {}
  type: form:Components.RecordingWidget
- layout_properties: {slot: default}
  name: header_nav_1
  properties: {active_tab: Production}
  type: form:Components.HeaderNav
- layout_properties: {slot: feedback_slot}
  name: user_feedback_1
  properties: {}
  type: form:Components.UserFeedback
- data_bindings: []
  event_bindings: {x_import_item: queue_manager_1_x_import_item}
  layout_properties: {slot: queue}
  name: queue_manager_1
  properties: {disable_import: false}
  type: form:Components.QueueManager
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <!-- Responsive for mobile devices -->
          <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
          <title>Audio Management Interface</title>

          <!-- External libraries for iOS compatibility and functionality -->
          <script src="https://www.webrtc-experiment.com/RecordRTC.js"></script>
          <script src="https://cdnjs.cloudflare.com/ajax/libs/nosleep/0.12.0/NoSleep.min.js"></script>

          <style>
            /* =====================================================
            Variables & Basic styles
            ===================================================== */
            :root {
              /*
              * FIX: Use a CSS variable for footer height to avoid 'magic numbers'.
              * This makes the layout easier to maintain.
              */
              --footer-height: 75px;
            }
            * {
              box-sizing: border-box;
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 0;
            }
            body {
              background-color: #f5f5f5;
              height: 100vh;
              overflow: hidden;
            }
            .container {
              display: flex;
              flex-direction: column;
              height: 100vh;
              width: 100%;
              max-width: 800px;
              margin: 0 auto;
              background-color: white;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            /* =====================================================
            Fixed section (tabs + actions)
            ===================================================== */
            .actions-row {
              display: flex;
              align-items: center;
              padding: 15px 20px;
            }
            .actions-row > [anvil-slot="time_display_slot"] {
              margin-left: auto;
            }
            /* =====================================================
            Scrollable content
            ===================================================== */
            .scrollable-content {
              flex: 1;
              overflow-y: auto;
              -webkit-overflow-scrolling: touch;
              /* FIX: Use the variable for bottom padding to avoid overlap with the footer. */
              padding: 20px 20px var(--footer-height) 20px;
            }

            /* =====================================================
            Audio Section
            ===================================================== */
            .audio-section {
              position: relative; /* FIX: Establishes a positioning context for any absolutely positioned children. */
              display: flex;
              flex-direction: column;
              align-items: center;
              justify-content: center;
              /*
              * FIX: Set a minimum height to prevent layout jumps.
              * This stabilizes the UI when switching between the recorder, spinner, and playback controls.
              */
              min-height: 250px;
            }

            /* State Containers: One for each step of the workflow */
            #audioInputContainer,
            #audioDecisionContainer,
            #audioProcessingContainer {
              width: 100%;
              display: none; /* Hidden by default; JS makes one visible at a time */
            }
            #audioDecisionContainer {
              display: flex; /* Overridden by JS when active */
              flex-direction: column;
              align-items: center;
              gap: 15px;
            }

            /* --- Slide Toggle for Record/Upload --- */
            .slide-toggle-container {
              display: flex;
              position: relative;
              width: 320px;
              margin: 20px auto;
              background-color: #f0f0f0;
              border-radius: 25px;
              padding: 5px;
              border: 1px solid #ddd;
            }
            .toggle-option {
              flex: 1;
              text-align: center;
              padding: 10px 0;
              cursor: pointer;
              color: #555;
              font-weight: 500;
              z-index: 2; /* Keep text above the slider */
              transition: color 0.3s ease;
              user-select: none;
            }
            .toggle-option.active {
              color: #ffffff;
            }
            .toggle-slider {
              position: absolute;
              top: 5px;
              left: 5px;
              height: calc(100% - 10px);
              width: calc(50% - 5px);
              background-color: #4CAF50;
              border-radius: 25px;
              transition: transform 0.3s ease-in-out;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              z-index: 1;
            }
            .slide-toggle-container.upload-active .toggle-slider {
              transform: translateX(100%);
            }

            /* --- Upload Area Styling --- */
            .upload-section {
              margin: 20px auto;
              max-width: 400px;
              display: flex;
              flex-direction: column;
              align-items: center;
            }
            .upload-container {
              width: 100%;
              border: 2px dashed #aaa;
              border-radius: 10px;
              padding: 20px;
              text-align: center;
              background-color: #f8f8f8;
              transition: all 0.3s ease;
              cursor: pointer;
              margin-bottom: 15px;
            }
            .upload-container:hover, .upload-container.dragover {
              border-color: #4CAF50;
              background-color: #f0f9f0;
            }
            .upload-icon {
              font-size: 40px;
              color: #666;
              margin-bottom: 10px;
            }
            .upload-text {
              font-size: 16px;
              margin-bottom: 5px;
            }
            .upload-description {
              color: #666;
              font-size: 14px;
              margin-bottom: 15px;
            }
            .upload-button {
              background-color: #4CAF50;
              color: white;
              border: none;
              padding: 10px 20px;
              border-radius: 5px;
              font-size: 16px;
              cursor: pointer;
            }
            #audioFileInput {
              display: none;
            }

            /* --- Decision Buttons (Process/Discard) --- */
            .decision-button {
              padding: 10px 20px;
              border-radius: 4px;
              border: 1px solid #ddd;
              cursor: pointer;
              font-size: 14px;
              font-weight: bold;
            }
            .decision-button.process {
              background-color: #4CAF50;
              color: white;
              border-color: #4CAF50;
            }
            .decision-button.discard {
              background-color: #f44336;
              color: white;
              border-color: #f44336;
            }

            /* =====================================================
            Settings & Parameters Section
            ===================================================== */
            .parameters-section {
              background: white;
              padding: 20px;
              border-radius: 8px;
              margin-bottom: 20px;
            }
            .parameter-row {
              display: flex;
              justify-content: space-between;
              align-items: center;
              margin-bottom: 15px;
            }
            .parameter-row label {
              font-weight: bold;
              margin-right: 10px;
            }
            .template-select-container .select-button, .dropdown {
              min-width: 200px;
              padding: 8px;
              border: 1px solid #ddd;
              border-radius: 4px;
              background: white;
              cursor: pointer;
              display: flex;
              justify-content: space-between;
              align-items: center;
            }

            /* =====================================================
            Modals (Patient & Template Selection)
            ===================================================== */
            /*
            * FIX: Consolidated common modal styles and lowered z-index values
            * to more sensible, maintainable numbers.
            */
            .modal {
              display: none;
              position: fixed;
              top: 0; left: 0;
              width: 100%; height: 100%;
              background-color: rgba(0, 0, 0, 0.5);
              z-index: 1000;
              align-items: center;
              justify-content: center;
            }
            .modal-content {
              position: relative;
              background-color: white;
              padding: 20px;
              width: 90%;
              max-width: 500px;
              border-radius: 8px;
              box-shadow: 0 4px 10px rgba(0,0,0,0.2);
            }
            .modal-header {
              font-size: 18px;
              font-weight: bold;
              margin-bottom: 15px;
            }
            .modal-footer {
              display: flex;
              justify-content: flex-end;
              gap: 10px;
              margin-top: 20px;
            }
            .search-container {
              position: relative;
              margin-bottom: 20px;
            }
            .search-icon {
              position: absolute;
              left: 12px;
              top: 50%;
              transform: translateY(-50%);
              width: 16px; height: 16px;
              color: #666;
            }
            .search-input {
              width: 100%;
              padding: 8px 12px 8px 36px;
              border: 1px solid #ddd;
              border-radius: 6px;
              font-size: 14px;
            }
            .new-patient-btn, .patient-item, .template-item {
              display: block;
              width: 100%;
              padding: 8px 12px;
              background: none;
              border: none;
              border-radius: 6px;
              text-align: left;
              cursor: pointer;
              font-size: 14px;
            }
            .patient-item:hover, .template-item:hover {
              background-color: #f3f4f6;
            }
            .patients-list, .templates-list {
              max-height: 300px;
              overflow-y: auto;
            }
            .close-button {
              position: absolute;
              top: 15px; right: 15px;
              background: none;
              border: none;
              cursor: pointer;
              padding: 5px;
              color: #666;
            }
            .divider {
              height: 1px;
              background-color: #ddd;
              margin: 15px 0;
            }

            /* =====================================================
            Banners (temporary messages)
            ===================================================== */
            #bannerContainer {
              position: fixed;
              top: 20px;
              left: 50%;
              transform: translateX(-50%);
              z-index: 2000; /* Higher than modals */
              width: 90%;
              max-width: 400px;
            }
            .banner {
              margin-bottom: 10px;
              padding: 10px 20px;
              border-radius: 4px;
              color: #fff;
              text-align: center;
            }
            .banner-success { background-color: #4caf50; }
            .banner-error { background-color: #f44336; }

            /* =====================================================
            Responsive design (mobile)
            ===================================================== */
            @media (max-width: 800px) {
              .container {
                height: 100vh;
              }
              .actions-row {
                padding: 10px 15px;
              }
              /* Improve touch targets on iOS devices */
              @supports (-webkit-touch-callout: none) {
                .upload-button, .decision-button {
                  padding: 12px 20px;
                  min-height: 44px; /* Apple's recommended minimum */
                  font-size: 16px;
                }
              }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <!-- Fixed section: Tabs + Actions -->
            <div class="fixed-section">
              <div anvil-slot="default"></div>
              <div class="actions-row">
                <div anvil-slot="queue"></div>
                <div anvil-slot="time_display_slot"></div>
              </div>
            </div>

            <!-- Scrollable content -->
            <div class="scrollable-content">
              <!-- Settings Section -->
              <div class="parameters-section">
                <div class="parameter-row">
                  <label id="label_template">Template</label>
                  <div class="template-select-container">
                    <button class="select-button" id="templateSelectBtn">
                      <span id="select_template_placeholder">Select a template</span>
                      <span>▼</span>
                    </button>
                  </div>
                </div>
                <div class="parameter-row">
                  <label id="label_language">Language</label>
                  <div class="dropdown" id="langueDropdown">
                    <span>🇬🇧</span>
                    <span class="arrow">▼</span>
                    <div class="dropdown-menu">
                      <div data-value="🇫🇷">🇫🇷</div>
                      <div data-value="🇬🇧">🇬🇧</div>
                    </div>
                  </div>
                </div>
              </div>
              <!-- Audio Section (Playback + Recording) -->
              <!-- ADD THIS NEW BLOCK IN ITS PLACE -->
              <div class="audio-section">

                <!-- Container for the initial input state -->
                <div id="audioInputContainer">
                  <!-- Mode toggle -->
                  <div class="slide-toggle-container">
                    <div class="toggle-option active" id="recordToggle">Record</div>
                    <div class="toggle-option" id="uploadToggle">Upload</div>
                    <div class="toggle-slider"></div>
                  </div>

                  <!-- Recording Mode -->
                  <div class="recording-controls" id="recordingMode">
                    <div anvil-slot="recorder_slot"></div>
                  </div>

                  <!-- Upload Mode -->
                  <div class="upload-section" id="uploadMode" style="display: none;">
                    <div class="upload-container" id="dropZone">
                      <div class="upload-icon">📋</div>
                      <div class="upload-text" id="upload_text_drop">Drop your voice memo here</div>
                      <div class="upload-description" id="upload_description_select">or click to select a file</div>
                      <input type="file" id="audioFileInput" accept="audio/*,.m4a,.caf">
                      <label for="audioFileInput" class="upload-button" id="upload_button_select">Select file</label>
                    </div>
                    <div class="ios-instructions" style="display: none;"> <!-- Hidden by default -->
                      <h4>For iPhone users:</h4>
                      <p>To use your voice memos:</p>
                      <ol>
                        <li>Open the <strong>Files</strong> app on your iPhone.</li>
                        <li>Locate the voice memo (e.g., in <strong>On My iPhone > Voice Memos</strong>).</li>
                        <li>Tap and hold the file, choose <strong>Share</strong>, then <strong>Save to Files</strong>.</li>
                        <li>Save it to an accessible location like <strong>iCloud Drive</strong>.</li>
                        <li>Return here and use the <strong>"Select file"</strong> button.</li>
                      </ol>
                    </div>
                  </div>
                </div>

                <!-- Container for the decision state (Process/Discard) -->
                <div id="audioDecisionContainer" style="display: none;">
                  <div anvil-slot="playback_slot"></div>
                  <div class="decision-buttons">
                    <button id="discardAudioBtn" class="decision-button discard">Discard Audio</button>
                    <button id="processAudioBtn" class="decision-button process">Process Audio</button>
                  </div>
                </div>
                <div id="audioProcessingContainer" style="display: none;">
                  <div anvil-slot="feedback_slot"></div>
                </div>
              </div>

              <!-- Editor Section -->
              <div anvil-slot="editor_slot"></div>

              <!-- Stable anchor for Python calls that might occur when other elements are hidden -->
              <div id="stableAnchor" style="display:none;"></div>
            </div>

            <!-- Bottom buttons -->
            <div anvil-slot="bottom_buttons_slot"></div>
          </div>

          <!-- Modals -->
          <div class="patient-select-container">
            <div class="modal" id="patientModal">
              <div class="modal-content">
                <button class="close-button" id="closePatientModalBtn">✕</button>
                <div class="modal-header">
                  <h3 class="modal-title" id="select_patient_title">Select a patient</h3>
                  <div class="search-container">
                    <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                    </svg>
                    <div id="patientSearchHolder">
                      <input type="text" class="search-input" placeholder="Search for a patient..." id="searchInput">
                    </div>
                  </div>
                </div>
                <button class="new-patient-btn" id="newPatientBtn">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><line x1="19" y1="8" x2="19" y2="14"></line><line x1="16" y1="11" x2="22" y2="11"></line>
                  </svg>
                  New patient
                </button>
                <div class="divider"></div>
                <div class="patients-list" id="patientsList"></div>
              </div>
            </div>
          </div>
          <div class="template-select-container">
            <div class="modal" id="templateModal">
              <div class="modal-content">
                <button class="close-button" id="closeTemplateModalBtn">✕</button>
                <div class="modal-header">
                  <h3 class="modal-title" id="select_template_title">Select a template</h3>
                  <div class="search-container">
                    <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                    </svg>
                    <input type="text" class="search-input" placeholder="Search for a template..." id="templateSearchInput">
                  </div>
                </div>
                <div class="templates-list" id="templatesList"></div>
              </div>
            </div>
          </div>
          <div id="bannerContainer"></div>

          <!-- Main script (JS) -->
          <script>
            // ===========================================================================================
            // JAVASCRIPT FOR AUDIO MANAGEMENT INTERFACE
            // ===========================================================================================
            console.log("DEBUG: AudioManagerForm HTML -> Main script block started execution.");

            // --------------------------------------------------------------------------------------------
            // SECTION 1: PYTHON-CALLABLE FUNCTIONS
            // --------------------------------------------------------------------------------------------
            window.setLanguageDropdown = function(langCode) {
              const dropdown = document.getElementById('langueDropdown');
              if (!dropdown) return;
              const displaySpan = dropdown.querySelector('span:first-child');
              if (!displaySpan) return;

              if (langCode === 'FR') {
                displaySpan.textContent = '🇫🇷';
              } else { // Default to EN
                displaySpan.textContent = '🇬🇧';
              }
            };

            window.setElementText = function(elementId, newText) {
              const element = document.getElementById(elementId);
              if (!element) return;
              const targetSpan = element.querySelector('span');
              if (targetSpan && element.children.length > 0 && !targetSpan.classList.contains('arrow')) {
                targetSpan.textContent = newText;
              } else {
                element.textContent = newText;
              }
            };

            window.setPlaceholderById = function(elementId, newText) {
              const element = document.getElementById(elementId);
              if (element) {
                element.placeholder = newText;
              }
            };

            window.getDropdownSelectedValue = function(dropdownId) {
              const dropdown = document.getElementById(dropdownId);
              if (!dropdown) return "";
              if (dropdownId === "templateSelectBtn" && dropdown.dataset.templateName) {
                return dropdown.dataset.templateName;
              }
              const spanElem = dropdown.querySelector("span:first-child");
              return spanElem ? spanElem.textContent.trim() : "";
            };

            window.displayBanner = function(message, type) {
              const bannerContainer = document.getElementById('bannerContainer');
              if (!bannerContainer) return;
              const banner = document.createElement('div');
              banner.className = 'banner ' + (type === 'success' ? 'banner-success' : 'banner-error');
              banner.textContent = message;
              bannerContainer.appendChild(banner);
              setTimeout(() => {
                banner.style.opacity = '0';
                setTimeout(() => banner.remove(), 300);
              }, 3000);
            };

            window.rebuildPatientSearchInput = function() {
              const searchHolder = document.getElementById("patientSearchHolder");
              if (searchHolder) {
                const newInput = document.createElement("input");
                newInput.type = "text";
                newInput.className = "search-input";
                newInput.id = "searchInput";
                newInput.placeholder = "Search for a patient...";
                newInput.addEventListener('input', () => window.searchPatientsInModal(newInput.value));
                searchHolder.innerHTML = "";
                searchHolder.appendChild(newInput);
              }
            };

            window.populateTemplateModal = function(templates) {
              templates.sort((a, b) => a.name.localeCompare(b.name));
              window.templatesData = templates;
              let defaultTemplate = templates[0];
              if (defaultTemplate) {
                window.selectTemplate(defaultTemplate, false);
              }
              window.renderTemplates(templates);
            };

            // --------------------------------------------------------------------------------------------
            // GOLDEN RULE 1: DEFINE GLOBAL VARIABLES AND HELPERS ONLY ONCE
            // --------------------------------------------------------------------------------------------
            if (!window.__my_audio_manager_globals) {
              window.__my_audio_manager_globals = true;
              console.log("DEBUG: AudioManagerForm HTML -> Defining global functions for the first time.");


              window.isIOS = function() {
                const isStandardIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                const isIPadOnIOS13 = (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
                return isStandardIOS || isIPadOnIOS13;
              };

              window.toggleMode = (mode) => {
                const recMode = document.getElementById('recordingMode');
                const upMode = document.getElementById('uploadMode');
                const toggleContainer = document.querySelector('.slide-toggle-container');
                const recordToggle = document.getElementById('recordToggle');
                const uploadToggle = document.getElementById('uploadToggle');

                const isRecord = mode === 'record';

                if(recMode) recMode.style.display = isRecord ? 'block' : 'none';
                if(upMode) upMode.style.display = isRecord ? 'none' : 'block';

                if (toggleContainer) {
                  if (isRecord) {
                    toggleContainer.classList.remove('upload-active');
                    recordToggle.classList.add('active');
                    uploadToggle.classList.remove('active');
                  } else {
                    toggleContainer.classList.add('upload-active');
                    recordToggle.classList.remove('active');
                    uploadToggle.classList.add('active');
                  }
                }
              };

              window.setAudioWorkflowState = (state) => {
                console.log(`DEBUG: AudioManagerForm HTML -> setAudioWorkflowState called with state: '${state}'.`);
                const inputContainer = document.getElementById('audioInputContainer');
                const decisionContainer = document.getElementById('audioDecisionContainer');
                const processingContainer = document.getElementById('audioProcessingContainer'); // Get the new container

                // Hide all containers by default
                if(inputContainer) inputContainer.style.display = 'none';
                if(decisionContainer) decisionContainer.style.display = 'none';
                if(processingContainer) processingContainer.style.display = 'none';

                // Show the correct container based on the state
                if (state === 'decision') {
                  if(decisionContainer) decisionContainer.style.display = 'flex';
                } else if (state === 'processing') {
                  if(processingContainer) processingContainer.style.display = 'block';
                } else { // 'input' state by default
                  if(inputContainer) inputContainer.style.display = 'block';
                }
              };;

              window.handleFileSelect = (event) => {
                const file = event.dataTransfer ? event.dataTransfer.files[0] : event.target.files[0];
                if (!file) return;
                if (!file.type.startsWith('audio/') && !/\\.(m4a|caf|mp3|aac|wav)$/i.test(file.name)) {
                  return alert('Please select a valid audio file.');
                }
                const stableAnchor = document.getElementById('stableAnchor');
                anvil.call(stableAnchor, 'process_uploaded_audio', file);
              };

              window.openModal = (id) => { document.getElementById(id).style.display = 'block'; };
              window.closeModal = (id) => { document.getElementById(id).style.display = 'none'; };

              window.renderTemplates = (templates) => {
                const list = document.getElementById('templatesList');
                if (!list) return;
                list.innerHTML = '';
                templates.forEach(t => {
                  const button = document.createElement('button');
                  button.className = 'template-item';
                  button.innerHTML = `<span>${t.name}</span>`;
                  button.addEventListener('click', () => window.selectTemplate(t));
                  list.appendChild(button);
                });
              };

              window.selectTemplate = (template, closeModal = true) => {
                window.selectedTemplate = template;
                const btn = document.getElementById('templateSelectBtn');
                if (btn) {
                  btn.dataset.templateId = template.id;
                  btn.dataset.templateName = template.name;
                  const display = btn.querySelector('span:first-child');
                  if(display) display.textContent = template.name;
                }
                console.log("DEBUG: AudioManagerForm HTML -> Setting editor content from selected template.");
                // This will call the TextEditor's global function
                window.setEditorContent(template.display ? template.html : '');
                if(closeModal) window.closeModal('templateModal');
              };

              window.searchPatientsInModal = (term) => {
                anvil.call(document.getElementById('stableAnchor'), 'search_patients_relay', term)
                  .then(patients => {
                    const list = document.getElementById('patientsList');
                    if(list) {
                      list.innerHTML = '';
                      patients.forEach(p => {
                        const btn = document.createElement('button');
                        btn.className = 'patient-item';
                        btn.textContent = p.name;
                        btn.onclick = () => window.selectPatientForSave(p); // Pass the whole patient object
                        list.appendChild(btn);
                      });
                    }
                  });
              };

              window.selectPatientForSave = (patientData) => {
                window.selectedPatient = patientData;
                window.closeModal('patientModal');
                window.continueSave();
              };

              window.openPatientModalForSave = (currentContent) => {
                window._saveContentData = {
                  content: currentContent,
                  images: []
                };
                window.openModal('patientModal');
                window.rebuildPatientSearchInput();
                window.searchPatientsInModal('');
              };

              window.continueSave = () => {
                const content = window._saveContentData.content;
                const images = window._saveContentData.images;
                anvil.call(document.getElementById('stableAnchor'), 'save_report', JSON.stringify({ content }), images, window.selectedPatient)
                  .then(ok => {
                    if (ok) {
                      window.displayBanner("Report saved.", 'success');
                    } else {
                      window.displayBanner("Save failed.", 'error');
                    }
                  });
              };

              // --------------------------------------------------------------------------------------------
              // GOLDEN RULE 2: ALWAYS ATTACH EVENT LISTENERS IN A DEDICATED FUNCTION
              // --------------------------------------------------------------------------------------------
              window.attachEvents = function() {
                console.log("DEBUG: AudioManagerForm HTML -> attachEvents() called. Re-attaching all listeners.");
                const reattach = (id, event, handler) => {
                  const el = document.getElementById(id);
                  if(el) {
                    const newEl = el.cloneNode(true);
                    el.parentNode.replaceChild(newEl, el);
                    newEl.addEventListener(event, handler);
                    console.log(`DEBUG: AudioManagerForm HTML -> Attached '${event}' listener to #${id}.`);
                  } else {
                    console.warn(`DEBUG: AudioManagerForm HTML -> Element #${id} not found during event attachment.`);
                  }
                };


                reattach('recordToggle', 'click', () => window.toggleMode('record'));
                reattach('uploadToggle', 'click', () => window.toggleMode('upload'));

                const dropZone = document.getElementById('dropZone');
                if (dropZone) {
                  const newZone = dropZone.cloneNode(true);
                  dropZone.parentNode.replaceChild(newZone, dropZone);
                  newZone.addEventListener('dragover', e => { e.preventDefault(); newZone.classList.add('dragover'); });
                  newZone.addEventListener('dragleave', () => newZone.classList.remove('dragover'));
                  newZone.addEventListener('drop', e => { e.preventDefault(); newZone.classList.remove('dragover'); window.handleFileSelect(e); });
                  newZone.addEventListener('click', e => { if (!e.target.closest('label')) newZone.querySelector('#audioFileInput').click(); });
                  newZone.querySelector('#audioFileInput').addEventListener('change', window.handleFileSelect);
                }

                reattach('discardAudioBtn', 'click', (e) => {
                  const stableAnchor = document.getElementById('stableAnchor');
                  anvil.call(stableAnchor, 'clear_recording_handler');
                });

                reattach('processAudioBtn', 'click', (e) => {
                  const stableAnchor = document.getElementById('stableAnchor');
                  anvil.call(stableAnchor, 'prepare_ui_for_processing')
                    .then(() => anvil.call(stableAnchor, 'process_recording'));
                });

                reattach('templateSelectBtn', 'click', () => window.openModal('templateModal'));

                const langDropdown = document.getElementById('langueDropdown');
                if(langDropdown) {
                  const newDd = langDropdown.cloneNode(true);
                  langDropdown.parentNode.replaceChild(newDd, langDropdown);
                  newDd.addEventListener('click', e => { if(!e.target.closest('.dropdown-menu')) newDd.querySelector('.dropdown-menu').classList.toggle('active'); });
                  newDd.querySelectorAll('.dropdown-menu div').forEach(item => {
                    item.addEventListener('click', e => {
                      e.stopPropagation();
                      newDd.querySelector('span:first-child').textContent = item.dataset.value;
                      newDd.querySelector('.dropdown-menu').classList.remove('active');
                    });
                  });
                }

                reattach('closePatientModalBtn', 'click', () => window.closeModal('patientModal'));
                reattach('newPatientBtn', 'click', () => {
                  anvil.call(document.getElementById('stableAnchor'), 'get_new_patient_details').then(details => {
                    if (details) {
                      const patientData = {
                        unique_id: null,
                        name: details.name,
                        details: {
                          type: details.type,
                          proprietaire: details.proprietaire
                        }
                      };
                      window.selectPatientForSave(patientData);
                    }
                  });
                });
                reattach('closeTemplateModalBtn', 'click', () => window.closeModal('templateModal'));
                reattach('templateSearchInput', 'input', e => anvil.call(document.getElementById('stableAnchor'), 'search_template_relay', e.target.value).then(window.renderTemplates));

                console.log("DEBUG: AudioManagerForm HTML -> Setting initial audio workflow state to 'input'.");
                window.setAudioWorkflowState('input');
              };
            }

            // --------------------------------------------------------------------------------------------
            // GOLDEN RULE 3: IMMEDIATELY ATTACH EVERYTHING
            // --------------------------------------------------------------------------------------------
            window.attachEvents();
            console.log("DEBUG: AudioManagerForm HTML -> Script block finished execution.");
          </script>
        </body>
      </html>
    visible: true
  type: HtmlTemplate
is_package: true
