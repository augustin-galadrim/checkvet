components:
- data_bindings:
  - {code: '', property: item, writeback: false}
  event_bindings: {}
  layout_properties: {slot: recorder_slot}
  name: recording_widget
  properties: {}
  type: form:Components.RecordingWidget
- layout_properties: {slot: time_display_slot}
  name: time_display_1
  properties: {}
  type: form:Components.TimeDisplay
- event_bindings: {x_save_clicked: report_footer_1_save_clicked, x_status_clicked: report_footer_1_status_clicked}
  layout_properties: {slot: bottom_buttons_slot}
  name: report_footer_1
  properties: {}
  type: form:Components.ReportFooter
- event_bindings: {}
  layout_properties: {slot: playback_slot}
  name: audio_playback_1
  properties: {}
  type: form:Components.AudioPlayback
- layout_properties: {slot: editor_slot}
  name: text_editor_1
  properties: {show_undo_redo_buttons: true}
  type: form:Components.TextEditor
- layout_properties: {slot: default}
  name: header_nav_1
  properties: {active_tab: Production}
  type: form:Components.HeaderNav
- layout_properties: {slot: feedback_slot}
  name: user_feedback_1
  properties: {}
  type: form:Components.UserFeedback
- data_bindings: []
  event_bindings: {x_import_item: queue_manager_1_x_import_item}
  layout_properties: {slot: queue}
  name: queue_manager_1
  properties: {disable_import: false}
  type: form:Components.QueueManager
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
          <title>Audio Management Interface</title>
          <style>
            :root { --footer-height: 100px; }
            * { box-sizing: border-box; font-family: Arial, sans-serif; margin: 0; padding: 0; }
            body { background-color: #f5f5f5; height: 100vh; overflow: hidden; }
            .actions-row { display: flex; align-items: center; padding: 15px 20px; }
            .actions-row > [anvil-slot="time_display_slot"] { margin-left: auto; }
            .scrollable-content { flex: 1; overflow-y: auto; -webkit-overflow-scrolling: touch; padding: 20px 20px var(--footer-height) 20px; }
            .audio-section { padding: 5px 0; width: 100%; }
            .recording-controls { padding: 20px 0; }
            #audioInputContainer, #audioDecisionContainer, #audioProcessingContainer { width: 100%; display: none; }
            #audioDecisionContainer { display: flex; flex-direction: column; align-items: center; gap: 15px; }
            .slide-toggle-container { display: flex; position: relative; width: 320px; margin: 10px auto; background-color: #f0f0f0; border-radius: 25px; padding: 5px; border: 1px solid #ddd; }
            .toggle-option { flex: 1; text-align: center; padding: 10px 0; cursor: pointer; color: #555; font-weight: 500; z-index: 2; transition: color 0.3s ease; user-select: none; }
            .toggle-option.active { color: #ffffff; }
            .toggle-slider { position: absolute; top: 5px; left: 5px; height: calc(100% - 10px); width: calc(50% - 5px); background-color: #4CAF50; border-radius: 25px; transition: transform 0.3s ease-in-out; box-shadow: 0 2px 4px rgba(0,0,0,0.1); z-index: 1; }
            .slide-toggle-container.upload-active .toggle-slider { transform: translateX(100%); }
            .upload-section { max-width: 400px; margin: 0 auto; display: flex; flex-direction: column; align-items: center; }
            .upload-container { width: 100%; border: 2px dashed #aaa; border-radius: 10px; padding: 20px; text-align: center; background-color: #f8f8f8; transition: all 0.3s ease; cursor: pointer; margin-bottom: 15px; }
            .upload-container:hover, .upload-container.dragover { border-color: #4CAF50; background-color: #f0f9f0; }
            .upload-icon { font-size: 40px; color: #666; margin-bottom: 10px; }
            .upload-text { font-size: 16px; margin-bottom: 5px; }
            .upload-description { color: #666; font-size: 14px; margin-bottom: 15px; }
            .upload-button { background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 5px; font-size: 16px; cursor: pointer; }
            #audioFileInput { display: none; }
            .decision-buttons { display: flex; gap: 15px; margin-top: 10px; }
            .decision-button { padding: 10px 20px; border-radius: 4px; border: 1px solid #ddd; cursor: pointer; font-size: 14px; font-weight: bold; }
            .decision-button.process { background-color: #4CAF50; color: white; border-color: #4CAF50; }
            .decision-button.discard { background-color: #f44336; color: white; border-color: #f44336; }
            .parameters-section { background: white; padding: 20px; border-radius: 8px; margin-bottom: 0; }
            .parameter-row { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
            .parameter-row label { font-weight: bold; margin-right: 10px; }
            .template-select-container .select-button, .dropdown { min-width: 200px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; background: white; cursor: pointer; display: flex; justify-content: space-between; align-items: center; }
            .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); align-items: center; justify-content: center; }
            #newPatientEntryModal { z-index: 1001; }
            .modal-content { position: relative; background-color: white; padding: 20px; width: 90%; max-width: 500px; border-radius: 8px; box-shadow: 0 4px 10px rgba(0,0,0,0.2); }
            .modal-header { font-size: 18px; font-weight: bold; margin-bottom: 15px; }
            .modal-footer { display: flex; justify-content: flex-end; gap: 10px; margin-top: 20px; }
            .search-container { position: relative; margin-bottom: 20px; }
            .search-icon { position: absolute; left: 12px; top: 50%; transform: translateY(-50%); width: 16px; height: 16px; color: #666; }
            .search-input { width: 100%; padding: 8px 12px 8px 36px; border: 1px solid #ddd; border-radius: 6px; font-size: 14px; }
            .new-patient-btn, .patient-item, .template-item { display: block; width: 100%; padding: 8px 12px; background: none; border: none; border-radius: 6px; text-align: left; cursor: pointer; font-size: 14px; }
            .new-patient-btn {
              font-weight: bold;
              color: #4CAF50; /* Vert de votre thème */
              background-color: #f0f9f0; /* Un vert très clair pour le fond */
              border: 1px solid #4CAF50; /* Une bordure verte */
            }
            .new-patient-btn:hover {
              background-color: #e0f2e0; /* Un vert un peu plus foncé au survol */
            }
            .patient-item:hover, .template-item:hover { background-color: #f3f4f6; }
            .patients-list, .templates-list { max-height: 300px; overflow-y: auto; }
            .close-button { position: absolute; top: 15px; right: 15px; background: none; border: none; cursor: pointer; padding: 5px; color: #666; }
            .divider { height: 1px; background-color: #ddd; margin: 15px 0; }
            #modification-instructions {
              background: #f8f8f8;
              border: 1px solid #ddd;
              padding: 15px;
              margin-bottom: 20px;
              margin-top: 10px;
              margin-left: auto;
              margin-right: auto;
              border-radius: 8px;
              box-shadow: 0 2px 5px rgba(0,0,0,0.05);
              text-align: center;
              max-width: 90%;
            }
            .edit-instructions {
              font-size: 14px;
              color: #555;
              margin-bottom: 10px;
            }
            .edit-instructions em {
              color: #333;
              background-color: #e9e9e9;
              padding: 2px 5px;
              border-radius: 3px;
            }
          </style>
        </head>
        <body>
          <div class="responsive-container">
            <div class="fixed-section">
              <div anvil-slot="default"></div>
              <div class="actions-row">
                <div anvil-slot="queue"></div>
                <div anvil-slot="time_display_slot"></div>
              </div>
            </div>
            <div class="scrollable-content">
              <div class="parameters-section">
                <div class="parameter-row">
                  <label id="audioManager-label-template">Template</label>
                  <div class="template-select-container">
                    <button class="select-button" id="templateSelectBtn"><span id="audioManager-span-templatePlaceholder">Select a template</span><span>▼</span></button>
                  </div>
                </div>
              </div>
              <div class="audio-section">
                <div id="audioInputContainer">
                  <div id="modification-instructions" style="display: none;">
                    <div class="edit-instructions">
                      <p id="audioManager-p-instructions"></p>
                      <p>
                        <strong id="audioManager-strong-example"></strong>
                        <em id="audioManager-em-exampleText"></em>
                      </p>
                    </div>
                  </div>
                  <div class="slide-toggle-container">
                    <div class="toggle-option active" id="audioManager-div-recordToggle">Record</div>
                    <div class="toggle-option" id="audioManager-div-uploadToggle">Upload</div>
                    <div class="toggle-slider"></div>
                  </div>
                  <div class="recording-controls" id="recordingMode"><div anvil-slot="recorder_slot"></div></div>
                  <div class="upload-section" id="uploadMode" style="display: none;">
                    <div class="upload-container" id="dropZone">
                      <div class="upload-icon">📋</div>
                      <div class="upload-text" id="audioManager-div-uploadText">Drop your voice memo here</div>
                      <div class="upload-description" id="audioManager-p-uploadDesc">or click to select a file</div>
                      <input type="file" id="audioFileInput" accept="audio/*,.m4a,.caf">
                      <label for="audioFileInput" class="upload-button" id="audioManager-label-uploadButton">Select file</label>
                    </div>
                  </div>
                </div>
                <div id="audioDecisionContainer">
                  <div anvil-slot="playback_slot"></div>
                  <div class="decision-buttons">
                    <button id="audioManager-button-discard" class="decision-button discard">Discard Audio</button>
                    <button id="audioManager-button-process" class="decision-button process">Process Audio</button>
                    <button id="audioManager-button-modify" class="decision-button process" style="display: none;">Process Modification</button>
                  </div>
                </div>
                <div id="audioProcessingContainer"><div anvil-slot="feedback_slot"></div></div>
              </div>
              <div anvil-slot="editor_slot"></div>
              <div id="stableAnchor" style="display:none;"></div>
            </div>
            <div anvil-slot="bottom_buttons_slot"></div>
          </div>

          <!-- Modals -->
          <div class="modal" id="newPatientEntryModal" style="display: none;">
            <div class="modal-content">
              <button class="close-button" id="closeNewPatientModalBtn">✕</button>
              <div class="modal-header"><h3 class="modal-title" id="audioManager-h3-newPatientTitle">Create New Patient</h3></div>
              <div class="form-group"><label for="new-patient-name" id="audioManager-label-newPatientName">Name</label><input type="text" id="new-patient-name" class="search-input" placeholder="e.g., Fido"></div>
              <div class="form-group"><label for="new-patient-type" id="audioManager-label-newPatientSpecies">Species</label><input type="text" id="new-patient-type" class="search-input" placeholder="e.g., Canine"></div>
              <div class="form-group"><label for="new-patient-owner" id="audioManager-label-newPatientOwner">Owner</label><input type="text" id="new-patient-owner" class="search-input" placeholder="e.g., Jane Doe"></div>
              <div class="modal-footer"><button class="button" id="audioManager-button-newPatientCancel">Cancel</button><button class="button button-primary" id="audioManager-button-newPatientSave">Create and Select</button></div>
            </div>
          </div>
          <div class="patient-select-container">
            <div class="modal" id="patientModal">
              <div class="modal-content">
                <button class="close-button" id="closePatientModalBtn">✕</button>
                <div class="modal-header"><h3 class="modal-title" id="audioManager-h3-selectPatientTitle">Select a patient</h3>
                  <div class="search-container"><svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
                    <input type="text" class="search-input" placeholder="Search for a patient..." id="audioManager-input-patientSearch">
                  </div>
                </div>
                <div class="patients-list" id="patientsList"></div>
              </div>
            </div>
          </div>
          <div class="template-select-container">
            <div class="modal" id="templateModal">
              <div class="modal-content">
                <button class="close-button" id="closeTemplateModalBtn">✕</button>
                <div class="modal-header"><h3 class="modal-title" id="audioManager-h3-selectTemplateTitle">Select a template</h3>
                  <div class="search-container"><svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg><input type="text" class="search-input" placeholder="Search for a template..." id="audioManager-input-templateSearch"></div>
                </div>
                <div class="templates-list" id="templatesList"></div>
              </div>
            </div>
          </div>

          <script>
            if (!window.__my_audio_manager_globals) {
              window.__my_audio_manager_globals = true;
              const logger = window.createLogger('AudioManagerForm');
              let allPatientsData = [];
              let currentFormMode = 'initial_generation';
              let localeTexts = {};

              window.setLocaleTexts = function(texts) {
                logger.log('Setting locale texts from Python.');
                localeTexts = { ...localeTexts, ...texts };
              };

              window.isIOS = () => /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);

              window.populatePatientModal = (patients) => allPatientsData = patients || [];

              window.populateTemplateModal = (templates) => {
                window.templatesData = templates.sort((a, b) => a.name.localeCompare(b.name));
                renderTemplates(window.templatesData);
              };

              window.setFormMode = (mode) => {
                logger.log(`Setting form mode to: '${mode}'.`);
                currentFormMode = mode;
                const isModification = mode === 'modification';
                document.getElementById('modification-instructions').style.display = isModification ? 'block' : 'none';
                document.querySelector('.slide-toggle-container').style.display = isModification ? 'none' : 'flex';
                if (isModification) window.toggleMode('record');
              };

              window.toggleMode = (mode) => {
                const isRecord = mode === 'record';
                document.getElementById('recordingMode').style.display = isRecord ? 'block' : 'none';
                document.getElementById('uploadMode').style.display = isRecord ? 'none' : 'block';
                document.querySelector('.slide-toggle-container').classList.toggle('upload-active', !isRecord);
                document.getElementById('audioManager-div-recordToggle').classList.toggle('active', isRecord);
                document.getElementById('audioManager-div-uploadToggle').classList.toggle('active', !isRecord);
              };

              window.setAudioWorkflowState = (state) => {
                const containers = { input: document.getElementById('audioInputContainer'), decision: document.getElementById('audioDecisionContainer'), processing: document.getElementById('audioProcessingContainer') };
                Object.values(containers).forEach(c => c.style.display = 'none');
                if (state === 'decision') {
                  containers.decision.style.display = 'flex';
                  const isMod = currentFormMode === 'modification';
                  document.getElementById('audioManager-button-process').style.display = isMod ? 'none' : 'block';
                  document.getElementById('audioManager-button-modify').style.display = isMod ? 'block' : 'none';
                } else if (containers[state]) {
                  containers[state].style.display = 'block';
                }
              };

              window.handleFileSelect = (event) => {
                const file = event.dataTransfer ? event.dataTransfer.files[0] : event.target.files[0];
                if (!file) return;
                if (!file.type.startsWith('audio/') && !/\.(m4a|caf|mp3|aac|wav)$/i.test(file.name)) {
                  return alert(localeTexts.invalidFile);
                }
                anvil.call(document.getElementById('stableAnchor'), 'process_uploaded_audio', file, file.type);
              };

              window.renderTemplates = (templates) => {
                const list = document.getElementById('templatesList');
                if (!list) return;
                list.innerHTML = '';
                const langToFlag = { 'en': '🇬🇧', 'fr': '🇫🇷' };
                templates.forEach(t => {
                  const btn = document.createElement('button');
                  btn.className = 'template-item';
                  const flag = langToFlag[t.language || 'en'] || '🏳️';
                  btn.innerHTML = `<span>${t.name} - ${flag}</span>`;
                  btn.addEventListener('click', () => window.selectTemplate(t));
                  list.appendChild(btn);
                });
              };

              window.selectTemplate = (template, closeModalAfter = true) => {
                const btn = document.getElementById('templateSelectBtn')?.querySelector('span:first-child');
                if (btn) {
                  const flag = { 'en': '🇬🇧', 'fr': '🇫🇷' }[template.language || 'en'] || '🏳️';
                  btn.textContent = `${template.name} - ${flag}`;
                }
                anvil.call(document.getElementById('stableAnchor'), 'load_template_content', template.html);
                anvil.call(document.getElementById('stableAnchor'), 'set_active_template_language', template.language);
                anvil.call(document.getElementById('stableAnchor'), 'set_selected_template', template);
                if (closeModalAfter) closeModal('templateModal');
              };

              window.renderPatients = (patients) => {
                const list = document.getElementById('patientsList');
                if (!list) return;
                list.innerHTML = '';
                patients.forEach(p => {
                  const btn = document.createElement('button');
                  btn.className = 'patient-item';
                  btn.textContent = p.name;
                  btn.onclick = () => window.selectPatientForSave(p);
                  list.appendChild(btn);
                });
                list.insertAdjacentHTML('beforeend', `<div class="divider"></div><button class="new-patient-btn" id="audioManager-button-newPatient">${localeTexts.newPatientBtn}</button>`);
                list.querySelector('#audioManager-button-newPatient').addEventListener('click', () => {
                  closeModal('patientModal');
                  ['new-patient-name', 'new-patient-type', 'new-patient-owner'].forEach(id => document.getElementById(id).value = '');
                  openModal('newPatientEntryModal');
                });
              };

              window.selectPatientForSave = (patientData) => {
                window.selectedPatient = patientData;
                closeModal('patientModal');
                window.continueSave();
              };

              window.openPatientModalForSave = () => {
                window.openModal('patientModal');
                window.renderPatients(allPatientsData);
                document.getElementById('audioManager-input-patientSearch')?.focus();
              };

              window.continueSave = () => {
                anvil.call(document.getElementById('stableAnchor'), 'save_report', window.selectedPatient);
              };

              window.attachEvents = function() {
                logger.log("Attaching all event listeners.");
                const reattach = (id, event, handler) => {
                  const el = document.getElementById(id);
                  if(el) {
                    const newEl = el.cloneNode(true);
                    el.parentNode.replaceChild(newEl, el);
                    newEl.addEventListener(event, handler);
                  }
                };
                const stableAnchor = document.getElementById('stableAnchor');
                reattach('audioManager-div-recordToggle', 'click', () => window.toggleMode('record'));
                reattach('audioManager-div-uploadToggle', 'click', () => window.toggleMode('upload'));
                const dropZone = document.getElementById('dropZone');
                if (dropZone) {
                  const newZone = dropZone.cloneNode(true);
                  dropZone.parentNode.replaceChild(newZone, dropZone);
                  newZone.addEventListener('dragover', e => { e.preventDefault(); newZone.classList.add('dragover'); });
                  newZone.addEventListener('dragleave', () => newZone.classList.remove('dragover'));
                  newZone.addEventListener('drop', e => { e.preventDefault(); newZone.classList.remove('dragover'); window.handleFileSelect(e); });
                  newZone.addEventListener('click', e => { if (!e.target.closest('label')) newZone.querySelector('#audioFileInput').click(); });
                  newZone.querySelector('#audioFileInput').addEventListener('change', window.handleFileSelect);
                }
                reattach('audioManager-button-discard', 'click', () => anvil.call(stableAnchor, 'clear_recording_handler'));
                reattach('audioManager-button-process', 'click', () => anvil.call(stableAnchor, 'process_recording'));
                reattach('audioManager-button-modify', 'click', () => anvil.call(stableAnchor, 'process_modification'));
                reattach('templateSelectBtn', 'click', () => openModal('templateModal'));
                reattach('closeTemplateModalBtn', 'click', () => closeModal('templateModal'));
                reattach('audioManager-input-templateSearch', 'input', e => anvil.call(stableAnchor, 'search_template_relay', e.target.value).then(window.renderTemplates));
                reattach('closePatientModalBtn', 'click', () => closeModal('patientModal'));
                reattach('audioManager-input-patientSearch', 'input', (e) => window.renderPatients(allPatientsData.filter(p => p.name.toLowerCase().includes(e.target.value.toLowerCase()))));
                reattach('closeNewPatientModalBtn', 'click', () => { closeModal('newPatientEntryModal'); openModal('patientModal'); });
                reattach('audioManager-button-newPatientCancel', 'click', () => { closeModal('newPatientEntryModal'); openModal('patientModal'); });
                reattach('audioManager-button-newPatientSave', 'click', () => {
                  const newDetails = { name: document.getElementById('new-patient-name').value.trim(), type: document.getElementById('new-patient-type').value.trim(), proprietaire: document.getElementById('new-patient-owner').value.trim() };
                  if (!newDetails.name) return alert(localeTexts.patientNameRequired);
                  closeModal('newPatientEntryModal');
                  window.selectPatientForSave({ id: null, name: newDetails.name, details: newDetails });
                });
                window.setAudioWorkflowState('input');
              };
            }
            attachEvents();
          </script>
        </body>
      </html>
    visible: true
  type: HtmlTemplate
is_package: true
