components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <!-- Responsive for mobile devices -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <title>Audio Management Interface</title>\n\n    <!-- External libraries for iOS compatibility and functionality -->\n    <script src=\"https://www.webrtc-experiment.com/RecordRTC.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/nosleep/0.12.0/NoSleep.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n\n    <style>\n      /* =====================================================\n      Basic styles (Unchanged to preserve look and feel)\n      ===================================================== */\n      * {\n        box-sizing: border-box;\n        font-family: Arial, sans-serif;\n        margin: 0;\n        padding: 0;\n      }\n      body {\n        background-color: #f5f5f5;\n        height: 100vh;\n        overflow: hidden;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        height: 100vh;\n        width: 100%;\n        max-width: 800px;\n        margin: 0 auto;\n        background-color: white;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n      /* =====================================================\n      Fixed section (tabs + actions)\n      ===================================================== */\n      .fixed-section {\n        background: white;\n        z-index: 10;\n      }\n      .nav-tabs {\n        display: flex;\n        width: 100%;\n        border-bottom: 1px solid #ddd;\n      }\n      .nav-tab {\n        flex: 1;\n        padding: 8px 16px;\n        cursor: pointer;\n        border: 1px solid #ccc;\n        border-bottom: none;\n        background: #f8f8f8;\n        font-size: 14px;\n        position: relative;\n        margin-right: -1px;\n        text-align: center;\n      }\n      .nav-tab.active {\n        background: #e5e5e5;\n        border-top: 1px solid #999;\n        border-left: 1px solid #999;\n        border-right: 1px solid #999;\n        border-bottom: 1px solid #e5e5e5;\n        margin-bottom: -1px;\n      }\n      .actions-row {\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        padding: 15px 20px;\n      }\n      .time {\n        color: #666;\n        font-size: 14px;\n      }\n      /* =====================================================\n      Scrollable content\n      ===================================================== */\n      .scrollable-content {\n        flex: 1;\n        overflow-y: auto;\n        padding: 20px;\n        padding-bottom: 80px;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      /* =====================================================\n      AUDIO section (playback + recording)\n      ===================================================== */\n      .audio-section {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        margin-bottom: 20px;\n        position: relative;\n      }\n      #audioBar {\n        width: 100%;\n        height: 50px;\n        background-color: #f8f8f8;\n        border-radius: 5px;\n        display: flex;\n        align-items: center;\n        padding: 0 10px;\n        margin-bottom: 20px;\n        border: 1px solid #ddd;\n        position: relative;\n      }\n      #audioPlaybackControl {\n        width: 30px;\n        height: 30px;\n        background-color: #4CAF50;\n        border: none;\n        border-radius: 50%;\n        color: white;\n        font-size: 16px;\n        cursor: pointer;\n        margin-right: 10px;\n      }\n      #audioProgress {\n        flex-grow: 1;\n        height: 10px;\n        background-color: #ddd;\n        border-radius: 5px;\n        overflow: hidden;\n        cursor: pointer;\n        margin-right: 10px;\n        touch-action: none;\n      }\n      #audioProgressBar {\n        width: 0;\n        height: 100%;\n        background-color: #4CAF50;\n        transition: width 0.1s linear;\n      }\n      #audioDuration {\n        font-size: 14px;\n      }\n      #clearRecordingButton {\n        background: none;\n        border: none;\n        font-size: 18px;\n        cursor: pointer;\n        color: #666;\n        margin-left: 10px;\n      }\n      #clearRecordingButton:hover {\n        color: #000;\n      }\n      #retryProcessBtn {\n        position: absolute;\n        top: -40px;\n        right: 10px;\n        padding: 8px 12px;\n        background-color: #4caf50;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        display: none;\n      }\n      .recording-controls {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        margin: 20px auto;\n      }\n      #circularProgress {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        margin: 0 auto;\n        border-radius: 50%;\n        overflow: hidden;\n      }\n      #progressRing {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        border-radius: 50%;\n        background: conic-gradient(#ddd 0deg, #ddd 0deg);\n      }\n      #centerHole {\n        position: absolute;\n        top: 8px;\n        left: 8px;\n        width: 184px;\n        height: 184px;\n        background-color: #fff;\n        border-radius: 50%;\n        z-index: 1;\n      }\n      .control-button-group {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        display: flex;\n        gap: 30px;\n        z-index: 2;\n      }\n      .control-button {\n        width: 45px;\n        height: 45px;\n        border: 1px solid #666;\n        border-radius: 2px;\n        cursor: pointer;\n        background-color: white;\n        color: #666;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 24px;\n        transition: all 0.3s ease;\n        padding: 0;\n      }\n      .control-button svg {\n        pointer-events: none;\n      }\n      .control-button:hover {\n        background-color: #f5f5f5;\n        border-color: #333;\n        color: #333;\n      }\n\n      /* =====================================================\n      Upload Voice Memo Section for all devices\n      ===================================================== */\n      .upload-section {\n        margin: 20px auto;\n        max-width: 400px;\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n\n      .upload-container {\n        width: 100%;\n        border: 2px dashed #aaa;\n        border-radius: 10px;\n        padding: 20px;\n        text-align: center;\n        background-color: #f8f8f8;\n        transition: all 0.3s ease;\n        cursor: pointer;\n        margin-bottom: 15px;\n      }\n\n      .upload-container:hover {\n        border-color: #4CAF50;\n        background-color: #f0f9f0;\n      }\n\n      .upload-container.dragover {\n        border-color: #4CAF50;\n        background-color: #e7f6e7;\n        transform: scale(1.02);\n      }\n\n      .upload-icon {\n        font-size: 40px;\n        color: #666;\n        margin-bottom: 10px;\n      }\n\n      .upload-text {\n        color: #333;\n        font-size: 16px;\n        margin-bottom: 5px;\n      }\n\n      .upload-description {\n        color: #666;\n        font-size: 14px;\n        margin-bottom: 15px;\n      }\n\n      .upload-button {\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        padding: 10px 20px;\n        border-radius: 5px;\n        font-size: 16px;\n        cursor: pointer;\n        transition: background-color 0.3s;\n        min-height: 44px; /* iOS minimum touch target size */\n      }\n\n      .upload-button:hover {\n        background-color: #45a049;\n      }\n\n      .upload-button:active {\n        transform: scale(0.98);\n        opacity: 0.9;\n      }\n\n      #audioFileInput {\n        display: none;\n      }\n\n      .file-info {\n        display: none;\n        margin-top: 15px;\n        padding: 10px;\n        background-color: #e8f5e9;\n        border-radius: 5px;\n        width: 100%;\n        font-size: 14px;\n      }\n\n      .file-name {\n        font-weight: bold;\n        word-break: break-all;\n      }\n\n      .file-size {\n        color: #666;\n      }\n\n      .file-actions {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 10px;\n      }\n\n      .file-button {\n        padding: 5px 10px;\n        border-radius: 3px;\n        border: none;\n        font-size: 14px;\n        cursor: pointer;\n        min-height: 36px;\n      }\n\n      .process-file-button {\n        background-color: #4CAF50;\n        color: white;\n      }\n\n      .remove-file-button {\n        background-color: #f44336;\n        color: white;\n      }\n\n      .format-warning {\n        display: none;\n        margin-top: 10px;\n        padding: 8px;\n        background-color: #fff3e0;\n        border-left: 4px solid #ff9800;\n        font-size: 13px;\n        color: #6d4c41;\n      }\n\n      /* iOS-specific guidance */\n      .ios-instructions {\n        margin: 15px 0;\n        padding: 15px;\n        background-color: #f8f9fa;\n        border-left: 4px solid #007aff;\n        border-radius: 4px;\n        font-size: 14px;\n        display: none; /* Hidden by default, shown by JS for iOS */\n      }\n\n      .ios-instructions h4 {\n        color: #007aff;\n        margin-top: 0;\n        margin-bottom: 10px;\n      }\n\n      .ios-instructions ol {\n        padding-left: 20px;\n      }\n\n      .ios-instructions li {\n        margin-bottom: 8px;\n      }\n\n      /* Toggle between upload and recording */\n      .mode-toggle {\n        display: flex;\n        justify-content: center;\n        margin-bottom: 20px;\n        border-bottom: 1px solid #eee;\n        padding-bottom: 15px;\n      }\n\n      .toggle-button {\n        padding: 8px 16px;\n        margin: 0 5px;\n        background-color: #f1f1f1;\n        border: 1px solid #ddd;\n        border-radius: 20px;\n        font-size: 14px;\n        cursor: pointer;\n        transition: all 0.3s ease;\n      }\n\n      .toggle-button.active {\n        background-color: #4CAF50;\n        color: white;\n        border-color: #4CAF50;\n      }\n\n      @keyframes recordingFlash {\n        0% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n        50% { background: conic-gradient(#ffffff 0deg, #ffffff 360deg); }\n        100% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n      }\n      .recording-flash {\n        animation: recordingFlash 1.5s infinite;\n      }\n      /* Mobile audio display (only on mobile) */\n      #mobileAudioDisplay {\n        display: none;\n        width: 100%;\n        text-align: center;\n        font-size: 16px;\n        font-weight: bold;\n        color: #333;\n      }\n\n      /* =====================================================\n      Settings Section\n      ===================================================== */\n      .parameters-section {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        margin-bottom: 20px;\n      }\n      .parameter-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 15px;\n      }\n      .parameter-row label {\n        font-weight: bold;\n        margin-right: 10px;\n      }\n      .template-select-container .select-button {\n        min-width: 200px;\n        padding: 8px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        font-size: 14px;\n      }\n      .dropdown {\n        min-width: 200px;\n        padding: 8px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n        position: relative;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .arrow { margin-left: 10px; color: #666; }\n      .dropdown-menu {\n        position: absolute;\n        top: 100%;\n        left: 0;\n        width: 100%;\n        background: white;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        display: none;\n        z-index: 1000;\n      }\n      .dropdown-menu.active { display: block; }\n      .dropdown-menu div {\n        padding: 8px;\n        cursor: pointer;\n      }\n      .dropdown-menu div:hover { background: #f5f5f5; }\n      /* =====================================================\n      Editor Section\n      ===================================================== */\n      .editor-section {\n        background: white;\n        border-radius: 8px;\n        overflow: hidden;\n      }\n      #toolbar {\n        padding: 10px;\n        background: #f8f8f8;\n        border-bottom: 1px solid #ddd;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 5px;\n        align-items: center;\n      }\n      .toolbar-button {\n        padding: 6px 12px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n      }\n      .toolbar-button:hover { background: #f5f5f5; }\n\n      .tb-recording-flash {\n        background-color: #ffebe6 !important;\n        border-color: #ff6347 !important;\n        color: #ff6347 !important;\n      }\n\n      .tb-processing-flash {\n        background-color: #e6ffe6 !important;\n        border-color: #4CAF50 !important;\n        color: #4CAF50 !important;\n      }\n\n      .toolbar-button.recording {\n        background-color: #ffebe6;\n        border-color: #ff6347;\n        color: #ff6347;\n      }\n      .toolbar-button.validate {\n        background-color: #e6ffe6;\n        border-color: #4CAF50;\n        color: #4CAF50;\n      }\n      #editor {\n        min-height: 300px;\n        padding: 20px;\n        border: 1px solid #ddd;\n        overflow-y: auto;\n        font-size: 16px;\n        line-height: 1.5;\n        -webkit-user-select: text; /* Allow text selection on iOS */\n        user-select: text;\n      }\n      .scrollable-content::-webkit-scrollbar { width: 8px; }\n      .scrollable-content::-webkit-scrollbar-track { background: #f1f1f1; }\n      .scrollable-content::-webkit-scrollbar-thumb {\n        background: #888;\n        border-radius: 4px;\n      }\n      .scrollable-content::-webkit-scrollbar-thumb:hover { background: #555; }\n\n      /* =====================================================\n      Bottom buttons\n      ===================================================== */\n      .bottom-buttons {\n        position: fixed;\n        bottom: 0;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 800px;\n        max-width: 100%;\n        background: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: center;\n        gap: 20px;\n        border-top: 1px solid #ddd;\n        box-shadow: 0 -2px 4px rgba(0,0,0,0.1);\n        z-index: 10;\n      }\n      .bottom-button {\n        padding: 10px 30px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n        font-size: 14px;\n        transition: all 0.2s ease;\n      }\n      .bottom-button:hover {\n        background: #f5f5f5;\n        border-color: #999;\n      }\n\n      /* =====================================================\n      Patient selection modal (for saving)\n      ===================================================== */\n      .patient-select-container {\n        position: relative;\n        width: 300px;\n        font-family: system-ui, -apple-system, sans-serif;\n      }\n      .select-button#patientSelectBtn { display: none; }\n      .modal {\n        display: none;\n        position: fixed;\n        top: 0; left: 0;\n        width: 100%; height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n      }\n      .modal-content {\n        position: relative;\n        background-color: white;\n        margin: 15% auto;\n        padding: 20px;\n        width: 90%;\n        max-width: 400px;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      }\n      .modal-header { margin-bottom: 20px; }\n      .modal-title {\n        font-size: 18px;\n        font-weight: 600;\n        margin: 0 0 15px 0;\n      }\n      .search-container { position: relative; margin-bottom: 20px; }\n      .search-icon {\n        position: absolute;\n        left: 12px;\n        top: 50%;\n        transform: translateY(-50%);\n        width: 16px;\n        height: 16px;\n        color: #666;\n      }\n      #patientSearchHolder {\n        /* Container rebuilt dynamically by Python->JS call */\n      }\n      .search-input {\n        width: 100%;\n        padding: 8px 12px 8px 36px;\n        border: 1px solid #ddd;\n        border-radius: 6px;\n        font-size: 14px;\n        box-sizing: border-box;\n      }\n      .search-input:focus {\n        outline: none;\n        border-color: #2563eb;\n        box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);\n      }\n      .new-patient-btn {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        width: 100%;\n        padding: 8px 12px;\n        background: none;\n        border: none;\n        border-radius: 6px;\n        color: #16a34a;\n        cursor: pointer;\n        font-size: 14px;\n        text-align: left;\n      }\n      .new-patient-btn:hover { background-color: #f0fdf4; }\n      .divider {\n        height: 1px;\n        background-color: #ddd;\n        margin: 15px 0;\n      }\n      .patients-list { max-height: 200px; overflow-y: auto; }\n      .patient-item {\n        display: block;\n        width: 100%;\n        padding: 8px 12px;\n        background: none;\n        border: none;\n        border-radius: 6px;\n        text-align: left;\n        cursor: pointer;\n        font-size: 14px;\n        color: #333;\n      }\n      .patient-item:hover { background-color: #f3f4f6; }\n      .close-button {\n        position: absolute;\n        top: 15px;\n        right: 15px;\n        background: none;\n        border: none;\n        cursor: pointer;\n        padding: 5px;\n        color: #666;\n      }\n\n      /* =====================================================\n      Template selection modal\n      ===================================================== */\n      .template-select-container .modal {\n        z-index: 1100;\n      }\n      #templateModal {\n        display: none;\n        position: fixed;\n        top: 0; left: 0;\n        width: 100%; height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n      }\n      #templateModal .modal-content {\n        margin: 15% auto;\n        padding: 20px;\n        width: 90%;\n        max-width: 400px;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        position: relative;\n      }\n      #templateModal .modal-header { margin-bottom: 20px; }\n      #templateModal .modal-title {\n        font-size: 18px;\n        font-weight: 600;\n        margin: 0 0 15px 0;\n      }\n      #templateModal .search-container { position: relative; margin-bottom: 20px; }\n      #templateModal .search-icon {\n        position: absolute;\n        left: 12px;\n        top: 50%;\n        transform: translateY(-50%);\n        width: 16px;\n        height: 16px;\n        color: #666;\n      }\n      #templateModal .search-input {\n      width: 100%;\n      padding: 8px 12px 8px 36px;\n      border: 1px solid #ddd;\n      border-radius: 6px;\n      font-size: 14px;\n      box-sizing: border-box;\n      }\n      #templateModal .templates-list { max-height: 300px; overflow-y: auto; }\n      #templateModal .template-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n      padding: 8px 12px;\n      background: none;\n      border: none;\n      border-radius: 6px;\n      text-align: left;\n      cursor: pointer;\n      font-size: 14px;\n      color: #333;\n      }\n      #templateModal .template-item:hover { background: #f3f4f6; }\n      #templateModal .star-icon {\n      font-size: 16px;\n      line-height: 1;\n      }\n      #templateModal .close-button {\n      position: absolute;\n      top: 15px;\n      right: 15px;\n      background: none;\n      border: none;\n      cursor: pointer;\n      padding: 5px;\n      color: #666;\n      }\n\n      /* =====================================================\n      Banners (temporary messages)\n      ===================================================== */\n      #bannerContainer {\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      z-index: 2000;\n      width: 90%;\n      max-width: 400px;\n      }\n      .banner-flash {\n      background-color: #f44336;\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      transition: background-color 0.3s ease;\n      }\n      .banner-flash.flash-state {\n      background-color: #ff7961;\n      }\n\n      .banner {\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      }\n      .banner-success {\n      background-color: #4caf50;\n      }\n      .banner-error {\n      background-color: #f44336;\n      }\n\n      /* =====================================================\n      Responsive design (mobile)\n      ===================================================== */\n      @media (max-width: 800px) {\n      .container {\n      height: 100vh;\n      }\n      .bottom-buttons {\n      width: 100%;\n      left: 0;\n      transform: none;\n      }\n      .nav-tab {\n      font-size: 12px;\n      padding: 6px 8px;\n      }\n      .actions-row {\n      padding: 10px 15px;\n      }\n      #audioBar {\n      height: auto;\n      padding: 10px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      }\n      #audioPlaybackControl,\n      #audioProgress,\n      #audioDuration,\n      #clearRecordingButton {\n      display: none;\n      }\n      #mobileAudioDisplay {\n      display: block;\n      }\n      .recording-controls {\n      width: 180px;\n      height: 180px;\n      }\n      #circularProgress {\n      width: 180px;\n      height: 180px;\n      }\n      #centerHole {\n      top: 7px;\n      left: 7px;\n      width: 166px;\n      height: 166px;\n      }\n      .upload-section {\n      margin-top: 10px;\n      }\n      .mode-toggle {\n      margin-bottom: 10px;\n      padding-bottom: 10px;\n      }\n      .toggle-button {\n      font-size: 13px;\n      padding: 6px 12px;\n      }\n      @supports (-webkit-touch-callout: none) {\n      .upload-button, .file-button, .toggle-button {\n      padding: 12px 20px;\n      min-height: 44px;\n      font-size: 16px;\n      }\n      }\n      }\n      /* ADD THESE NEW STYLES */\n      #audioDecisionContainer {\n        display: none; /* Controlled by JS */\n        padding: 10px 0;\n        display: flex;\n        justify-content: center;\n        gap: 15px; /* Space between buttons */\n        margin-top: 15px;\n      }\n\n      .decision-button {\n        padding: 10px 20px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: bold;\n        transition: all 0.2s ease;\n      }\n      .decision-button:hover {\n        background: #f5f5f5;\n        border-color: #999;\n      }\n      .decision-button.process {\n        background-color: #4CAF50;\n        border-color: #4CAF50;\n        color: white;\n      }\n      .decision-button.process:hover {\n        background-color: #45a049;\n      }\n      .decision-button.discard {\n        background-color: #f44336;\n        border-color: #f44336;\n        color: white;\n      }\n      .decision-button.discard:hover {\n        background-color: #e53935;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <!-- Fixed section: Tabs + Actions -->\n      <div class=\"fixed-section\">\n        <div class=\"nav-tabs\">\n          <button class=\"nav-tab active\" data-click=\"production\" id=\"nav_production\">Production</button>\n          <button class=\"nav-tab\" data-click=\"templates\" id=\"nav_templates\">Templates/AI</button>\n          <button class=\"nav-tab\" data-click=\"archives\" id=\"nav_archives\">Archives</button>\n          <button class=\"nav-tab\" data-click=\"settings\" id=\"nav_settings\">Settings</button>\n        </div>\n        <div class=\"actions-row\">\n          <div class=\"time\">11:44</div>\n        </div>\n      </div>\n\n      <!-- Scrollable content -->\n      <div class=\"scrollable-content\">\n        <!-- Settings Section -->\n        <div class=\"parameters-section\">\n          <div class=\"parameter-row\">\n            <label id=\"label_template\">Template</label>\n            <div class=\"template-select-container\">\n              <button class=\"select-button\" id=\"templateSelectBtn\">\n                <span id=\"select_template_placeholder\">Select a template</span>\n                <span>▼</span>\n              </button>\n            </div>\n          </div>\n          <div class=\"parameter-row\">\n            <label id=\"label_language\">Language</label>\n            <div class=\"dropdown\" id=\"langueDropdown\">\n              <span>🇬🇧</span>\n              <span class=\"arrow\">▼</span>\n              <div class=\"dropdown-menu\">\n                <div data-value=\"🇫🇷\">🇫🇷</div>\n                <div data-value=\"🇬🇧\">🇬🇧</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- Audio Section (Playback + Recording) -->\n        <!-- ADD THIS NEW BLOCK IN ITS PLACE -->\n        <div class=\"audio-section\">\n          <!-- Playback bar is now hidden by default, shown when audio is ready -->\n          <div id=\"audioBar\" style=\"display: none;\">\n            <button id=\"audioPlaybackControl\">▶</button>\n            <div id=\"audioProgress\">\n              <div id=\"audioProgressBar\"></div>\n            </div>\n            <span id=\"audioDuration\">0:00 / 0:00</span>\n            <button id=\"clearRecordingButton\" title=\"Reset recording\">🗑</button>\n            <div id=\"mobileAudioDisplay\"></div>\n          </div>\n\n          <!-- Container for the initial input state -->\n          <div id=\"audioInputContainer\">\n            <!-- Mode toggle -->\n            <div class=\"mode-toggle\">\n              <button id=\"recordButton\" class=\"toggle-button active\">Record</button>\n              <button id=\"uploadButton\" class=\"toggle-button\">Upload a voice memo</button>\n            </div>\n\n            <!-- Recording Mode -->\n            <div class=\"recording-controls\" id=\"recordingMode\">\n              <div id=\"circularProgress\">\n                <div id=\"progressRing\"></div>\n                <div id=\"centerHole\"></div>\n                <div class=\"control-button-group\">\n                  <button id=\"playButton\" class=\"control-button\">\n                    <!-- SVG icon -->\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/><path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/><path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/></svg>\n                  </button>\n                  <button id=\"stopButton\" class=\"control-button\">\n                    <!-- SVG icon -->\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\"><path d=\"M4 12l5 5L20 7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/></svg>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            <!-- Upload Mode -->\n            <div class=\"upload-section\" id=\"uploadMode\" style=\"display: none;\">\n              <div class=\"upload-container\" id=\"dropZone\">\n                <div class=\"upload-icon\">📋</div>\n                <div class=\"upload-text\" id=\"upload_text_drop\">Drop your voice memo here</div>\n                <div class=\"upload-description\" id=\"upload_description_select\">or click to select a file</div>\n                <input type=\"file\" id=\"audioFileInput\" accept=\"audio/*,.m4a,.caf\">\n                <label for=\"audioFileInput\" class=\"upload-button\" id=\"upload_button_select\">Select file</label>\n              </div>\n              <div class=\"ios-instructions\" style=\"display: none;\"> <!-- Hidden by default -->\n                <h4>For iPhone users:</h4>\n                <p>To use your voice memos:</p>\n                <ol>\n                  <li>Open the <strong>Files</strong> app on your iPhone.</li>\n                  <li>Locate the voice memo (e.g., in <strong>On My iPhone > Voice Memos</strong>).</li>\n                  <li>Tap and hold the file, choose <strong>Share</strong>, then <strong>Save to Files</strong>.</li>\n                  <li>Save it to an accessible location like <strong>iCloud Drive</strong>.</li>\n                  <li>Return here and use the <strong>\"Select file\"</strong> button.</li>\n                </ol>\n              </div>\n            </div>\n          </div>\n\n          <!-- Container for the decision state (Process/Discard) -->\n          <div id=\"audioDecisionContainer\" style=\"display: none;\">\n            <button id=\"discardAudioBtn\" class=\"decision-button discard\">Discard Audio</button>\n            <button id=\"processAudioBtn\" class=\"decision-button process\">Process Audio</button>\n          </div>\n\n          <audio id=\"audioPlayback\" style=\"display: none;\"></audio>\n        </div>\n\n        <!-- Editor Section -->\n        <div class=\"editor-section\">\n          <div id=\"toolbar\">\n            <button class=\"toolbar-button\" id=\"boldBtn\"><b>B</b></button>\n            <button class=\"toolbar-button\" id=\"italicBtn\"><i>I</i></button>\n            <button class=\"toolbar-button\" id=\"underlineBtn\"><u>U</u></button>\n            <button class=\"toolbar-button\" id=\"leftAlignBtn\">Left</button>\n            <button class=\"toolbar-button\" id=\"centerAlignBtn\">Center</button>\n            <button class=\"toolbar-button\" id=\"rightAlignBtn\">Right</button>\n            <button class=\"toolbar-button\" id=\"insertImageBtn\">Image</button>\n            <button class=\"toolbar-button recording\" id=\"startToolbarRecBtn\" title=\"Toolbar recording\">🎤</button>\n            <button class=\"toolbar-button validate\" id=\"validateBtn\" title=\"Validate and send\">✓</button>\n            <span style=\"margin-left:auto;\"></span>\n            <button class=\"toolbar-button\" id=\"copyBtn\">Copy</button>\n          </div>\n          <div id=\"editor\" contenteditable=\"true\"></div>\n        </div>\n\n        <!-- Stable anchor for Python calls that might occur when other elements are hidden -->\n        <div id=\"stableAnchor\" style=\"display:none;\"></div>\n      </div>\n\n      <!-- Bottom buttons -->\n      <div class=\"bottom-buttons\">\n        <button class=\"bottom-button\" data-click=\"statut\" id=\"button_status\">Status</button>\n        <button class=\"bottom-button\" data-click=\"enregistrer\" id=\"button_archive\">Archive</button>\n        <button class=\"bottom-button\" data-click=\"partager\" id=\"button_share\">Share</button>\n      </div>\n    </div>\n\n    <!-- Modals -->\n    <div class=\"patient-select-container\">\n      <div class=\"modal\" id=\"patientModal\">\n        <div class=\"modal-content\">\n          <button class=\"close-button\" id=\"closePatientModalBtn\">✕</button>\n          <div class=\"modal-header\">\n            <h3 class=\"modal-title\" id=\"select_patient_title\">Select a patient</h3>\n            <div class=\"search-container\">\n              <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n              </svg>\n              <div id=\"patientSearchHolder\">\n                <input type=\"text\" class=\"search-input\" placeholder=\"Search for a patient...\" id=\"searchInput\">\n              </div>\n            </div>\n          </div>\n          <button class=\"new-patient-btn\" id=\"newPatientBtn\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\"></path><circle cx=\"9\" cy=\"7\" r=\"4\"></circle><line x1=\"19\" y1=\"8\" x2=\"19\" y2=\"14\"></line><line x1=\"16\" y1=\"11\" x2=\"22\" y2=\"11\"></line>\n            </svg>\n            New patient\n          </button>\n          <div class=\"divider\"></div>\n          <div class=\"patients-list\" id=\"patientsList\"></div>\n        </div>\n      </div>\n    </div>\n    <div class=\"template-select-container\">\n      <div class=\"modal\" id=\"templateModal\">\n        <div class=\"modal-content\">\n          <button class=\"close-button\" id=\"closeTemplateModalBtn\">✕</button>\n          <div class=\"modal-header\">\n            <h3 class=\"modal-title\" id=\"select_template_title\">Select a template</h3>\n            <div class=\"search-container\">\n              <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n              </svg>\n              <input type=\"text\" class=\"search-input\" placeholder=\"Search for a template...\" id=\"templateSearchInput\">\n            </div>\n          </div>\n          <div class=\"templates-list\" id=\"templatesList\"></div>\n        </div>\n      </div>\n    </div>\n    <div id=\"bannerContainer\"></div>\n\n    <!-- Main script (JS) -->\n    <script>\n      // ============================================================================================\n      // JAVASCRIPT FOR AUDIO MANAGEMENT INTERFACE\n      // Following Anvil's Golden Rules for Custom HTML\n      // ============================================================================================\n\n      // --------------------------------------------------------------------------------------------\n      // SECTION 1: PYTHON-CALLABLE FUNCTIONS\n      // These functions are defined directly on `window` so Python can always access them.\n      // --------------------------------------------------------------------------------------------\n\n      window.setElementText = function(elementId, newText) {\n      const element = document.getElementById(elementId);\n      if (!element) return;\n      // This pattern safely updates text on elements with or without icons (like SVGs)\n      const targetSpan = element.querySelector('span');\n      if (targetSpan && element.children.length > 0 && !targetSpan.classList.contains('arrow')) {\n      targetSpan.textContent = newText;\n      } else {\n      element.textContent = newText;\n      }\n      };\n\n      window.setPlaceholderById = function(elementId, newText) {\n      const element = document.getElementById(elementId);\n      if (element) {\n      element.placeholder = newText;\n      }\n      };\n\n      window.getDropdownSelectedValue = function(dropdownId) {\n      const dropdown = document.getElementById(dropdownId);\n      if (!dropdown) return \"\";\n      if (dropdownId === \"templateSelectBtn\" && dropdown.dataset.templateName) {\n      return dropdown.dataset.templateName;\n      }\n      const spanElem = dropdown.querySelector(\"span:first-child\");\n      return spanElem ? spanElem.textContent.trim() : \"\";\n      };\n\n      window.getEditorContent = function() {\n      const editor = document.getElementById('editor');\n      return editor ? editor.innerHTML : \"\";\n      };\n\n      window.setEditorContent = function(value) {\n      const editor = document.getElementById('editor');\n      if (editor) editor.innerHTML = value;\n      };\n\n      window.displayBanner = function(message, type) {\n      const bannerContainer = document.getElementById('bannerContainer');\n      if (!bannerContainer) return;\n      const banner = document.createElement('div');\n      banner.className = 'banner ' + (type === 'success' ? 'banner-success' : 'banner-error');\n      banner.textContent = message;\n      bannerContainer.appendChild(banner);\n      setTimeout(() => {\n      banner.style.opacity = '0';\n      setTimeout(() => banner.remove(), 300);\n      }, 3000);\n      };\n\n      window.rebuildPatientSearchInput = function() {\n      const searchHolder = document.getElementById(\"patientSearchHolder\");\n      if (searchHolder) {\n      const newInput = document.createElement(\"input\");\n      newInput.type = \"text\";\n      newInput.className = \"search-input\";\n      newInput.id = \"searchInput\";\n      newInput.placeholder = \"Search for a patient...\";\n      newInput.addEventListener('input', () => window.searchPatientsInModal(newInput.value));\n      searchHolder.innerHTML = \"\";\n      searchHolder.appendChild(newInput);\n      }\n      };\n\n      window.populateTemplateModal = function(templates) {\n      templates = templates.filter(t => t.priority === 1 || t.priority === 2);\n      templates.sort((a, b) => {\n      if (a.priority === 2 && b.priority !== 2) return -1;\n      if (b.priority === 2 && a.priority !== 2) return 1;\n      return a.template_name.localeCompare(b.template_name);\n      });\n      window.templatesData = templates;\n\n      let defaultTemplate = templates.find(t => t.priority === 2) || templates[0];\n      if (defaultTemplate) {\n      window.selectTemplate(defaultTemplate, false); // Select without closing modal\n      }\n      window.renderTemplates(templates); // Render the full list\n      };\n\n      // --------------------------------------------------------------------------------------------\n      // GOLDEN RULE 1: DEFINE GLOBAL VARIABLES AND HELPER FUNCTIONS ONLY ONCE\n      // --------------------------------------------------------------------------------------------\n      if (!window.__my_audio_manager_globals) {\n      window.__my_audio_manager_globals = true;\n      console.log(\"Initializing AudioManager globals...\");\n\n      // ===================================\n      // A. Global State Management\n      // ===================================\n      window.recordingState = {\n      mediaRecorder: null,\n      recordedChunks: [],\n      audioBlob: null,\n      stream: null,\n      isRecording: false,\n      isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,\n      recordRTC: null,\n      uploadedFile: null,\n      processingInProgress: false\n      };\n\n      window.toolbarRecorder = {\n      stream: null,\n      mediaRecorder: null,\n      isRecording: false,\n      recordedChunks: [],\n      bannerFlashInterval: null\n      };\n\n      window.wakeLockController = {\n      wakeLock: null,\n      noSleep: new NoSleep(),\n      request: function() {\n      if ('wakeLock' in navigator) {\n      navigator.wakeLock.request('screen')\n      .then(lock => { this.wakeLock = lock; console.log('Screen Wake Lock active.'); })\n      .catch(() => this.noSleep.enable()); // Fallback\n      } else {\n      this.noSleep.enable();\n      }\n      },\n      release: function() {\n      if (this.wakeLock) {\n      this.wakeLock.release().then(() => { this.wakeLock = null; console.log('Screen Wake Lock released.'); });\n      }\n      this.noSleep.disable();\n      }\n      };\n\n      // ===================================\n      // B. UI and Helper Functions\n      // ===================================\n      window.formatTime = (seconds) => {\n      if (isNaN(seconds) || !isFinite(seconds)) return \"0:00\";\n      const min = Math.floor(seconds / 60);\n      const sec = Math.floor(seconds % 60).toString().padStart(2, '0');\n      return `${min}:${sec}`;\n      };\n\n      window.formatFileSize = (bytes) => {\n      if (bytes < 1024) return bytes + ' B';\n      if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n      return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n      };\n\n      window.updateTime = () => {\n      const now = new Date();\n      const time = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      const timeElement = document.querySelector('.time');\n      if(timeElement) timeElement.textContent = time;\n      };\n\n      window.setRingPercentage = (percentage) => {\n      const ring = document.getElementById(\"progressRing\");\n      if (!ring) return;\n      const clamped = Math.max(0, Math.min(100, percentage));\n      const angle = (clamped / 100) * 360;\n      ring.style.background = `conic-gradient(#4caf50 ${angle}deg, #ddd ${angle}deg)`;\n      };\n\n      window.startRecordingFlash = () => {\n      const ring = document.getElementById(\"progressRing\");\n      if(ring) ring.classList.add(\"recording-flash\");\n      };\n\n      window.stopRecordingFlash = () => {\n      const ring = document.getElementById(\"progressRing\");\n      if(ring) ring.classList.remove(\"recording-flash\");\n      };\n\n      window.simulateTranscriptionProgress = () => {\n      window.transcriptionProgress = { current: 0, interval: null };\n      window.setRingPercentage(0);\n      window.transcriptionProgress.interval = setInterval(() => {\n      if (window.transcriptionProgress.current < 90) {\n      window.transcriptionProgress.current += 1;\n      window.setRingPercentage(window.transcriptionProgress.current);\n      } else {\n      clearInterval(window.transcriptionProgress.interval);\n      }\n      }, 400);\n      };\n\n      window.finishTranscriptionProgress = () => {\n      if (window.transcriptionProgress && window.transcriptionProgress.interval) {\n      clearInterval(window.transcriptionProgress.interval);\n      }\n      window.setRingPercentage(100);\n      };\n\n      window.updateMobileAudioDisplay = () => {\n      const display = document.getElementById(\"mobileAudioDisplay\");\n      if (!display) return;\n      if (window.recordingState.audioBlob) {\n      display.innerHTML = `Audio 🎵 <button id='mobileClearButton' style='background:none;border:none;font-size:1em;cursor:pointer;'>🗑</button>`;\n      document.getElementById('mobileClearButton').addEventListener('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      window.clearRecording();\n      });\n      } else {\n      display.innerHTML = \"\";\n      }\n      };\n\n      window.toggleMode = (mode) => {\n      const recMode = document.getElementById('recordingMode');\n      const upMode = document.getElementById('uploadMode');\n      const recBtn = document.getElementById('recordButton');\n      const upBtn = document.getElementById('uploadButton');\n      const isRecord = mode === 'record';\n\n      if(recMode) recMode.style.display = isRecord ? 'block' : 'none';\n      if(upMode) upMode.style.display = isRecord ? 'none' : 'block';\n      if(recBtn) recBtn.classList.toggle('active', isRecord);\n      if(upBtn) upBtn.classList.toggle('active', !isRecord);\n      };\n\n        // --- NEW: Central UI state controller ---\n        window.setAudioWorkflowState = (state) => {\n          console.log(`Setting audio workflow state to: ${state}`);\n          const inputContainer = document.getElementById('audioInputContainer');\n          const decisionContainer = document.getElementById('audioDecisionContainer');\n          const audioBar = document.getElementById('audioBar');\n          const isMobile = window.innerWidth <= 800;\n\n          if (state === 'decision') {\n            if(inputContainer) inputContainer.style.display = 'none';\n            if(decisionContainer) decisionContainer.style.display = 'flex';\n            if(audioBar) audioBar.style.display = 'flex'; // Always show the player on desktop\n            window.updateMobileAudioDisplay();\n          } else { // 'input' state by default\n            if(inputContainer) inputContainer.style.display = 'block';\n            if(decisionContainer) decisionContainer.style.display = 'none';\n            if(audioBar) audioBar.style.display = 'none';\n\n            // Reset player UI\n            const progBar = document.getElementById(\"audioProgressBar\");\n            if(progBar) progBar.style.width = \"0%\";\n            const duration = document.getElementById(\"audioDuration\");\n            if(duration) duration.textContent = \"0:00 / 0:00\";\n            const playbackBtn = document.getElementById('audioPlaybackControl');\n            if (playbackBtn) playbackBtn.textContent = '▶';\n            window.updateMobileAudioDisplay();\n          }\n        };\n\n      // ===================================\n      // C. Core Audio Recording Logic\n      // ===================================\n        // FINAL & CORRECT - This fixes the 'recorder.start is not a function' TypeError.\n        // REPLACE the window.startRecording function with this code.\n        window.startRecording = function(event) {\n          if (window.recordingState.isRecording) return;\n          window.wakeLockController.request();\n\n          navigator.mediaDevices.getUserMedia({ audio: true }).then(function(stream) {\n            try {\n              if (!stream || !stream.active) {\n                throw new Error(\"Received an invalid or inactive microphone stream.\");\n              }\n              window.recordingState.stream = stream;\n              let recorder;\n\n              // --- PLATFORM-SPECIFIC LOGIC ---\n              if (window.recordingState.isIOS) {\n                // iOS Path using RecordRTC.js\n                recorder = new RecordRTC(stream, {\n                  type: 'audio',\n                  mimeType: 'audio/wav',\n                  numberOfAudioChannels: 1\n                });\n                window.recordingState.recordRTC = recorder;\n\n                // This is the correct function name for RecordRTC\n                const startIOSRecording = () => {\n                  recorder.startRecording(); // <<< THE FIX IS HERE\n                };\n\n                if (recorder.audioContext && recorder.audioContext.state === 'suspended') {\n                  recorder.audioContext.resume().then(startIOSRecording).catch(e => { throw e; });\n                } else {\n                  startIOSRecording();\n                }\n\n              } else {\n                // Non-iOS Path using standard MediaRecorder\n                recorder = new MediaRecorder(stream);\n                window.recordingState.mediaRecorder = recorder;\n                window.recordingState.recordedChunks = [];\n                recorder.ondataavailable = e => { if (e.data.size > 0) window.recordingState.recordedChunks.push(e.data); };\n\n                // This path correctly uses .start()\n                recorder.start(); \n              }\n\n              // --- COMMON UI UPDATES ---\n              window.recordingState.isRecording = true;\n              anvil.call(event.target, \"start_recording\");\n              window.startRecordingFlash();\n              const playBtn = document.getElementById(\"playButton\");\n              if (playBtn) playBtn.innerHTML = '❚❚';\n\n            } catch (e) {\n              console.error(\"A CRITICAL ERROR OCCURRED INSIDE THE .then() BLOCK\", e);\n              let debugMessage = `A JavaScript error occurred: ${e.name} - ${e.message}\\n\\nStack:\\n${e.stack}`;\n              alert(debugMessage);\n              window.wakeLockController.release();\n            }\n          }).catch(function(err) {\n            console.error(\"getUserMedia promise was rejected.\", err);\n            alert(`Microphone permission failed. Error: ${err.name || 'Unknown'}. Please check your browser's site settings and try again.`);\n            window.wakeLockController.release();\n          });\n        };\n        // REPLACE the stopRecording function with this version\n        window.stopRecording = (event) => {\n          window.stopRecordingFlash();\n\n          const onStop = (blob) => {\n            window.recordingState.audioBlob = blob;\n            const audioURL = URL.createObjectURL(blob);\n            const audioEl = document.getElementById(\"audioPlayback\");\n            if (audioEl) {\n              audioEl.src = audioURL;\n              audioEl.load(); \n            }\n\n            // We DO NOT stop the stream here. We let clearRecording handle it.\n\n            window.setAudioWorkflowState('decision');\n\n            window.recordingState.isRecording = false;\n            document.getElementById(\"playButton\").innerHTML = '▶';\n            window.wakeLockController.release();\n          };\n\n          if (window.recordingState.isIOS && window.recordingState.recordRTC) {\n            window.recordingState.recordRTC.stopRecording(() => {\n              onStop(window.recordingState.recordRTC.getBlob());\n            });\n          } else if (window.recordingState.mediaRecorder) {\n            window.recordingState.mediaRecorder.onstop = () => {\n              onStop(new Blob(window.recordingState.recordedChunks, { type: 'audio/webm' }));\n            };\n            window.recordingState.mediaRecorder.stop();\n          }\n        };\n        // REPLACE the clearRecording function with this one\n        window.clearRecording = () => {\n          // Stop any active recorder instances first\n          if (window.recordingState.isRecording && window.recordingState.mediaRecorder) {\n            window.recordingState.mediaRecorder.stop();\n          }\n          if (window.recordingState.recordRTC) {\n            // RecordRTC's destroy method also handles stopping the stream tracks.\n            window.recordingState.recordRTC.destroy();\n          }\n\n          // Explicitly stop tracks for non-RecordRTC cases or as a fallback\n          if (window.recordingState.stream) {\n            window.recordingState.stream.getTracks().forEach(track => track.stop());\n          }\n\n          // Reset state object completely\n          Object.assign(window.recordingState, {\n            mediaRecorder: null,\n            recordedChunks: [],\n            audioBlob: null,\n            stream: null, // Ensure stream is cleared\n            isRecording: false,\n            recordRTC: null\n          });\n\n          // Reset all UI to the initial state\n          document.getElementById(\"audioPlayback\").src = \"\";\n          document.getElementById(\"playButton\").innerHTML = '▶';\n          window.stopRecordingFlash();\n          window.setRingPercentage(0);\n          document.getElementById(\"audioFileInput\").value = '';\n  // We DO NOT stop the stream here. We let clearRecording handle it.\n          window.setAudioWorkflowState('input');\n        };\n      // ===================================\n      // D. Audio Processing and Uploading\n      // ===================================\n        window.processRecordedAudio = async (blob, eventTarget) => {\n          // Show progress on the recording ring while processing\n          window.setAudioWorkflowState('input'); // Go back to input view...\n          window.toggleMode('record'); // ...and show the progress ring\n          window.simulateTranscriptionProgress();\n\n          try {\n            const result = await anvil.call(eventTarget, 'process_recording', blob);\n            if (result && result.error) alert(result.error);\n          } catch (err) {\n            alert('Error processing audio: ' + (err.message || err));\n          } finally {\n            window.finishTranscriptionProgress();\n            // After processing, completely reset the interface for the next use\n            window.clearRecording();\n          }\n        };\n\n        window.handleFileSelect = (event) => {\n          const file = event.dataTransfer ? event.dataTransfer.files[0] : event.target.files[0];\n          if (!file) return;\n          if (!file.type.startsWith('audio/') && !/\\.(m4a|caf|mp3|aac|wav)$/i.test(file.name)) {\n            return alert('Please select a valid audio file.');\n          }\n          window.recordingState.audioBlob = file; \n          const audioURL = URL.createObjectURL(file);\n          document.getElementById(\"audioPlayback\").src = audioURL;\n\n          // NEW WORKFLOW: Move to decision state\n          window.setAudioWorkflowState('decision');\n        };\n\n      window.processUploadedFile = () => {\n      const { audioBlob } = window.recordingState;\n      if (!audioBlob) return alert(\"No file selected to process.\");\n      window.toggleMode('record'); // Switch to progress view\n      window.processRecordedAudio(audioBlob, document.getElementById('stableAnchor'));\n      };\n\n\n      // ===================================\n      // E. Toolbar and Editor Logic\n      // ===================================\n      window.formatDoc = (cmd) => document.execCommand(cmd, false, null);\n\n      window.copyEditorContent = () => {\n      const editor = document.getElementById('editor');\n      if (editor) {\n      navigator.clipboard.writeText(editor.innerText || editor.textContent)\n      .then(() => window.displayBanner('Content copied!', 'success'))\n      .catch(() => alert('Copy failed.'));\n      }\n      };\n\n      // ===================================\n      // F. Modal Logic (Patient & Template)\n      // ===================================\n      window.openModal = (id) => { document.getElementById(id).style.display = 'block'; };\n      window.closeModal = (id) => { document.getElementById(id).style.display = 'none'; };\n\n      window.renderTemplates = (templates) => {\n      const list = document.getElementById('templatesList');\n      if (!list) return;\n      list.innerHTML = '';\n      templates.forEach(t => {\n      const button = document.createElement('button');\n      button.className = 'template-item';\n      button.innerHTML = `<span>${t.template_name}</span> <span class=\"star-icon\" style=\"color:${t.priority === 2 ? 'green' : 'yellow'}\">★</span>`;\n      button.addEventListener('click', () => window.selectTemplate(t));\n      list.appendChild(button);\n      });\n      };\n\n      window.selectTemplate = (template, closeModal = true) => {\n      window.selectedTemplate = template;\n      const btn = document.getElementById('templateSelectBtn');\n      if (btn) {\n      btn.dataset.templateName = template.template_name;\n      const display = btn.querySelector('span:first-child');\n      if(display) display.innerHTML = `${template.template_name} <span class=\"star-icon\" style=\"color:${template.priority === 2 ? 'green' : 'yellow'}\">★</span>`;\n      }\n      window.setEditorContent(template.display_template ? template.text_to_display : '');\n      if(closeModal) window.closeModal('templateModal');\n      };\n\n      window.openPatientModalForSave = () => {\n      window.openModal('patientModal');\n      window.rebuildPatientSearchInput();\n      window.searchPatientsInModal('');\n      };\n\n      window.searchPatientsInModal = (term) => {\n      anvil.call(document.getElementById('stableAnchor'), 'search_patients_relay', term)\n      .then(patients => {\n      const list = document.getElementById('patientsList');\n      if(list) {\n      list.innerHTML = '';\n      patients.forEach(p => {\n      const btn = document.createElement('button');\n      btn.className = 'patient-item';\n      btn.textContent = p.name;\n      btn.onclick = () => window.selectPatientForSave(p.unique_id, p.name);\n      list.appendChild(btn);\n      });\n      }\n      });\n      };\n\n      window.selectPatientForSave = (id, name) => {\n      window.selectedPatient = { unique_id: id, name: name };\n      window.closeModal('patientModal');\n      window.continueSave();\n      };\n\n      window.continueSave = () => {\n      const content = window._saveContentData.content;\n      const images = window._saveContentData.images;\n      anvil.call(document.getElementById('stableAnchor'), 'save_report', JSON.stringify({ content }), images, window.selectedPatient)\n      .then(ok => window.displayBanner(ok ? \"Report saved.\" : \"Save failed.\", ok ? 'success' : 'error'));\n      };\n\n      } // End of __my_audio_manager_globals guard\n\n      // --------------------------------------------------------------------------------------------\n      // GOLDEN RULE 2: ALWAYS ATTACH EVENT LISTENERS IN A DEDICATED FUNCTION\n      // --------------------------------------------------------------------------------------------\n      window.__attachAudioManagerEvents = function() {\n      console.log(\"Attaching AudioManager events...\");\n\n      const reattach = (id, event, handler) => {\n      const el = document.getElementById(id);\n      if(el) {\n      const newEl = el.cloneNode(true);\n      el.parentNode.replaceChild(newEl, el);\n      newEl.addEventListener(event, handler);\n      }\n      };\n\n      // --- Navigation ---\n      document.querySelectorAll('.nav-tab').forEach(tab => reattach(tab.id, 'click', e => anvil.call(e.target, `open_${e.target.dataset.click}_form`)));\n\n      // --- Main Audio Controls ---\n      reattach('playButton', 'click', window.startRecording);\n      reattach('stopButton', 'click', window.stopRecording);\n      // --- Audio Playback Logic ---\n      const audioEl = document.getElementById('audioPlayback');\n      const playbackBtn = document.getElementById('audioPlaybackControl');\n      const progressDiv = document.getElementById('audioProgress');\n      const progressBar = document.getElementById('audioProgressBar');\n      const durationSpan = document.getElementById('audioDuration');\n\n      if (audioEl) {\n      audioEl.addEventListener('timeupdate', () => {\n      const { currentTime, duration } = audioEl;\n      if (!duration || isNaN(duration)) return;\n      progressBar.style.width = `${(currentTime / duration) * 100}%`;\n      durationSpan.textContent = `${window.formatTime(currentTime)} / ${window.formatTime(duration)}`;\n      });\n\n      audioEl.addEventListener('loadedmetadata', () => {\n      const { duration } = audioEl;\n      if (!duration || isNaN(duration)) return;\n      durationSpan.textContent = `0:00 / ${window.formatTime(duration)}`;\n      });\n\n      audioEl.addEventListener('ended', () => {\n      if(playbackBtn) playbackBtn.textContent = '▶';\n      if(progressBar) progressBar.style.width = '0%';\n      });\n      }\n\n      const togglePlayback = () => {\n      if (!audioEl || !audioEl.src || isNaN(audioEl.duration)) return;\n      if (audioEl.paused) {\n      audioEl.play();\n      playbackBtn.textContent = '❚❚';\n      } else {\n      audioEl.pause();\n      playbackBtn.textContent = '▶';\n      }\n      };\n      reattach('audioPlaybackControl', 'click', togglePlayback);\n\n      const seek = (e) => {\n      if (!audioEl || !audioEl.src || !progressDiv || isNaN(audioEl.duration)) return;\n      const rect = progressDiv.getBoundingClientRect();\n      const offsetX = e.clientX - rect.left;\n      audioEl.currentTime = (offsetX / rect.width) * audioEl.duration;\n      };\n      reattach('audioProgress', 'click', seek);\n\n      // --- Mode Toggle & Upload ---\n      reattach('recordButton', 'click', () => window.toggleMode('record'));\n      reattach('uploadButton', 'click', () => window.toggleMode('upload'));\n\n      const dropZone = document.getElementById('dropZone');\n      if (dropZone) {\n      const newZone = dropZone.cloneNode(true);\n      dropZone.parentNode.replaceChild(newZone, dropZone);\n      newZone.addEventListener('dragover', e => { e.preventDefault(); newZone.classList.add('dragover'); });\n      newZone.addEventListener('dragleave', () => newZone.classList.remove('dragover'));\n      newZone.addEventListener('drop', e => { e.preventDefault(); newZone.classList.remove('dragover'); window.handleFileSelect(e); });\n      newZone.addEventListener('click', e => { if (!e.target.closest('label')) newZone.querySelector('#audioFileInput').click(); });\n      newZone.querySelector('#audioFileInput').addEventListener('change', window.handleFileSelect);\n      }\n\n        // --- Main Audio Input Controls ---\n        reattach('playButton', 'click', window.startRecording);\n        reattach('stopButton', 'click', window.stopRecording);\n        // This is the trashcan on the player bar, it should also reset everything\n        reattach('clearRecordingButton', 'click', window.clearRecording); \n\n        // --- NEW: Decision Buttons ---\n        reattach('discardAudioBtn', 'click', window.clearRecording);\n        reattach('processAudioBtn', 'click', () => {\n          const { audioBlob } = window.recordingState;\n          if (!audioBlob) return alert(\"No audio available to process.\");\n          window.processRecordedAudio(audioBlob, document.getElementById('stableAnchor'));\n        });\n\n      // --- Settings ---\n      reattach('templateSelectBtn', 'click', () => window.openModal('templateModal'));\n\n      const langDropdown = document.getElementById('langueDropdown');\n      if(langDropdown) {\n      const newDd = langDropdown.cloneNode(true);\n      langDropdown.parentNode.replaceChild(newDd, langDropdown);\n      newDd.addEventListener('click', e => { if(!e.target.closest('.dropdown-menu')) newDd.querySelector('.dropdown-menu').classList.toggle('active'); });\n      newDd.querySelectorAll('.dropdown-menu div').forEach(item => {\n      item.addEventListener('click', e => {\n      e.stopPropagation();\n      newDd.querySelector('span:first-child').textContent = item.dataset.value;\n      newDd.querySelector('.dropdown-menu').classList.remove('active');\n      });\n      });\n      }\n\n      // --- Editor Toolbar ---\n      reattach('boldBtn', 'click', () => window.formatDoc('bold'));\n      reattach('italicBtn', 'click', () => window.formatDoc('italic'));\n      reattach('underlineBtn', 'click', () => window.formatDoc('underline'));\n      reattach('leftAlignBtn', 'click', () => window.formatDoc('justifyLeft'));\n      reattach('centerAlignBtn', 'click', () => window.formatDoc('justifyCenter'));\n      reattach('rightAlignBtn', 'click', () => window.formatDoc('justifyRight'));\n      reattach('copyBtn', 'click', window.copyEditorContent);\n      // Add other toolbar buttons if needed (e.g., image)\n\n      // --- Bottom Buttons ---\n      reattach('button_archive', 'click', () => {\n      window._saveContentData = { content: window.getEditorContent(), images: [] /* Add image logic if needed */ };\n      window.openPatientModalForSave();\n      });\n      // Add other bottom buttons (status, share)\n      reattach('button_share', 'click', () => window.displayBanner(\"Share feature coming soon.\", \"success\"));\n      reattach('button_status', 'click', e => anvil.call(e.target, 'on_statut_clicked').then(status => { if(status) e.target.textContent = status; }));\n\n\n      // --- Modals ---\n      reattach('closePatientModalBtn', 'click', () => window.closeModal('patientModal'));\n      reattach('newPatientBtn', 'click', () => {\n      anvil.call(document.getElementById('stableAnchor'), 'get_new_patient_details').then(details => {\n      if(details) {\n      window.selectPatientForSave(null, details.name);\n      }\n      });\n      });\n      reattach('closeTemplateModalBtn', 'click', () => window.closeModal('templateModal'));\n      reattach('templateSearchInput', 'input', e => anvil.call(document.getElementById('stableAnchor'), 'search_template_relay', e.target.value).then(window.renderTemplates));\n\n      // --- Final Setup ---\n        if (window.recordingState.isIOS) {\n          const instructions = document.querySelector('.ios-instructions');\n          if (instructions) instructions.style.display = 'block';\n        }\n      window.updateTime();\n      if(!window.timeInterval) window.timeInterval = setInterval(window.updateTime, 60000);\n      \n        window.setAudioWorkflowState('input');\n      };\n\n      // --------------------------------------------------------------------------------------------\n      // GOLDEN RULE 3: IMMEDIATELY ATTACH EVERYTHING\n      // --------------------------------------------------------------------------------------------\n      window.__attachAudioManagerEvents();\n\n    </script>\n  </body>\n</html>"
  type: HtmlTemplate
is_package: true
