components:
- layout_properties: {slot: editor_slot}
  name: text_editor_1
  properties: {}
  type: form:Components.TextEditor
- data_bindings:
  - {code: '', property: item, writeback: false}
  layout_properties: {slot: recorder_slot}
  name: recording_widget
  properties: {}
  type: form:Components.RecordingWidget
- layout_properties: {slot: default}
  name: header_nav_1
  properties: {active_tab: Production}
  type: form:Components.HeaderNav
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <!-- Responsive for mobile devices -->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <title>Audio Management Interface</title>\n\n    <!-- External libraries for iOS compatibility and functionality -->\n    <script src=\"https://www.webrtc-experiment.com/RecordRTC.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/nosleep/0.12.0/NoSleep.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n\n    <style>\n      /* =====================================================\n      Basic styles (Unchanged to preserve look and feel)\n      ===================================================== */\n      * {\n        box-sizing: border-box;\n        font-family: Arial, sans-serif;\n        margin: 0;\n        padding: 0;\n      }\n      body {\n        background-color: #f5f5f5;\n        height: 100vh;\n        overflow: hidden;\n      }\n      .container {\n        display: flex;\n        flex-direction: column;\n        height: 100vh;\n        width: 100%;\n        max-width: 800px;\n        margin: 0 auto;\n        background-color: white;\n        box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      }\n      /* =====================================================\n      Fixed section (tabs + actions)\n      ===================================================== */\n      .fixed-section {\n        background: white;\n        z-index: 10;\n      }\n\n      .actions-row {\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        padding: 15px 20px;\n      }\n      .time {\n        color: #666;\n        font-size: 14px;\n      }\n      /* =====================================================\n      Scrollable content\n      ===================================================== */\n      .scrollable-content {\n        flex: 1;\n        overflow-y: auto;\n        padding: 20px;\n        padding-bottom: 80px;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      /* =====================================================\n      AUDIO section (playback + recording)\n      ===================================================== */\n      .audio-section {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        margin-bottom: 20px;\n        position: relative;\n      }\n      #audioBar {\n        width: 100%;\n        height: 50px;\n        background-color: #f8f8f8;\n        border-radius: 5px;\n        display: flex;\n        align-items: center;\n        padding: 0 10px;\n        margin-bottom: 20px;\n        border: 1px solid #ddd;\n        position: relative;\n      }\n      #audioPlaybackControl {\n        width: 30px;\n        height: 30px;\n        background-color: #4CAF50;\n        border: none;\n        border-radius: 50%;\n        color: white;\n        font-size: 16px;\n        cursor: pointer;\n        margin-right: 10px;\n      }\n      #audioProgress {\n        flex-grow: 1;\n        height: 10px;\n        background-color: #ddd;\n        border-radius: 5px;\n        overflow: hidden;\n        cursor: pointer;\n        margin-right: 10px;\n        touch-action: none;\n      }\n      #audioProgressBar {\n        width: 0;\n        height: 100%;\n        background-color: #4CAF50;\n        transition: width 0.1s linear;\n      }\n      #audioDuration {\n        font-size: 14px;\n      }\n      #clearRecordingButton {\n        background: none;\n        border: none;\n        font-size: 18px;\n        cursor: pointer;\n        color: #666;\n        margin-left: 10px;\n      }\n      #clearRecordingButton:hover {\n        color: #000;\n      }\n      #retryProcessBtn {\n        position: absolute;\n        top: -40px;\n        right: 10px;\n        padding: 8px 12px;\n        background-color: #4caf50;\n        color: white;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        display: none;\n      }\n      /* =====================================================\n      Upload Voice Memo Section for all devices\n      ===================================================== */\n      .upload-section {\n        margin: 20px auto;\n        max-width: 400px;\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n\n      .upload-container {\n        width: 100%;\n        border: 2px dashed #aaa;\n        border-radius: 10px;\n        padding: 20px;\n        text-align: center;\n        background-color: #f8f8f8;\n        transition: all 0.3s ease;\n        cursor: pointer;\n        margin-bottom: 15px;\n      }\n\n      .upload-container:hover {\n        border-color: #4CAF50;\n        background-color: #f0f9f0;\n      }\n\n      .upload-container.dragover {\n        border-color: #4CAF50;\n        background-color: #e7f6e7;\n        transform: scale(1.02);\n      }\n\n      .upload-icon {\n        font-size: 40px;\n        color: #666;\n        margin-bottom: 10px;\n      }\n\n      .upload-text {\n        color: #333;\n        font-size: 16px;\n        margin-bottom: 5px;\n      }\n\n      .upload-description {\n        color: #666;\n        font-size: 14px;\n        margin-bottom: 15px;\n      }\n\n      .upload-button {\n        background-color: #4CAF50;\n        color: white;\n        border: none;\n        padding: 10px 20px;\n        border-radius: 5px;\n        font-size: 16px;\n        cursor: pointer;\n        transition: background-color 0.3s;\n        min-height: 44px; /* iOS minimum touch target size */\n      }\n\n      .upload-button:hover {\n        background-color: #45a049;\n      }\n\n      .upload-button:active {\n        transform: scale(0.98);\n        opacity: 0.9;\n      }\n\n      #audioFileInput {\n        display: none;\n      }\n\n      .file-info {\n        display: none;\n        margin-top: 15px;\n        padding: 10px;\n        background-color: #e8f5e9;\n        border-radius: 5px;\n        width: 100%;\n        font-size: 14px;\n      }\n\n      .file-name {\n        font-weight: bold;\n        word-break: break-all;\n      }\n\n      .file-size {\n        color: #666;\n      }\n\n      .file-actions {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 10px;\n      }\n\n      .file-button {\n        padding: 5px 10px;\n        border-radius: 3px;\n        border: none;\n        font-size: 14px;\n        cursor: pointer;\n        min-height: 36px;\n      }\n\n      .process-file-button {\n        background-color: #4CAF50;\n        color: white;\n      }\n\n      .remove-file-button {\n        background-color: #f44336;\n        color: white;\n      }\n\n      .format-warning {\n        display: none;\n        margin-top: 10px;\n        padding: 8px;\n        background-color: #fff3e0;\n        border-left: 4px solid #ff9800;\n        font-size: 13px;\n        color: #6d4c41;\n      }\n\n      /* iOS-specific guidance */\n      .ios-instructions {\n        margin: 15px 0;\n        padding: 15px;\n        background-color: #f8f9fa;\n        border-left: 4px solid #007aff;\n        border-radius: 4px;\n        font-size: 14px;\n        display: none; /* Hidden by default, shown by JS for iOS */\n      }\n\n      .ios-instructions h4 {\n        color: #007aff;\n        margin-top: 0;\n        margin-bottom: 10px;\n      }\n\n      .ios-instructions ol {\n        padding-left: 20px;\n      }\n\n      .ios-instructions li {\n        margin-bottom: 8px;\n      }\n\n      /* Toggle between upload and recording */\n      .mode-toggle {\n        display: flex;\n        justify-content: center;\n        margin-bottom: 15px; /* Reduced from 20px */\n        border-bottom: 1px solid #eee;\n        padding-bottom: 10px; /* Reduced from 15px */\n      }\n\n      .toggle-button {\n        padding: 8px 16px;\n        margin: 0 5px;\n        background-color: #f1f1f1;\n        border: 1px solid #ddd;\n        border-radius: 20px;\n        font-size: 14px;\n        cursor: pointer;\n        transition: all 0.3s ease;\n      }\n\n      .toggle-button.active {\n        background-color: #4CAF50;\n        color: white;\n        border-color: #4CAF50;\n      }\n\n      /* Mobile audio display (only on mobile) */\n      #mobileAudioDisplay {\n        display: none;\n        width: 100%;\n        text-align: center;\n        font-size: 16px;\n        font-weight: bold;\n        color: #333;\n      }\n\n      /* =====================================================\n      Settings Section\n      ===================================================== */\n      .parameters-section {\n        background: white;\n        padding: 20px;\n        border-radius: 8px;\n        margin-bottom: 20px;\n      }\n      .parameter-row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 15px;\n      }\n      .parameter-row label {\n        font-weight: bold;\n        margin-right: 10px;\n      }\n      .template-select-container .select-button {\n        min-width: 200px;\n        padding: 8px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        font-size: 14px;\n      }\n      .dropdown {\n        min-width: 200px;\n        padding: 8px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n        position: relative;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .arrow { margin-left: 10px; color: #666; }\n      .dropdown-menu {\n        position: absolute;\n        top: 100%;\n        left: 0;\n        width: 100%;\n        background: white;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        display: none;\n        z-index: 1000;\n      }\n      .dropdown-menu.active { display: block; }\n      .dropdown-menu div {\n        padding: 8px;\n        cursor: pointer;\n      }\n      .dropdown-menu div:hover { background: #f5f5f5; }\n\n      /* =====================================================\n      Bottom buttons\n      ===================================================== */\n      .bottom-buttons {\n        position: fixed;\n        bottom: 0;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 800px;\n        max-width: 100%;\n        background: white;\n        padding: 15px 20px;\n        display: flex;\n        justify-content: center;\n        gap: 20px;\n        border-top: 1px solid #ddd;\n        box-shadow: 0 -2px 4px rgba(0,0,0,0.1);\n        z-index: 10;\n      }\n      .bottom-button {\n        padding: 10px 30px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n        font-size: 14px;\n        transition: all 0.2s ease;\n      }\n      .bottom-button:hover {\n        background: #f5f5f5;\n        border-color: #999;\n      }\n\n      /* =====================================================\n      Patient selection modal (for saving)\n      ===================================================== */\n      .patient-select-container {\n        position: relative;\n        width: 300px;\n        font-family: system-ui, -apple-system, sans-serif;\n      }\n      .select-button#patientSelectBtn { display: none; }\n      .search-container { position: relative; margin-bottom: 20px; }\n      .search-icon {\n        position: absolute;\n        left: 12px;\n        top: 50%;\n        transform: translateY(-50%);\n        width: 16px;\n        height: 16px;\n        color: #666;\n      }\n      #patientSearchHolder {\n        /* Container rebuilt dynamically by Python->JS call */\n      }\n      .search-input {\n        width: 100%;\n        padding: 8px 12px 8px 36px;\n        border: 1px solid #ddd;\n        border-radius: 6px;\n        font-size: 14px;\n        box-sizing: border-box;\n      }\n      .search-input:focus {\n        outline: none;\n        border-color: #2563eb;\n        box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);\n      }\n      .new-patient-btn {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        width: 100%;\n        padding: 8px 12px;\n        background: none;\n        border: none;\n        border-radius: 6px;\n        color: #16a34a;\n        cursor: pointer;\n        font-size: 14px;\n        text-align: left;\n      }\n      .new-patient-btn:hover { background-color: #f0fdf4; }\n      .divider {\n        height: 1px;\n        background-color: #ddd;\n        margin: 15px 0;\n      }\n      .patients-list { max-height: 200px; overflow-y: auto; }\n      .patient-item {\n        display: block;\n        width: 100%;\n        padding: 8px 12px;\n        background: none;\n        border: none;\n        border-radius: 6px;\n        text-align: left;\n        cursor: pointer;\n        font-size: 14px;\n        color: #333;\n      }\n      .patient-item:hover { background-color: #f3f4f6; }\n      .close-button {\n        position: absolute;\n        top: 15px;\n        right: 15px;\n        background: none;\n        border: none;\n        cursor: pointer;\n        padding: 5px;\n        color: #666;\n      }\n\n      /* =====================================================\n      Template selection modal\n      ===================================================== */\n      .template-select-container .modal {\n        z-index: 1100;\n      }\n      #templateModal {\n        display: none;\n        position: fixed;\n        top: 0; left: 0;\n        width: 100%; height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n      }\n      #templateModal .modal-content {\n        margin: 15% auto;\n        padding: 20px;\n        width: 90%;\n        max-width: 400px;\n        border-radius: 8px;\n        box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n        position: relative;\n      }\n      #templateModal .modal-header { margin-bottom: 20px; }\n      #templateModal .modal-title {\n        font-size: 18px;\n        font-weight: 600;\n        margin: 0 0 15px 0;\n      }\n      #templateModal .search-container { position: relative; margin-bottom: 20px; }\n      #templateModal .search-icon {\n        position: absolute;\n        left: 12px;\n        top: 50%;\n        transform: translateY(-50%);\n        width: 16px;\n        height: 16px;\n        color: #666;\n      }\n      #templateModal .search-input {\n      width: 100%;\n      padding: 8px 12px 8px 36px;\n      border: 1px solid #ddd;\n      border-radius: 6px;\n      font-size: 14px;\n      box-sizing: border-box;\n      }\n      #templateModal .templates-list { max-height: 300px; overflow-y: auto; }\n      #templateModal .template-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n      padding: 8px 12px;\n      background: none;\n      border: none;\n      border-radius: 6px;\n      text-align: left;\n      cursor: pointer;\n      font-size: 14px;\n      color: #333;\n      }\n      #templateModal .template-item:hover { background: #f3f4f6; }\n      #templateModal .star-icon {\n      font-size: 16px;\n      line-height: 1;\n      }\n      #templateModal .close-button {\n      position: absolute;\n      top: 15px;\n      right: 15px;\n      background: none;\n      border: none;\n      cursor: pointer;\n      padding: 5px;\n      color: #666;\n      }\n\n      /* =====================================================\n      Banners (temporary messages)\n      ===================================================== */\n      #bannerContainer {\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      z-index: 2000;\n      width: 90%;\n      max-width: 400px;\n      }\n\n      .banner {\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      }\n      .banner-success {\n      background-color: #4caf50;\n      }\n      .banner-error {\n      background-color: #f44336;\n      }\n\n      /* =====================================================\n      Responsive design (mobile)\n      ===================================================== */\n      @media (max-width: 800px) {\n      .container {\n      height: 100vh;\n      }\n      .bottom-buttons {\n      width: 100%;\n      left: 0;\n      transform: none;\n      }\n      .nav-tab {\n      font-size: 12px;\n      padding: 6px 8px;\n      }\n      .actions-row {\n      padding: 10px 15px;\n      }\n      #audioBar {\n      height: auto;\n      padding: 10px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      }\n      #audioPlaybackControl,\n      #audioProgress,\n      #audioDuration,\n      #clearRecordingButton {\n      display: none;\n      }\n      #mobileAudioDisplay {\n      display: block;\n      }\n\n      .upload-section {\n      margin-top: 10px;\n      }\n      .mode-toggle {\n      margin-bottom: 10px;\n      padding-bottom: 10px;\n      }\n      .toggle-button {\n      font-size: 13px;\n      padding: 6px 12px;\n      }\n      @supports (-webkit-touch-callout: none) {\n      .upload-button, .file-button, .toggle-button {\n      padding: 12px 20px;\n      min-height: 44px;\n      font-size: 16px;\n      }\n      }\n      }\n      /* ADD THESE NEW STYLES */\n      #audioDecisionContainer {\n        display: none; /* Controlled by JS */\n        padding: 10px 0;\n        display: flex;\n        justify-content: center;\n        gap: 15px; /* Space between buttons */\n        margin-top: 15px;\n      }\n\n      .decision-button {\n        padding: 10px 20px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: white;\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: bold;\n        transition: all 0.2s ease;\n      }\n      .decision-button:hover {\n        background: #f5f5f5;\n        border-color: #999;\n      }\n      .decision-button.process {\n        background-color: #4CAF50;\n        border-color: #4CAF50;\n        color: white;\n      }\n      .decision-button.process:hover {\n        background-color: #45a049;\n      }\n      .decision-button.discard {\n        background-color: #f44336;\n        border-color: #f44336;\n        color: white;\n      }\n      .decision-button.discard:hover {\n        background-color: #e53935;\n      }\n      /* --- NEW STYLES FOR OFFLINE FEATURE --- */\n      .actions-row {\n        display: flex;\n        justify-content: space-between; /* Change this from flex-end */\n        align-items: center;\n        padding: 15px 20px;\n      }\n      .time {\n        color: #666;\n        font-size: 14px;\n      }\n      .queue-button {\n        padding: 8px 12px;\n        background: #f0f0f0;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        cursor: pointer;\n        font-size: 14px;\n        display: flex;\n        align-items: center;\n        gap: 5px;\n      }\n      .queue-button:hover { background: #e0e0e0; }\n      .queue-badge {\n        background-color: #f44336;\n        color: white;\n        border-radius: 50%;\n        padding: 2px 6px;\n        font-size: 11px;\n        font-weight: bold;\n        min-width: 18px;\n        text-align: center;\n        display: none; /* Hidden by default */\n      }\n      .modal {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.5);\n        z-index: 1000;\n        align-items: center;\n        justify-content: center;\n      }\n      .modal-content {\n        position: relative;\n        background-color: white;\n        padding: 20px;\n        width: 90%;\n        max-width: 500px;\n        border-radius: 8px;\n        box-shadow: 0 4px 10px rgba(0,0,0,0.2);\n      }\n      .modal-header {\n        font-size: 18px;\n        font-weight: bold;\n        margin-bottom: 15px;\n      }\n      .modal-body p { margin-bottom: 15px; }\n      .modal-body label { font-weight: bold; margin-bottom: 5px; display: block; }\n      .modal-body input {\n        width: 100%;\n        padding: 10px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-size: 16px;\n        margin-bottom: 15px;\n      }\n      .modal-footer {\n        display: flex;\n        justify-content: flex-end;\n        gap: 10px;\n        margin-top: 20px;\n      }\n      .queue-list { max-height: 300px; overflow-y: auto; }\n      .queue-item {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 10px;\n        border-bottom: 1px solid #eee;\n      }\n      .queue-item:last-child { border-bottom: none; }\n      .queue-item-title { font-weight: bold; }\n      .queue-item-status { font-size: 12px; color: #666; margin-top: 4px; }\n      .queue-item-actions button { margin-left: 10px; }\n      .button {\n        padding: 8px 16px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        background: #f5f5f5;\n        cursor: pointer;\n      }\n      .button-primary {\n        background-color: #4CAF50;\n        color: white;\n        border-color: #4CAF50;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <!-- Fixed section: Tabs + Actions -->\n      <div class=\"fixed-section\">\n        <div anvil-slot=\"default\"></div>\n        <div class=\"actions-row\">\n          <button class=\"queue-button\" id=\"viewQueueBtn\">\n            <span>Queue</span>\n            <span class=\"queue-badge\" id=\"queueBadge\">0</span>\n          </button>\n          <div class=\"time\">--:--</div>\n        </div>\n      </div>\n\n      <!-- Scrollable content -->\n      <div class=\"scrollable-content\">\n        <!-- Settings Section -->\n        <div class=\"parameters-section\">\n          <div class=\"parameter-row\">\n            <label id=\"label_template\">Template</label>\n            <div class=\"template-select-container\">\n              <button class=\"select-button\" id=\"templateSelectBtn\">\n                <span id=\"select_template_placeholder\">Select a template</span>\n                <span>▼</span>\n              </button>\n            </div>\n          </div>\n          <div class=\"parameter-row\">\n            <label id=\"label_language\">Language</label>\n            <div class=\"dropdown\" id=\"langueDropdown\">\n              <span>🇬🇧</span>\n              <span class=\"arrow\">▼</span>\n              <div class=\"dropdown-menu\">\n                <div data-value=\"🇫🇷\">🇫🇷</div>\n                <div data-value=\"🇬🇧\">🇬🇧</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- Audio Section (Playback + Recording) -->\n        <!-- ADD THIS NEW BLOCK IN ITS PLACE -->\n        <div class=\"audio-section\">\n          <!-- Playback bar is now hidden by default, shown when audio is ready -->\n          <div id=\"audioBar\" style=\"display: none;\">\n            <button id=\"audioPlaybackControl\">▶</button>\n            <div id=\"audioProgress\">\n              <div id=\"audioProgressBar\"></div>\n            </div>\n            <span id=\"audioDuration\">0:00 / 0:00</span>\n            <button id=\"clearRecordingButton\" title=\"Reset recording\">🗑</button>\n            <div id=\"mobileAudioDisplay\"></div>\n          </div>\n\n          <!-- Container for the initial input state -->\n          <div id=\"audioInputContainer\">\n            <!-- Mode toggle -->\n            <div class=\"mode-toggle\">\n              <button id=\"recordButton\" class=\"toggle-button active\">Record</button>\n              <button id=\"uploadButton\" class=\"toggle-button\">Upload a voice memo</button>\n            </div>\n\n            <!-- Recording Mode -->\n            <div class=\"recording-controls\" id=\"recordingMode\">\n              <div anvil-slot=\"recorder_slot\"></div>\n            </div>\n\n            <!-- Upload Mode -->\n            <div class=\"upload-section\" id=\"uploadMode\" style=\"display: none;\">\n              <div class=\"upload-container\" id=\"dropZone\">\n                <div class=\"upload-icon\">📋</div>\n                <div class=\"upload-text\" id=\"upload_text_drop\">Drop your voice memo here</div>\n                <div class=\"upload-description\" id=\"upload_description_select\">or click to select a file</div>\n                <input type=\"file\" id=\"audioFileInput\" accept=\"audio/*,.m4a,.caf\">\n                <label for=\"audioFileInput\" class=\"upload-button\" id=\"upload_button_select\">Select file</label>\n              </div>\n              <div class=\"ios-instructions\" style=\"display: none;\"> <!-- Hidden by default -->\n                <h4>For iPhone users:</h4>\n                <p>To use your voice memos:</p>\n                <ol>\n                  <li>Open the <strong>Files</strong> app on your iPhone.</li>\n                  <li>Locate the voice memo (e.g., in <strong>On My iPhone > Voice Memos</strong>).</li>\n                  <li>Tap and hold the file, choose <strong>Share</strong>, then <strong>Save to Files</strong>.</li>\n                  <li>Save it to an accessible location like <strong>iCloud Drive</strong>.</li>\n                  <li>Return here and use the <strong>\"Select file\"</strong> button.</li>\n                </ol>\n              </div>\n            </div>\n          </div>\n\n          <!-- Container for the decision state (Process/Discard) -->\n          <div id=\"audioDecisionContainer\" style=\"display: none;\">\n            <button id=\"discardAudioBtn\" class=\"decision-button discard\">Discard Audio</button>\n            <button id=\"processAudioBtn\" class=\"decision-button process\">Process Audio</button>\n          </div>\n\n          <audio id=\"audioPlayback\" style=\"display: none;\"></audio>\n        </div>\n\n        <!-- Editor Section -->\n        <div anvil-slot=\"editor_slot\"></div>\n\n        <!-- Stable anchor for Python calls that might occur when other elements are hidden -->\n        <div id=\"stableAnchor\" style=\"display:none;\"></div>\n      </div>\n\n      <!-- Bottom buttons -->\n      <div class=\"bottom-buttons\">\n        <button class=\"bottom-button\" data-click=\"statut\" id=\"button_status\">Status</button>\n        <button class=\"bottom-button\" data-click=\"enregistrer\" id=\"button_archive\">Archive</button>\n        <button class=\"bottom-button\" data-click=\"partager\" id=\"button_share\">Share</button>\n      </div>\n    </div>\n\n    <!-- Modals -->\n    <div class=\"patient-select-container\">\n      <div class=\"modal\" id=\"patientModal\">\n        <div class=\"modal-content\">\n          <button class=\"close-button\" id=\"closePatientModalBtn\">✕</button>\n          <div class=\"modal-header\">\n            <h3 class=\"modal-title\" id=\"select_patient_title\">Select a patient</h3>\n            <div class=\"search-container\">\n              <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n              </svg>\n              <div id=\"patientSearchHolder\">\n                <input type=\"text\" class=\"search-input\" placeholder=\"Search for a patient...\" id=\"searchInput\">\n              </div>\n            </div>\n          </div>\n          <button class=\"new-patient-btn\" id=\"newPatientBtn\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\"></path><circle cx=\"9\" cy=\"7\" r=\"4\"></circle><line x1=\"19\" y1=\"8\" x2=\"19\" y2=\"14\"></line><line x1=\"16\" y1=\"11\" x2=\"22\" y2=\"11\"></line>\n            </svg>\n            New patient\n          </button>\n          <div class=\"divider\"></div>\n          <div class=\"patients-list\" id=\"patientsList\"></div>\n        </div>\n      </div>\n    </div>\n    <div class=\"template-select-container\">\n      <div class=\"modal\" id=\"templateModal\">\n        <div class=\"modal-content\">\n          <button class=\"close-button\" id=\"closeTemplateModalBtn\">✕</button>\n          <div class=\"modal-header\">\n            <h3 class=\"modal-title\" id=\"select_template_title\">Select a template</h3>\n            <div class=\"search-container\">\n              <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n              </svg>\n              <input type=\"text\" class=\"search-input\" placeholder=\"Search for a template...\" id=\"templateSearchInput\">\n            </div>\n          </div>\n          <div class=\"templates-list\" id=\"templatesList\"></div>\n        </div>\n      </div>\n    </div>\n    <div id=\"bannerContainer\"></div>\n    <div class=\"modal\" id=\"offlineSaveModal\" style=\"display: none;\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">Connection Issue</div>\n        <div class=\"modal-body\">\n          <p>You appear to be offline. The audio will be saved on your device and processed later.</p>\n          <label for=\"offlineRecordingTitle\">Recording Title:</label>\n          <input type=\"text\" id=\"offlineRecordingTitle\" placeholder=\"e.g., Exam of 'Fido'\">\n        </div>\n        <div class=\"modal-footer\">\n          <button class=\"button\" id=\"cancelOfflineSaveBtn\">Cancel</button>\n          <button class=\"button button-primary\" id=\"confirmOfflineSaveBtn\">Save to Queue</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- NEW MODAL for viewing the queue -->\n    <div class=\"modal\" id=\"queueModal\" style=\"display: none;\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">Offline Recordings Queue</div>\n        <div class=\"modal-body\">\n          <div class=\"queue-list\" id=\"queueListContainer\">\n            <!-- Queue items will be rendered here by JS -->\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button class=\"button\" id=\"closeQueueModalBtn\">Close</button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Main script (JS) -->\n    <script>\n      // ============================================================================================\n      // JAVASCRIPT FOR AUDIO MANAGEMENT INTERFACE\n      // Following Anvil's Golden Rules for Custom HTML\n      // ============================================================================================\n\n      // --------------------------------------------------------------------------------------------\n      // SECTION 1: PYTHON-CALLABLE FUNCTIONS\n      // These functions are defined directly on `window` so Python can always access them.\n      // --------------------------------------------------------------------------------------------\n      window.setupDecisionUIForRecording = function(audioBlob) {\n        console.log(\"LOG: setupDecisionUIForRecording called. The audioBlob is:\", audioBlob);\n        console.log(\"LOG: Blob size on creation:\", audioBlob ? audioBlob.size : \"N/A\");\n\n        // Store the blob in our global state object\n        window.recordingState.audioBlob = audioBlob;\n\n        // Get a reference to the audio player element\n        const audioPlayer = document.getElementById(\"audioPlayback\");\n        if (!audioPlayer) {\n          console.error(\"#audioPlayback element not found!\");\n          return;\n        }\n\n        // Create a URL from the blob so the audio player can use it\n        const audioURL = URL.createObjectURL(audioBlob);\n        audioPlayer.src = audioURL;\n\n        // Switch the UI to show the player and the \"Process/Discard\" buttons\n        window.setAudioWorkflowState('decision');\n      };\n      \n      window.setElementText = function(elementId, newText) {\n      const element = document.getElementById(elementId);\n      if (!element) return;\n      // This pattern safely updates text on elements with or without icons (like SVGs)\n      const targetSpan = element.querySelector('span');\n      if (targetSpan && element.children.length > 0 && !targetSpan.classList.contains('arrow')) {\n      targetSpan.textContent = newText;\n      } else {\n      element.textContent = newText;\n      }\n      };\n\n      window.setPlaceholderById = function(elementId, newText) {\n      const element = document.getElementById(elementId);\n      if (element) {\n      element.placeholder = newText;\n      }\n      };\n\n      window.getDropdownSelectedValue = function(dropdownId) {\n      const dropdown = document.getElementById(dropdownId);\n      if (!dropdown) return \"\";\n      if (dropdownId === \"templateSelectBtn\" && dropdown.dataset.templateName) {\n      return dropdown.dataset.templateName;\n      }\n      const spanElem = dropdown.querySelector(\"span:first-child\");\n      return spanElem ? spanElem.textContent.trim() : \"\";\n      };\n\n      window.displayBanner = function(message, type) {\n      const bannerContainer = document.getElementById('bannerContainer');\n      if (!bannerContainer) return;\n      const banner = document.createElement('div');\n      banner.className = 'banner ' + (type === 'success' ? 'banner-success' : 'banner-error');\n      banner.textContent = message;\n      bannerContainer.appendChild(banner);\n      setTimeout(() => {\n      banner.style.opacity = '0';\n      setTimeout(() => banner.remove(), 300);\n      }, 3000);\n      };\n\n      window.rebuildPatientSearchInput = function() {\n      const searchHolder = document.getElementById(\"patientSearchHolder\");\n      if (searchHolder) {\n      const newInput = document.createElement(\"input\");\n      newInput.type = \"text\";\n      newInput.className = \"search-input\";\n      newInput.id = \"searchInput\";\n      newInput.placeholder = \"Search for a patient...\";\n      newInput.addEventListener('input', () => window.searchPatientsInModal(newInput.value));\n      searchHolder.innerHTML = \"\";\n      searchHolder.appendChild(newInput);\n      }\n      };\n\n      window.populateTemplateModal = function(templates) {\n      templates = templates.filter(t => t.priority === 1 || t.priority === 2);\n      templates.sort((a, b) => {\n      if (a.priority === 2 && b.priority !== 2) return -1;\n      if (b.priority === 2 && a.priority !== 2) return 1;\n      return a.template_name.localeCompare(b.template_name);\n      });\n      window.templatesData = templates;\n\n      let defaultTemplate = templates.find(t => t.priority === 2) || templates[0];\n      if (defaultTemplate) {\n      window.selectTemplate(defaultTemplate, false); // Select without closing modal\n      }\n      window.renderTemplates(templates); // Render the full list\n      };\n\n      // --------------------------------------------------------------------------------------------\n      // GOLDEN RULE 1: DEFINE GLOBAL VARIABLES AND HELPER FUNCTIONS ONLY ONCE\n      // --------------------------------------------------------------------------------------------\n      if (!window.__my_audio_manager_globals) {\n      window.__my_audio_manager_globals = true;\n      console.log(\"Initializing AudioManager globals...\");\n\n        let db;\n        function initDB() {\n          return new Promise((resolve, reject) => {\n            const request = indexedDB.open('audioQueueDB', 1);\n            request.onerror = event => reject(\"IndexedDB error: \" + event.target.errorCode);\n            request.onsuccess = event => {\n              db = event.target.result;\n              console.log(\"Database initialized successfully.\");\n              resolve(db);\n            };\n            request.onupgradeneeded = event => {\n              const db = event.target.result;\n              db.createObjectStore('recordings', { keyPath: 'id' });\n            };\n          });\n        }\n\n        function saveRecordingToQueue(audioBlob, title) {\n          return new Promise((resolve, reject) => {\n            if (!db) return reject(\"DB not initialized\");\n            const transaction = db.transaction(['recordings'], 'readwrite');\n            const store = transaction.objectStore('recordings');\n            const recording = {\n              id: 'rec_' + Date.now(),\n              title: title,\n              audioBlob: audioBlob,\n              status: 'queued'\n            };\n            const request = store.add(recording);\n            request.onsuccess = () => resolve(recording.id);\n            request.onerror = event => reject(\"Failed to save recording: \" + event.target.error);\n          });\n        }\n\n        function getQueuedRecordings() {\n          return new Promise((resolve, reject) => {\n            if (!db) return reject(\"DB not initialized\");\n            const transaction = db.transaction(['recordings'], 'readonly');\n            const store = transaction.objectStore('recordings');\n            const request = store.getAll();\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = event => reject(\"Failed to get recordings: \" + event.target.error);\n          });\n        }\n        function updateRecordingStatus(id, status) {\n          return new Promise((resolve, reject) => {\n            if (!db) return reject(\"DB not initialized\");\n            const transaction = db.transaction(['recordings'], 'readwrite');\n            const store = transaction.objectStore('recordings');\n            const request = store.get(id);\n            request.onsuccess = () => {\n              const data = request.result;\n              if (data) {\n                data.status = status;\n                store.put(data).onsuccess = () => resolve();\n              } else {\n                reject(\"Recording not found\");\n              }\n            };\n            request.onerror = event => reject(event.target.error);\n          });\n        }\n        function deleteRecordingFromQueue(id) {\n          return new Promise((resolve, reject) => {\n            if (!db) return reject(\"DB not initialized\");\n            const transaction = db.transaction(['recordings'], 'readwrite');\n            const store = transaction.objectStore('recordings');\n            store.delete(id).onsuccess = () => resolve();\n          });\n        }\n      // ===================================\n      // A. Global State Management\n      // ===================================\n      window.recordingState = {\n      mediaRecorder: null,\n      recordedChunks: [],\n      audioBlob: null,\n      stream: null,\n      isRecording: false,\n      isIOS: /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream,\n      recordRTC: null,\n      uploadedFile: null,\n      processingInProgress: false\n      };\n\n      window.toolbarRecorder = {\n      stream: null,\n      mediaRecorder: null,\n      isRecording: false,\n      recordedChunks: [],\n      bannerFlashInterval: null\n      };\n\n      window.wakeLockController = {\n      wakeLock: null,\n      noSleep: new NoSleep(),\n      request: function() {\n      if ('wakeLock' in navigator) {\n      navigator.wakeLock.request('screen')\n      .then(lock => { this.wakeLock = lock; console.log('Screen Wake Lock active.'); })\n      .catch(() => this.noSleep.enable()); // Fallback\n      } else {\n      this.noSleep.enable();\n      }\n      },\n      release: function() {\n      if (this.wakeLock) {\n      this.wakeLock.release().then(() => { this.wakeLock = null; console.log('Screen Wake Lock released.'); });\n      }\n      this.noSleep.disable();\n      }\n      };\n\n\n      // ===================================\n      // B. UI and Helper Functions\n      // ===================================\n      window.formatTime = (seconds) => {\n      if (isNaN(seconds) || !isFinite(seconds)) return \"0:00\";\n      const min = Math.floor(seconds / 60);\n      const sec = Math.floor(seconds % 60).toString().padStart(2, '0');\n      return `${min}:${sec}`;\n      };\n\n      window.formatFileSize = (bytes) => {\n      if (bytes < 1024) return bytes + ' B';\n      if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n      return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n      };\n\n      window.updateTime = () => {\n      const now = new Date();\n      const time = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      const timeElement = document.querySelector('.time');\n      if(timeElement) timeElement.textContent = time;\n      };\n\n      window.simulateTranscriptionProgress = () => {\n      window.transcriptionProgress = { current: 0, interval: null };\n      window.setRingPercentage(0);\n      window.transcriptionProgress.interval = setInterval(() => {\n      if (window.transcriptionProgress.current < 90) {\n      window.transcriptionProgress.current += 1;\n      window.setRingPercentage(window.transcriptionProgress.current);\n      } else {\n      clearInterval(window.transcriptionProgress.interval);\n      }\n      }, 400);\n      };\n\n      window.finishTranscriptionProgress = () => {\n      if (window.transcriptionProgress && window.transcriptionProgress.interval) {\n      clearInterval(window.transcriptionProgress.interval);\n      }\n      window.setRingPercentage(100);\n      };\n\n      window.updateMobileAudioDisplay = () => {\n      const display = document.getElementById(\"mobileAudioDisplay\");\n      if (!display) return;\n      if (window.recordingState.audioBlob) {\n      display.innerHTML = `Audio 🎵 <button id='mobileClearButton' style='background:none;border:none;font-size:1em;cursor:pointer;'>🗑</button>`;\n      document.getElementById('mobileClearButton').addEventListener('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      window.clearRecording();\n      });\n      } else {\n      display.innerHTML = \"\";\n      }\n      };\n\n      window.toggleMode = (mode) => {\n      const recMode = document.getElementById('recordingMode');\n      const upMode = document.getElementById('uploadMode');\n      const recBtn = document.getElementById('recordButton');\n      const upBtn = document.getElementById('uploadButton');\n      const isRecord = mode === 'record';\n\n      if(recMode) recMode.style.display = isRecord ? 'block' : 'none';\n      if(upMode) upMode.style.display = isRecord ? 'none' : 'block';\n      if(recBtn) recBtn.classList.toggle('active', isRecord);\n      if(upBtn) upBtn.classList.toggle('active', !isRecord);\n      };\n\n        // --- NEW: Central UI state controller ---\n        window.setAudioWorkflowState = (state) => {\n          console.log(`Setting audio workflow state to: ${state}`);\n          const inputContainer = document.getElementById('audioInputContainer');\n          const decisionContainer = document.getElementById('audioDecisionContainer');\n          const audioBar = document.getElementById('audioBar');\n          const isMobile = window.innerWidth <= 800;\n\n          if (state === 'decision') {\n            if(inputContainer) inputContainer.style.display = 'none';\n            if(decisionContainer) decisionContainer.style.display = 'flex';\n            if(audioBar) audioBar.style.display = 'flex'; // Always show the player on desktop\n            window.updateMobileAudioDisplay();\n          } else { // 'input' state by default\n            if(inputContainer) inputContainer.style.display = 'block';\n            if(decisionContainer) decisionContainer.style.display = 'none';\n            if(audioBar) audioBar.style.display = 'none';\n\n            // Reset player UI\n            const progBar = document.getElementById(\"audioProgressBar\");\n            if(progBar) progBar.style.width = \"0%\";\n            const duration = document.getElementById(\"audioDuration\");\n            if(duration) duration.textContent = \"0:00 / 0:00\";\n            const playbackBtn = document.getElementById('audioPlaybackControl');\n            if (playbackBtn) playbackBtn.textContent = '▶';\n            window.updateMobileAudioDisplay();\n          }\n        };\n\n        \n        function attemptToProcessAudio(eventTarget) {\n          const audioBlob = window.recordingState.audioBlob;\n          if (!audioBlob || audioBlob.size === 0) {\n            console.error(\"Recording resulted in an empty audio blob.\");\n            displayBanner(\"Recording failed. Please try again.\", \"error\");\n            return;\n          }\n\n          console.log(\"Attempting to process audio by sending as Base64...\");\n          window.simulateTranscriptionProgress();\n\n          // Use our new Base64 helper function\n          sendBlobAsBase64(audioBlob, 'process_recording', eventTarget)\n            .then(htmlContent => {\n              // --- ONLINE SUCCESS (HAPPY PATH) ---\n              console.log(\"Online processing successful.\");\n              window.finishTranscriptionProgress();\n              setEditorContent(htmlContent);\n              displayBanner(\"Report generated successfully!\", \"success\");\n              window.clearRecording(); // Reset UI after success\n            })\n            .catch(err => {\n              // --- MODIFIED: DIFFERENTIATED ERROR HANDLING ---\n              console.error(\"An error occurred during processing:\", err);\n              window.finishTranscriptionProgress(); // Always stop the progress animation\n\n              // Check if the browser believes it is online.\n              if (navigator.onLine) {\n                // The user is ONLINE, but the server call failed. This points to a server-side error.\n                console.log(\"DEBUG: Client is online, but server processing failed. This indicates a server-side script error or timeout.\");\n                displayBanner(\"Error: The server could not process the audio. Please try again.\", \"error\");\n\n                // To allow the user to retry without re-recording, \n                // we put the UI back into the decision state.\n                // The recorded audio blob is still available.\n                window.setAudioWorkflowState('decision');\n\n              } else {\n                // The user is genuinely OFFLINE. Proceed with the original offline save workflow.\n                console.log(\"DEBUG: Client is offline. Initiating offline save process.\");\n\n                // If the local database isn't working, we can't save offline.\n                if (!db) {\n                  displayBanner(\"Connection failed and offline storage is not available.\", \"error\");\n                  // Also reset the UI state to allow a new attempt later\n                  window.setAudioWorkflowState('decision');\n                  return;\n                }\n\n                // Show the modal to allow saving to the queue\n                document.getElementById('offlineSaveModal').style.display = 'flex';\n              }\n            });\n        }\n        \n        // REPLACE the clearRecording function with this one\n        window.clearRecording = () => {\n          console.log(\"LOG: clearRecording() called. The audio blob is being cleared now.\");\n          // Stop any active recorder instances first\n          if (window.recordingState.isRecording && window.recordingState.mediaRecorder) {\n            window.recordingState.mediaRecorder.stop();\n          }\n          if (window.recordingState.recordRTC) {\n            // RecordRTC's destroy method also handles stopping the stream tracks.\n            window.recordingState.recordRTC.destroy();\n          }\n\n          // Explicitly stop tracks for non-RecordRTC cases or as a fallback\n          if (window.recordingState.stream) {\n            window.recordingState.stream.getTracks().forEach(track => track.stop());\n          }\n\n          // Reset state object completely\n          Object.assign(window.recordingState, {\n            mediaRecorder: null,\n            recordedChunks: [],\n            audioBlob: null,\n            stream: null, // Ensure stream is cleared\n            isRecording: false,\n            recordRTC: null\n          });\n\n          // Reset all UI to the initial state\n          document.getElementById(\"audioPlayback\").src = \"\";\n          document.getElementById(\"playButton\").innerHTML = '▶';\n          window.stopRecordingFlash();\n          window.setRingPercentage(0);\n          document.getElementById(\"audioFileInput\").value = '';\n          window.setAudioWorkflowState('input');\n        };\n      // ===================================\n      // D. Audio Processing and Uploading\n      // ===================================\n        window.processRecordedAudio = async (blob, eventTarget) => {\n          window.setAudioWorkflowState('input');\n          window.toggleMode('record');\n          window.simulateTranscriptionProgress();\n\n          // Use .then() to handle the result from Python\n          anvil.call(eventTarget, 'process_recording', blob)\n            .then(result => {\n              console.log(\"LOG: Python process_recording returned:\", result);\n              window.finishTranscriptionProgress();\n\n              if (result === \"OK\") {\n                displayBanner(\"Report generated successfully!\", \"success\");\n                // Only clear the recording on explicit success\n                window.clearRecording();\n              } else if (result === \"OFFLINE_SAVE\") {\n                // Do nothing here. Python has already triggered the offline modal.\n                // The audio blob is intentionally preserved.\n                console.log(\"LOG: Offline save initiated by Python. Blob is preserved.\");\n              } else { // \"ERROR\" or anything else\n                displayBanner(\"Error: Could not process the audio. Please try again.\", \"error\");\n                // Put the UI back to the decision state so the user can retry\n                window.setAudioWorkflowState('decision');\n              }\n            });\n        };\n\n        window.handleFileSelect = (event) => {\n          const file = event.dataTransfer ? event.dataTransfer.files[0] : event.target.files[0];\n          if (!file) return;\n          if (!file.type.startsWith('audio/') && !/\\.(m4a|caf|mp3|aac|wav)$/i.test(file.name)) {\n            return alert('Please select a valid audio file.');\n          }\n          window.recordingState.audioBlob = file; \n          const audioURL = URL.createObjectURL(file);\n          document.getElementById(\"audioPlayback\").src = audioURL;\n\n          // NEW WORKFLOW: Move to decision state\n          window.setAudioWorkflowState('decision');\n        };\n\n      window.processUploadedFile = () => {\n      const { audioBlob } = window.recordingState;\n      if (!audioBlob) return alert(\"No file selected to process.\");\n      window.toggleMode('record'); // Switch to progress view\n      window.processRecordedAudio(audioBlob, document.getElementById('stableAnchor'));\n      };\n\n\n      // ===================================\n      // E. Toolbar and Editor Logic\n      // ===================================\n      window.formatDoc = (cmd) => document.execCommand(cmd, false, null);\n\n      window.copyEditorContent = () => {\n      const editor = document.getElementById('editor');\n      if (editor) {\n      navigator.clipboard.writeText(editor.innerText || editor.textContent)\n      .then(() => window.displayBanner('Content copied!', 'success'))\n      .catch(() => alert('Copy failed.'));\n      }\n      };\n\n      // ===================================\n      // F. Modal Logic (Patient & Template)\n      // ===================================\n      window.openModal = (id) => { document.getElementById(id).style.display = 'block'; };\n      window.closeModal = (id) => { document.getElementById(id).style.display = 'none'; };\n\n      window.renderTemplates = (templates) => {\n      const list = document.getElementById('templatesList');\n      if (!list) return;\n      list.innerHTML = '';\n      templates.forEach(t => {\n      const button = document.createElement('button');\n      button.className = 'template-item';\n      button.innerHTML = `<span>${t.template_name}</span> <span class=\"star-icon\" style=\"color:${t.priority === 2 ? 'green' : 'yellow'}\">★</span>`;\n      button.addEventListener('click', () => window.selectTemplate(t));\n      list.appendChild(button);\n      });\n      };\n\n      window.selectTemplate = (template, closeModal = true) => {\n      window.selectedTemplate = template;\n      const btn = document.getElementById('templateSelectBtn');\n      if (btn) {\n      btn.dataset.templateName = template.template_name;\n      const display = btn.querySelector('span:first-child');\n      if(display) display.innerHTML = `${template.template_name} <span class=\"star-icon\" style=\"color:${template.priority === 2 ? 'green' : 'yellow'}\">★</span>`;\n      }\n      window.setEditorContent(template.display_template ? template.text_to_display : '');\n      if(closeModal) window.closeModal('templateModal');\n      };\n\n      window.openPatientModalForSave = () => {\n      window.openModal('patientModal');\n      window.rebuildPatientSearchInput();\n      window.searchPatientsInModal('');\n      };\n\n      window.searchPatientsInModal = (term) => {\n      anvil.call(document.getElementById('stableAnchor'), 'search_patients_relay', term)\n      .then(patients => {\n      const list = document.getElementById('patientsList');\n      if(list) {\n      list.innerHTML = '';\n      patients.forEach(p => {\n      const btn = document.createElement('button');\n      btn.className = 'patient-item';\n      btn.textContent = p.name;\n      btn.onclick = () => window.selectPatientForSave(p.unique_id, p.name);\n      list.appendChild(btn);\n      });\n      }\n      });\n      };\n\n      window.selectPatientForSave = (id, name) => {\n      window.selectedPatient = { unique_id: id, name: name };\n      window.closeModal('patientModal');\n      window.continueSave();\n      };\n\n      window.continueSave = () => {\n      const content = window._saveContentData.content;\n      const images = window._saveContentData.images;\n      anvil.call(document.getElementById('stableAnchor'), 'save_report', JSON.stringify({ content }), images, window.selectedPatient)\n      .then(ok => window.displayBanner(ok ? \"Report saved.\" : \"Save failed.\", ok ? 'success' : 'error'));\n      };\n        // --- NEW HELPER FUNCTIONS for managing the Queue UI ---\n        async function renderQueue() {\n          if (!db) await initDB();\n          const queue = await getQueuedRecordings();\n          const container = document.getElementById('queueListContainer');\n          const badge = document.getElementById('queueBadge');\n          container.innerHTML = '';\n\n          if (queue.length === 0) {\n            container.innerHTML = '<p>No recordings in queue.</p>';\n            badge.style.display = 'none';\n          } else {\n            badge.textContent = queue.length;\n            badge.style.display = 'inline-block';\n            queue.forEach(item => {\n              const div = document.createElement('div');\n              div.className = 'queue-item';\n              // --- Button text and class changed to 'Import' ---\n              div.innerHTML = `\n                            <div>\n                                <div class=\"queue-item-title\">${item.title}</div>\n                                <div class=\"queue-item-status\">Status: <strong>${item.status}</strong></div>\n                            </div>\n                            <div class=\"queue-item-actions\">\n                                <button class=\"button button-primary import-btn\" data-id=\"${item.id}\">Import</button>\n                                <button class=\"button delete-btn\" data-id=\"${item.id}\">Delete</button>\n                            </div>\n                        `;\n              container.appendChild(div);\n            });\n          }\n          document.getElementById('queueModal').style.display = 'flex';\n        }\n        async function handleImportFromQueue(itemId) {\n          if (!db) {\n            alert(\"Local database is not available.\");\n            return;\n          }\n\n          const queue = await getQueuedRecordings();\n          const item = queue.find(i => i.id === itemId);\n\n          if (!item || !item.audioBlob) {\n            alert(\"Could not find the recording to import. It may be corrupted.\");\n            return;\n          }\n\n          try {\n            // 1. Load the audio blob into the main application state\n            window.recordingState.audioBlob = item.audioBlob;\n\n            // 2. Create a URL and set up the audio player\n            const audioURL = URL.createObjectURL(item.audioBlob);\n            document.getElementById(\"audioPlayback\").src = audioURL;\n\n            // 3. Switch the main UI to the 'decision' state\n            window.setAudioWorkflowState('decision');\n\n            // 4. Close the queue modal\n            document.getElementById('queueModal').style.display = 'none';\n\n            // 5. Delete the item from the queue since it's now loaded\n            await deleteRecordingFromQueue(itemId);\n\n            // 6. Provide feedback to the user\n            displayBanner(`'${item.title}' imported and is ready to be processed.`, \"success\");\n\n            // Manually update the badge count after import\n            const updatedQueue = await getQueuedRecordings();\n            const badge = document.getElementById('queueBadge');\n            if (updatedQueue.length > 0) {\n              badge.textContent = updatedQueue.length;\n              badge.style.display = 'inline-block';\n            } else {\n              badge.textContent = '0';\n              badge.style.display = 'none';\n            }\n\n          } catch (err) {\n            console.error(\"Error during import from queue:\", err);\n            displayBanner(\"An error occurred while importing the audio.\", \"error\");\n          }\n        }\n\n        // --------------------------------------------------------------------------------------------\n        // GOLDEN RULE 2: ALWAYS ATTACH EVENT LISTENERS IN A DEDICATED FUNCTION\n        // --------------------------------------------------------------------------------------------\n        // --- NEW: Function to handle the offline save confirmation ---\n        async function handleConfirmOfflineSave() {\n          const titleInput = document.getElementById('offlineRecordingTitle');\n          const title = titleInput.value.trim() || `Recording from ${new Date().toLocaleString()}`;\n          const audioBlob = window.recordingState.audioBlob;\n\n          console.log(\"LOG: handleConfirmOfflineSave triggered.\");\n          console.log(\"LOG: The current value of window.recordingState.audioBlob is:\", audioBlob);\n          console.log(\"LOG: Blob size at save attempt:\", audioBlob ? audioBlob.size : \"N/A\");\n\n          if (!audioBlob) {\n            console.error(\"LOG: audioBlob is null or undefined here, which is causing the error banner.\");\n            displayBanner(\"No audio blob found to save.\", \"error\");\n            return;\n          }\n\n          try {\n            await saveRecordingToQueue(audioBlob, title);\n            displayBanner(`'${title}' was saved to the offline queue.`, 'success');\n\n            // Close the modal and reset the entire UI\n            document.getElementById('offlineSaveModal').style.display = 'none';\n            titleInput.value = ''; // Clear the input for next time\n            window.clearRecording(); // Reset the main recording interface\n\n            // Manually update the badge after saving\n            const queue = await getQueuedRecordings();\n            const badge = document.getElementById('queueBadge');\n            if (badge) {\n              badge.textContent = queue.length;\n              badge.style.display = 'inline-block';\n            }\n\n          } catch (err) {\n            console.error(\"Failed to save to queue:\", err);\n            displayBanner(\"Error saving recording. It has not been queued.\", \"error\");\n          }\n        }\n\n        window.handleOfflineSave = function() {\n          console.log(\"JS: handleOfflineSave called by Python.\");\n          // This just shows the modal. The rest of the logic is already in your JS.\n          document.getElementById('offlineSaveModal').style.display = 'flex';\n        };\n        \n        window.attachEvents = function() {\n          console.log(\"Attaching AudioManager events...\");\n\n          const reattach = (id, event, handler) => {\n            const el = document.getElementById(id);\n            if(el) {\n              const newEl = el.cloneNode(true);\n              el.parentNode.replaceChild(newEl, el);\n              newEl.addEventListener(event, handler);\n            }\n          };\n\n          reattach('viewQueueBtn', 'click', renderQueue);\n          reattach('closeQueueModalBtn', 'click', () => document.getElementById('queueModal').style.display = 'none');\n          reattach('cancelOfflineSaveBtn', 'click', () => document.getElementById('offlineSaveModal').style.display = 'none');\n          reattach('confirmOfflineSaveBtn', 'click', handleConfirmOfflineSave);\n\n          // Add listeners for buttons inside the queue\n          document.getElementById('queueListContainer').addEventListener('click', async (e) => {\n            const target = e.target;\n            const id = target.dataset.id;\n            if (!id) return;\n\n            if (target.classList.contains('delete-btn')) {\n              if (confirm(\"Are you sure you want to delete this recording?\")) {\n                await deleteRecordingFromQueue(id);\n                await renderQueue(); // Re-render the list to show the deletion\n              }\n            } else if (target.classList.contains('import-btn')) { // Listen for the new button\n              // Import the item to the main interface for review\n              handleImportFromQueue(id);\n            }\n          });\n\n          // --- Navigation ---\n          document.querySelectorAll('.nav-tab').forEach(tab => reattach(tab.id, 'click', e => anvil.call(e.target, `open_${e.target.dataset.click}_form`)));\n\n          // --- Main Audio Controls ---\n          reattach('playButton', 'click', window.startRecording);\n          reattach('stopButton', 'click', window.stopRecording);\n          // --- Audio Playback Logic ---\n          const audioEl = document.getElementById('audioPlayback');\n          const playbackBtn = document.getElementById('audioPlaybackControl');\n          const progressDiv = document.getElementById('audioProgress');\n          const progressBar = document.getElementById('audioProgressBar');\n          const durationSpan = document.getElementById('audioDuration');\n\n          if (audioEl) {\n            audioEl.addEventListener('timeupdate', () => {\n              const { currentTime, duration } = audioEl;\n              if (!duration || isNaN(duration)) return;\n              progressBar.style.width = `${(currentTime / duration) * 100}%`;\n              durationSpan.textContent = `${window.formatTime(currentTime)} / ${window.formatTime(duration)}`;\n            });\n\n            audioEl.addEventListener('loadedmetadata', () => {\n              const { duration } = audioEl;\n              if (!duration || isNaN(duration)) return;\n              durationSpan.textContent = `0:00 / ${window.formatTime(duration)}`;\n            });\n\n            audioEl.addEventListener('ended', () => {\n              if(playbackBtn) playbackBtn.textContent = '▶';\n              if(progressBar) progressBar.style.width = '0%';\n            });\n          }\n\n          const togglePlayback = () => {\n            if (!audioEl || !audioEl.src || isNaN(audioEl.duration)) return;\n            if (audioEl.paused) {\n              audioEl.play();\n              playbackBtn.textContent = '❚❚';\n            } else {\n              audioEl.pause();\n              playbackBtn.textContent = '▶';\n            }\n          };\n          reattach('audioPlaybackControl', 'click', togglePlayback);\n\n          const seek = (e) => {\n            if (!audioEl || !audioEl.src || !progressDiv || isNaN(audioEl.duration)) return;\n            const rect = progressDiv.getBoundingClientRect();\n            const offsetX = e.clientX - rect.left;\n            audioEl.currentTime = (offsetX / rect.width) * audioEl.duration;\n          };\n          reattach('audioProgress', 'click', seek);\n\n          // --- Mode Toggle & Upload ---\n          reattach('recordButton', 'click', () => window.toggleMode('record'));\n          reattach('uploadButton', 'click', () => window.toggleMode('upload'));\n\n          const dropZone = document.getElementById('dropZone');\n          if (dropZone) {\n            const newZone = dropZone.cloneNode(true);\n            dropZone.parentNode.replaceChild(newZone, dropZone);\n            newZone.addEventListener('dragover', e => { e.preventDefault(); newZone.classList.add('dragover'); });\n            newZone.addEventListener('dragleave', () => newZone.classList.remove('dragover'));\n            newZone.addEventListener('drop', e => { e.preventDefault(); newZone.classList.remove('dragover'); window.handleFileSelect(e); });\n            newZone.addEventListener('click', e => { if (!e.target.closest('label')) newZone.querySelector('#audioFileInput').click(); });\n            newZone.querySelector('#audioFileInput').addEventListener('change', window.handleFileSelect);\n          }\n\n          // --- Main Audio Input Controls ---\n          reattach('playButton', 'click', window.startRecording);\n          reattach('stopButton', 'click', window.stopRecording);\n          // This is the trashcan on the player bar, it should also reset everything\n          reattach('clearRecordingButton', 'click', window.clearRecording); \n\n          // --- NEW: Decision Buttons ---\n          reattach('discardAudioBtn', 'click', window.clearRecording);\n          reattach('processAudioBtn', 'click', () => {\n            const { audioBlob } = window.recordingState;\n            console.log(\"LOG: 'Process Audio' button clicked.\");\n            console.log(\"LOG: The current value of window.recordingState.audioBlob is:\", audioBlob);\n            console.log(\"LOG: Blob size before sending to Python:\", audioBlob ? audioBlob.size : \"N/A\");\n            if (!audioBlob) return alert(\"No audio available to process.\");\n            window.processRecordedAudio(audioBlob, document.getElementById('stableAnchor'));\n          });\n\n          // --- Settings ---\n          reattach('templateSelectBtn', 'click', () => window.openModal('templateModal'));\n\n          const langDropdown = document.getElementById('langueDropdown');\n          if(langDropdown) {\n            const newDd = langDropdown.cloneNode(true);\n            langDropdown.parentNode.replaceChild(newDd, langDropdown);\n            newDd.addEventListener('click', e => { if(!e.target.closest('.dropdown-menu')) newDd.querySelector('.dropdown-menu').classList.toggle('active'); });\n            newDd.querySelectorAll('.dropdown-menu div').forEach(item => {\n              item.addEventListener('click', e => {\n                e.stopPropagation();\n                newDd.querySelector('span:first-child').textContent = item.dataset.value;\n                newDd.querySelector('.dropdown-menu').classList.remove('active');\n              });\n            });\n          }\n\n          // --- Bottom Buttons ---\n          reattach('button_archive', 'click', () => {\n            window._saveContentData = { content: window.getEditorContent(), images: [] /* Add image logic if needed */ };\n            window.openPatientModalForSave();\n          });\n          // Add other bottom buttons (status, share)\n          reattach('button_share', 'click', () => window.displayBanner(\"Share feature coming soon.\", \"success\"));\n          reattach('button_status', 'click', e => anvil.call(e.target, 'on_statut_clicked').then(status => { if(status) e.target.textContent = status; }));\n\n\n          // --- Modals ---\n          reattach('closePatientModalBtn', 'click', () => window.closeModal('patientModal'));\n          reattach('newPatientBtn', 'click', () => {\n            anvil.call(document.getElementById('stableAnchor'), 'get_new_patient_details').then(details => {\n              if(details) {\n                window.selectPatientForSave(null, details.name);\n              }\n            });\n          });\n          reattach('closeTemplateModalBtn', 'click', () => window.closeModal('templateModal'));\n          reattach('templateSearchInput', 'input', e => anvil.call(document.getElementById('stableAnchor'), 'search_template_relay', e.target.value).then(window.renderTemplates));\n\n          // --- Final Setup ---\n          if (window.recordingState.isIOS) {\n            const instructions = document.querySelector('.ios-instructions');\n            if (instructions) instructions.style.display = 'block';\n          }\n          window.updateTime();\n          if(!window.timeInterval) window.timeInterval = setInterval(window.updateTime, 60000);\n\n          window.setAudioWorkflowState('input');\n        };\n\n\n        initDB().then(() => {\n          console.log(\"Database initialized successfully. Offline mode is available.\");\n\n          // Update the queue badge on initial load\n          getQueuedRecordings().then(queue => {\n            const badge = document.getElementById('queueBadge');\n            if (queue && queue.length > 0) {\n              badge.textContent = queue.length;\n              badge.style.display = 'inline-block';\n            } else {\n              badge.style.display = 'none';\n            }\n          });\n\n        }).catch(err => {\n          console.error(\"Failed to initialize local database. Offline mode will be disabled.\", err);\n          displayBanner(\"Offline storage is unavailable in this browser mode.\", \"error\");\n\n          // GRACEFUL DEGRADATION: Hide the offline feature's UI\n          const queueButton = document.getElementById('viewQueueBtn');\n          if (queueButton) {\n            queueButton.style.display = 'none';\n          }\n        })\n      } // End of __my_audio_manager_globals guard\n\n\n      // --------------------------------------------------------------------------------------------\n      // GOLDEN RULE 3: IMMEDIATELY ATTACH EVERYTHING\n      // --------------------------------------------------------------------------------------------\n      window.attachEvents();\n\n    </script>\n  </body>\n</html>"
    visible: true
  type: HtmlTemplate
is_package: true
