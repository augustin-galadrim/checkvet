components:
- layout_properties: {slot: queue_slot}
  name: queue_manager_1
  properties: {disable_import: 'True'}
  type: form:Components.QueueManager
- layout_properties: {slot: recorder_slot}
  name: recording_widget_1
  properties: {}
  type: form:Components.RecordingWidget
- layout_properties: {slot: playback_slot}
  name: audio_playback_1
  properties: {}
  type: form:Components.AudioPlayback
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Offline Audio Recorder</title>\n    <style>\n      /* Base styles */\n      * { box-sizing: border-box; font-family: Arial, sans-serif; margin: 0; padding: 0; }\n      body { background-color: #f5f5f5; height: 100vh; overflow: hidden; }\n      \n      /* Header and Actions */\n      .fixed-section { background: white; z-index: 10; }\n      .actions-row { display: flex; justify-content: space-between; align-items: center; padding: 15px 20px; }\n      .time { color: #666; font-size: 14px; }\n\n      /* Scrollable content */\n      .scrollable-content { flex: 1; padding: 20px; text-align: center; overflow-y: auto; }\n      .instructions { margin: 20px 0; color: #555; }\n\n      /* Decision container and buttons */\n      #audioDecisionContainer {\n        display: none;\n        padding: 10px 0;\n        justify-content: center;\n        gap: 15px;\n        margin-top: 15px;\n        align-items: center;\n        flex-direction: column;\n      }\n      .decision-buttons {\n        display: flex;\n        gap: 15px;\n        margin-top: 15px;\n      }\n      .decision-button {\n        padding: 10px 20px;\n        border-radius: 4px;\n        border: 1px solid #ddd;\n        cursor: pointer;\n        font-size: 14px;\n        font-weight: bold;\n      }\n      .btn-discard { background-color: #f44336; color: white; border-color: #f44336; }\n      .btn-queue { background-color: #4CAF50; color: white; border-color: #4CAF50; }\n\n      /* Banner for notifications */\n      #bannerContainer { position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 2000; }\n      .banner { margin-bottom: 10px; padding: 10px 20px; border-radius: 4px; color: #fff; text-align: center; }\n      .banner-success { background-color: #4caf50; }\n      .banner-error { background-color: #f44336; }\n    </style>\n  </head>\n  <body>\n    <div class=\"responsive-container\" id=\"offline-form-stable-anchor\">\n      <div class=\"fixed-section\">\n        <div class=\"actions-row\">\n          <!-- The QueueManager component will be placed here by Anvil -->\n          <div anvil-slot=\"queue_slot\"></div>\n          <div anvil-slot=\"time_display_slot\"></div>\n        </div>\n      </div>\n\n      <div class=\"scrollable-content\">\n        <h2>Offline Recorder</h2>\n        <p class=\"instructions\">Record your audio. It will be saved to your device's queue.</p>\n\n        <div id=\"audioInputContainer\">\n          <div anvil-slot=\"recorder_slot\"></div>\n        </div>\n\n        <div id=\"audioDecisionContainer\">\n          <div anvil-slot=\"playback_slot\"></div>\n          <div class=\"decision-buttons\">\n            <button id=\"discard-audio-btn\" class=\"decision-button btn-discard\">Discard</button>\n            <button id=\"queue-audio-btn\" class=\"decision-button btn-queue\">Put in Queue</button>\n          </div>\n        </div>\n\n      </div>\n    </div>\n\n    <script>\n      if (!window.__offline_form_globals) {\n        window.__offline_form_globals = true;\n\n        window.setAudioWorkflowState = (state) => {\n          const inputContainer = document.getElementById('audioInputContainer');\n          const decisionContainer = document.getElementById('audioDecisionContainer');\n\n          if (state === 'decision') {\n            if (inputContainer) inputContainer.style.display = 'none';\n            if (decisionContainer) decisionContainer.style.display = 'flex';\n          } else { // 'input' state\n            if (inputContainer) inputContainer.style.display = 'block';\n            if (decisionContainer) decisionContainer.style.display = 'none';\n          }\n        };\n\n        function attachOfflineEvents() {\n          const stableAnchor = document.getElementById('offline-form-stable-anchor');\n          const reattach = (id, event, handler) => {\n            const el = document.getElementById(id);\n            if (el) {\n              const newEl = el.cloneNode(true);\n              el.parentNode.replaceChild(newEl, el);\n              newEl.addEventListener(event, handler);\n            }\n          };\n\n          // The discard button correctly calls the python method to reset the UI\n          reattach('discard-audio-btn', 'click', () => anvil.call(stableAnchor, 'reset_ui_to_recording'));\n          reattach('queue-audio-btn', 'click', () => anvil.call(stableAnchor, 'queue_button_click'));\n        }\n        attachOfflineEvents();\n      }\n    </script>\n  </body>\n</html>"
    visible: true
  type: HtmlTemplate
is_package: true
