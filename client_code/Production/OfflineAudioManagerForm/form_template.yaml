components:
- layout_properties: {slot: queue_slot}
  name: queue_manager_1
  properties: {disable_import: 'True'}
  type: form:Components.QueueManager
- layout_properties: {slot: recorder_slot}
  name: recording_widget_1
  properties: {}
  type: form:Components.RecordingWidget
- layout_properties: {slot: playback_slot}
  name: audio_playback_1
  properties: {}
  type: form:Components.AudioPlayback
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Offline Audio Recorder</title>
          <style>
            * { box-sizing: border-box; font-family: Arial, sans-serif; margin: 0; padding: 0; }
            body { background-color: #f5f5f5; height: 100vh; overflow: hidden; }
            .fixed-section { background: white; z-index: 10; }
            .actions-row { display: flex; justify-content: space-between; align-items: center; padding: 15px 20px; }
            .scrollable-content { flex: 1; padding: 20px; text-align: center; overflow-y: auto; }
            .instructions { margin: 20px 0; color: #555; }
            #audioDecisionContainer { display: none; padding: 10px 0; justify-content: center; gap: 15px; margin-top: 15px; align-items: center; flex-direction: column; }
            .decision-buttons { display: flex; gap: 15px; margin-top: 15px; }
            .decision-button { padding: 10px 20px; border-radius: 4px; border: 1px solid #ddd; cursor: pointer; font-size: 14px; font-weight: bold; }
            .btn-discard { background-color: #f44336; color: white; border-color: #f44336; }
            .btn-queue { background-color: #4CAF50; color: white; border-color: #4CAF50; }
          </style>
        </head>
        <body>
          <div class="responsive-container" id="offline-form-stable-anchor">
            <div class="fixed-section">
              <div class="actions-row">
                <div anvil-slot="queue_slot"></div>
                <div anvil-slot="time_display_slot"></div>
              </div>
            </div>

            <div class="scrollable-content">
              <h2 id="offlineAudioManager-h2-title">Offline Recorder</h2>
              <p class="instructions" id="offlineAudioManager-p-instructions">Record your audio. It will be saved to your device's queue.</p>

              <div id="audioInputContainer">
                <div anvil-slot="recorder_slot"></div>
              </div>

              <div id="audioDecisionContainer">
                <div anvil-slot="playback_slot"></div>
                <div class="decision-buttons">
                  <button id="offlineAudioManager-button-discard" class="decision-button btn-discard">Discard</button>
                  <button id="offlineAudioManager-button-queue" class="decision-button btn-queue">Put in Queue</button>
                </div>
              </div>
            </div>
          </div>

          <script>
            if (!window.__offline_form_globals) {
              window.__offline_form_globals = true;

              const logger = window.createLogger('OfflineAudioManagerForm');

              window.setAudioWorkflowState = (state) => {
                logger.log(`Setting audio workflow state to: ${state}`);
                const inputContainer = document.getElementById('audioInputContainer');
                const decisionContainer = document.getElementById('audioDecisionContainer');

                if (state === 'decision') {
                  if (inputContainer) inputContainer.style.display = 'none';
                  if (decisionContainer) decisionContainer.style.display = 'flex';
                } else { // 'input' state
                  if (inputContainer) inputContainer.style.display = 'block';
                  if (decisionContainer) decisionContainer.style.display = 'none';
                }
              };

              window.attachOfflineEvents = function() {
                logger.log('Attaching offline form event listeners.');
                const stableAnchor = document.getElementById('offline-form-stable-anchor');

                const reattach = (id, event, handler) => {
                  const el = document.getElementById(id);
                  if (el) {
                    const newEl = el.cloneNode(true);
                    el.parentNode.replaceChild(newEl, el);
                    newEl.addEventListener(event, handler);
                  } else {
                    logger.warn(`Element with ID '${id}' not found for event attachment.`);
                  }
                };

                reattach('offlineAudioManager-button-discard', 'click', () => {
                  logger.debug('Discard button clicked, calling python `reset_ui_to_recording`.');
                  anvil.call(stableAnchor, 'reset_ui_to_recording');
                });

                reattach('offlineAudioManager-button-queue', 'click', () => {
                  logger.debug('Queue button clicked, calling python `queue_button_click`.');
                  anvil.call(stableAnchor, 'queue_button_click');
                });
              };
            }
            // Re-attach events every time the form loads to ensure responsiveness
            attachOfflineEvents();
          </script>
        </body>
      </html>
    visible: true
  type: HtmlTemplate
is_package: true
