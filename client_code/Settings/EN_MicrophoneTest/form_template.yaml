components: []
container:
  properties:
    html: |
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Microphone Test</title>
        <style>
          /* --------------------------------------------------------
             Basic Styles
          --------------------------------------------------------- */
          * {
            box-sizing: border-box;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
          }
          body {
            background-color: #f5f5f5;
            height: 100vh;
            overflow: hidden;
          }
          .container {
            width: 100%;
            max-width: 600px;
            margin: 0 auto;
            background: white;
            height: 100vh;
            display: flex;
            flex-direction: column;
          }
          .header {
            padding: 20px;
            border-bottom: 1px solid #ddd;
            text-align: center;
          }
          .header h1 {
            font-size: 20px;
            margin-bottom: 10px;
          }
          .header p {
            font-size: 14px;
            color: #333;
            line-height: 1.4;
          }
          .content {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            position: relative;
          }
          /* --------------------------------------------------------
             Audio Section â€“ Circular Recording Controls Only
          --------------------------------------------------------- */
          .audio-section {
            background: #f8f8f8;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #ddd;
            margin-bottom: 20px;
            position: relative;
          }
          .recording-controls {
            position: relative;
            width: 200px;
            height: 200px;
            margin: 20px auto;
          }
          /* Circular Progress Ring */
          #circularProgress {
            position: relative;
            width: 200px;
            height: 200px;
            margin: 0 auto;
            border-radius: 50%;
            overflow: hidden;
          }
          #progressRing {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: conic-gradient(#ddd 0deg, #ddd 0deg);
          }
          #centerHole {
            position: absolute;
            top: 8px;
            left: 8px;
            width: 184px;
            height: 184px;
            background-color: #fff;
            border-radius: 50%;
            z-index: 1;
          }
          .control-button-group {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: flex;
            gap: 30px;
            z-index: 2;
          }
          .control-button {
            width: 45px;
            height: 45px;
            border: 1px solid #666;
            border-radius: 2px;
            cursor: pointer;
            background-color: white;
            color: #666;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            transition: all 0.3s ease;
            padding: 0;
          }
          .control-button svg {
            pointer-events: none;
          }
          .control-button:hover {
            background-color: #f5f5f5;
            border-color: #333;
            color: #333;
          }
          @keyframes recordingFlash {
            0% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }
            50% { background: conic-gradient(#ffffff 0deg, #ffffff 360deg); }
            100% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }
          }
          .recording-flash {
            animation: recordingFlash 1.5s infinite;
          }
          /* --------------------------------------------------------
             Responsive adjustments
          --------------------------------------------------------- */
          @media (max-width: 600px) {
            .container {
              height: 100vh;
            }
          }
        </style>
      </head>
      <body>
        <div class="container">
          <!-- Header with instructions -->
          <div class="header">
            <h1>Microphone Test</h1>
            <p>
              Please record in your language:<br>
              "Hello, I am testing my microphone to check that everything is working correctly with the transcription system".<br>
              Also, please indicate the brand and model of your device.
            </p>
          </div>
          <!-- Content with the recording controls only -->
          <div class="content">
            <div class="audio-section">
              <div class="recording-controls">
                <div id="circularProgress">
                  <div id="progressRing"></div>
                  <div id="centerHole"></div>
                  <div class="control-button-group">
                    <!-- Play/Pause and Stop Buttons -->
                    <button id="playButton" class="control-button">
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z"/>
                        <path d="M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z"/>
                        <path d="M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z"/>
                      </svg>
                    </button>
                    <button id="stopButton" class="control-button">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
                        <path d="M4 12l5 5L20 7" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <script>
          // Global variables for microphone test
          if (!window.__mic_test_globals) {
            window.__mic_test_globals = true;
            window.micTestData = {
              mediaRecorder: null,
              recordedChunks: [],
              audioBlob: null,
              stream: null,
              isRecording: false
            };
            window.transcriptionProgressData = {
              currentProgress: 0,
              intervalId: null
            };

            window.blobToBase64 = function(blob) {
              return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                  const resultStr = reader.result;
                  const base64 = resultStr.split(',')[1];
                  resolve(base64);
                };
                reader.onerror = reject;
                reader.readAsDataURL(blob);
              });
            };

            window.setRingPercentage = function(percentage) {
              const ringElem = document.getElementById("progressRing");
              const clamped = Math.max(0, Math.min(100, percentage));
              const angle = (clamped / 100) * 360;
              if (ringElem) {
                ringElem.style.background = `conic-gradient(#4caf50 ${angle}deg, #ddd ${angle}deg)`;
              }
            };

            window.simulateTranscriptionProgress = function() {
              const data = window.transcriptionProgressData;
              data.currentProgress = 0;
              window.setRingPercentage(0);
              data.intervalId = setInterval(() => {
                if (data.currentProgress < 90) {
                  data.currentProgress += 2;
                  window.setRingPercentage(data.currentProgress);
                } else {
                  clearInterval(data.intervalId);
                }
              }, 300);
            };

            window.finishTranscriptionProgress = function() {
              const data = window.transcriptionProgressData;
              clearInterval(data.intervalId);
              data.currentProgress = 100;
              window.setRingPercentage(100);
            };

            window.startRecordingFlash = function() {
              const ringElem = document.getElementById("progressRing");
              if (ringElem) { ringElem.classList.add("recording-flash"); }
            };

            window.stopRecordingFlash = function() {
              const ringElem = document.getElementById("progressRing");
              if (ringElem) { ringElem.classList.remove("recording-flash"); }
            };

            // This function will call the relay on the front Python which calls process_and_log_test
            window.processTestRecording = async function(blob) {
              try {
                window.simulateTranscriptionProgress();
                const base64Audio = await window.blobToBase64(blob);
                const stopBtn = document.getElementById("stopButton");
                anvil.call(stopBtn, "process_test_recording", base64Audio)
                  .then(result => {
                    console.log("Test recording processed. Server response:", result);
                    window.finishTranscriptionProgress();
                  })
                  .catch(error => {
                    console.error("Error processing test recording:", error);
                    alert("An error occurred while processing the test recording.");
                    window.finishTranscriptionProgress();
                  });
              } catch (error) {
                console.error("Error converting blob to base64:", error);
                alert("An error occurred while preparing the audio data.");
                window.finishTranscriptionProgress();
              }
            };
          }

          // Attach event listeners for microphone test
          function attachMicTestEvents() {
            const data = window.micTestData;
            const playButton = document.getElementById("playButton");
            const stopButton = document.getElementById("stopButton");

            // Ensure fresh event listeners
            if (playButton) playButton.replaceWith(playButton.cloneNode(true));
            if (stopButton) stopButton.replaceWith(stopButton.cloneNode(true));
            const newPlayButton = document.getElementById("playButton");
            const newStopButton = document.getElementById("stopButton");

            if (newPlayButton) {
              newPlayButton.addEventListener("click", async (evt) => {
                if (!data.isRecording) {
                  if (data.mediaRecorder && data.mediaRecorder.state === "inactive") {
                    data.mediaRecorder = null;
                  }
                  if (!data.mediaRecorder) {
                    try {
                      data.stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                      data.mediaRecorder = new MediaRecorder(data.stream);
                      data.recordedChunks = [];
                      data.mediaRecorder.ondataavailable = event => data.recordedChunks.push(event.data);
                      data.mediaRecorder.start();
                      data.isRecording = true;
                      newPlayButton.innerHTML = window.pauseIconHTML;
                      anvil.call(evt.target, "start_test_recording");
                      window.startRecordingFlash();
                    } catch (err) {
                      console.error("Microphone access error:", err);
                      anvil.call(evt.target, "show_error", "Microphone access denied or unavailable.");
                    }
                  } else {
                    if (data.mediaRecorder.state === "paused") {
                      data.mediaRecorder.resume();
                      data.isRecording = true;
                      newPlayButton.innerHTML = window.pauseIconHTML;
                      anvil.call(evt.target, "start_test_recording");
                    }
                  }
                } else {
                  if (data.mediaRecorder && data.mediaRecorder.state === "recording") {
                    data.mediaRecorder.pause();
                    data.isRecording = false;
                    newPlayButton.innerHTML = window.micIconHTML;
                    anvil.call(evt.target, "pause_test_recording");
                  }
                }
              });
            }

            if (newStopButton) {
              newStopButton.addEventListener("click", (evt) => {
                if (data.mediaRecorder && data.mediaRecorder.state !== "inactive") {
                  data.mediaRecorder.onstop = () => {
                    data.audioBlob = new Blob(data.recordedChunks, { type: 'audio/webm' });
                    window.processTestRecording(data.audioBlob);
                    anvil.call(evt.target, "stop_test_recording");
                    window.stopRecordingFlash();
                  };
                  data.mediaRecorder.stop();
                  data.isRecording = false;
                  newPlayButton.innerHTML = window.micIconHTML;
                }
              });
            }
          }

          // Define icon HTML for the microphone (record) and pause states.
          window.micIconHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
              <path d="M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z"/>
              <path d="M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z"/>
              <path d="M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z"/>
            </svg>
          `;
          window.pauseIconHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
              <rect x="9" y="2" width="6" height="12" rx="3" fill="currentColor"/>
              <path d="M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
          `;

          attachMicTestEvents();
        </script>
      </body>
      </html>
  type: HtmlTemplate
is_package: true
