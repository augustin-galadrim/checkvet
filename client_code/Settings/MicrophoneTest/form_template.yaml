components:
- layout_properties: {slot: default}
  name: header_return_1
  properties: {return_form: Settings.Settings}
  type: form:Components.HeaderReturn
- layout_properties: {slot: recorder_slot}
  name: recording_widget_1
  properties: {}
  type: form:Components.RecordingWidget
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Test du Microphone</title>\n  <style>\n    /* --------------------------------------------------------\n       Styles de base\n    --------------------------------------------------------- */\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      overflow: hidden;\n    }\n    .container {\n      width: 100%;\n      max-width: 600px;\n      margin: 0 auto;\n      background: white;\n      height: 100vh;\n      display: flex;\n      flex-direction: column;\n    }\n    .instructions {\n      padding: 20px;\n      border-bottom: 1px solid #ddd;\n      text-align: center;\n    }\n    .instructions h1 {\n      font-size: 20px;\n      margin-bottom: 10px;\n    }\n    .instructions p {\n      font-size: 14px;\n      color: #333;\n      line-height: 1.4;\n    }\n    .content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n      position: relative;\n    }\n    /* --------------------------------------------------------\n       Section Audio – Circular Recording Controls Only\n    --------------------------------------------------------- */\n    .audio-section {\n      background: #f8f8f8;\n      padding: 20px;\n      border-radius: 8px;\n      border: 1px solid #ddd;\n      margin-bottom: 20px;\n      position: relative;\n    }\n    .recording-controls {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 20px auto;\n    }\n    /* Cercle de progression (anneau circulaire) */\n    #circularProgress {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 0 auto;\n      border-radius: 50%;\n      overflow: hidden;\n    }\n    #progressRing {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background: conic-gradient(#ddd 0deg, #ddd 0deg);\n    }\n    #centerHole {\n      position: absolute;\n      top: 8px;\n      left: 8px;\n      width: 184px;\n      height: 184px;\n      background-color: #fff;\n      border-radius: 50%;\n      z-index: 1;\n    }\n    .control-button-group {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 30px;\n      z-index: 2;\n    }\n    .control-button {\n      width: 45px;\n      height: 45px;\n      border: 1px solid #666;\n      border-radius: 2px;\n      cursor: pointer;\n      background-color: white;\n      color: #666;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 24px;\n      transition: all 0.3s ease;\n      padding: 0;\n    }\n    .control-button svg {\n      pointer-events: none;\n    }\n    .control-button:hover {\n      background-color: #f5f5f5;\n      border-color: #333;\n      color: #333;\n    }\n    @keyframes recordingFlash {\n      0% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n      50% { background: conic-gradient(#ffffff 0deg, #ffffff 360deg); }\n      100% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n    }\n    .recording-flash {\n      animation: recordingFlash 1.5s infinite;\n    }\n    /* --------------------------------------------------------\n       Responsive adjustments\n    --------------------------------------------------------- */\n    @media (max-width: 600px) {\n      .container {\n        height: 100vh;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- Header with instructions -->\n    <div class=\"header\">\n      <div anvil-slot=\"default\"></div>\n    </div>\n    <!-- Content with the recording controls only -->\n    <div class=\"content\">\n      <div class=\"instructions\">\n        <h1>Test du Microphone</h1>\n        <p>\n          Veuillez enregistrer dans votre langue :<br>\n          \"Bonjour, je teste mon microphone pour vérifier que tout fonctionne bien avec le système de transcription\".<br>\n          Indiquez également la marque et le modèle de votre appareil.\n        </p>\n      </div>\n      <div class=\"audio-section\">\n        <div class=\"recording-controls\">\n          <div anvil-slot=\"recorder_slot\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // Global variables for microphone test\n    if (!window.__mic_test_globals) {\n      window.__mic_test_globals = true;\n      window.micTestData = {\n        mediaRecorder: null,\n        recordedChunks: [],\n        audioBlob: null,\n        stream: null,\n        isRecording: false\n      };\n      window.transcriptionProgressData = {\n        currentProgress: 0,\n        intervalId: null\n      };\n\n      window.blobToBase64 = function(blob) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            const resultStr = reader.result;\n            const base64 = resultStr.split(',')[1];\n            resolve(base64);\n          };\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        });\n      };\n\n      window.setRingPercentage = function(percentage) {\n        const ringElem = document.getElementById(\"progressRing\");\n        const clamped = Math.max(0, Math.min(100, percentage));\n        const angle = (clamped / 100) * 360;\n        if (ringElem) {\n          ringElem.style.background = `conic-gradient(#4caf50 ${angle}deg, #ddd ${angle}deg)`;\n        }\n      };\n\n      window.simulateTranscriptionProgress = function() {\n        const data = window.transcriptionProgressData;\n        data.currentProgress = 0;\n        window.setRingPercentage(0);\n        data.intervalId = setInterval(() => {\n          if (data.currentProgress < 90) {\n            data.currentProgress += 2;\n            window.setRingPercentage(data.currentProgress);\n          } else {\n            clearInterval(data.intervalId);\n          }\n        }, 300);\n      };\n\n      window.finishTranscriptionProgress = function() {\n        const data = window.transcriptionProgressData;\n        clearInterval(data.intervalId);\n        data.currentProgress = 100;\n        window.setRingPercentage(100);\n      };\n\n      window.startRecordingFlash = function() {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (ringElem) { ringElem.classList.add(\"recording-flash\"); }\n      };\n\n      window.stopRecordingFlash = function() {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (ringElem) { ringElem.classList.remove(\"recording-flash\"); }\n      };\n\n      // This function will call the relay on the front Python which calls process_and_log_test\n      window.processTestRecording = async function(blob) {\n        try {\n          window.simulateTranscriptionProgress();\n          const base64Audio = await window.blobToBase64(blob);\n          const stopBtn = document.getElementById(\"stopButton\");\n          anvil.call(stopBtn, \"process_test_recording\", base64Audio)\n            .then(result => {\n              console.log(\"Test recording processed. Server response:\", result);\n              window.finishTranscriptionProgress();\n            })\n            .catch(error => {\n              console.error(\"Error processing test recording:\", error);\n              alert(\"Une erreur s'est produite lors du traitement de l'enregistrement de test.\");\n              window.finishTranscriptionProgress();\n            });\n        } catch (error) {\n          console.error(\"Error converting blob to base64:\", error);\n          alert(\"Une erreur s'est produite lors de la préparation des données audio.\");\n          window.finishTranscriptionProgress();\n        }\n      };\n    }\n\n    // Attach event listeners for microphone test\n    function attachMicTestEvents() {\n      const data = window.micTestData;\n      const playButton = document.getElementById(\"playButton\");\n      const stopButton = document.getElementById(\"stopButton\");\n\n      // Ensure fresh event listeners\n      if (playButton) playButton.replaceWith(playButton.cloneNode(true));\n      if (stopButton) stopButton.replaceWith(stopButton.cloneNode(true));\n      const newPlayButton = document.getElementById(\"playButton\");\n      const newStopButton = document.getElementById(\"stopButton\");\n\n      if (newPlayButton) {\n        newPlayButton.addEventListener(\"click\", async (evt) => {\n          if (!data.isRecording) {\n            if (data.mediaRecorder && data.mediaRecorder.state === \"inactive\") {\n              data.mediaRecorder = null;\n            }\n            if (!data.mediaRecorder) {\n              try {\n                data.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                data.mediaRecorder = new MediaRecorder(data.stream);\n                data.recordedChunks = [];\n                data.mediaRecorder.ondataavailable = event => data.recordedChunks.push(event.data);\n                data.mediaRecorder.start();\n                data.isRecording = true;\n                newPlayButton.innerHTML = window.pauseIconHTML;\n                anvil.call(evt.target, \"start_test_recording\");\n                window.startRecordingFlash();\n              } catch (err) {\n                console.error(\"Erreur d'accès au microphone :\", err);\n                anvil.call(evt.target, \"show_error\", \"Accès au microphone refusé ou indisponible.\");\n              }\n            } else {\n              if (data.mediaRecorder.state === \"paused\") {\n                data.mediaRecorder.resume();\n                data.isRecording = true;\n                newPlayButton.innerHTML = window.pauseIconHTML;\n                anvil.call(evt.target, \"start_test_recording\");\n              }\n            }\n          } else {\n            if (data.mediaRecorder && data.mediaRecorder.state === \"recording\") {\n              data.mediaRecorder.pause();\n              data.isRecording = false;\n              newPlayButton.innerHTML = window.micIconHTML;\n              anvil.call(evt.target, \"pause_test_recording\");\n            }\n          }\n        });\n      }\n\n      if (newStopButton) {\n        newStopButton.addEventListener(\"click\", (evt) => {\n          if (data.mediaRecorder && data.mediaRecorder.state !== \"inactive\") {\n            data.mediaRecorder.onstop = () => {\n              data.audioBlob = new Blob(data.recordedChunks, { type: 'audio/webm' });\n              window.processTestRecording(data.audioBlob);\n              anvil.call(evt.target, \"stop_test_recording\");\n              window.stopRecordingFlash();\n            };\n            data.mediaRecorder.stop();\n            data.isRecording = false;\n            newPlayButton.innerHTML = window.micIconHTML;\n          }\n        });\n      }\n    }\n\n    // Define icon HTML for the microphone (record) and pause states.\n    window.micIconHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n        <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n        <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n        <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n      </svg>\n    `;\n    window.pauseIconHTML = `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n        <rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/>\n        <path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n      </svg>\n    `;\n\n    attachMicTestEvents();\n  </script>\n<!-- Add this simple script to your forms -->\n  <script>\n    // Initialize only once\n    if (!window.__session_handlers_initialized) {\n      window.__session_handlers_initialized = true;\n      \n      // Session handler setup\n      window.setupSessionHandlers = function() {\n        // Tab visibility change\n        document.addEventListener('visibilitychange', function() {\n          if (document.visibilityState === 'visible') {\n            anvil.call(document.body, 'refresh_session_relay');\n          }\n        });\n        \n        // Online status change\n        window.addEventListener('online', function() {\n          anvil.call(document.body, 'refresh_session_relay');\n        });\n      };\n    }\n  </script>\n</body>\n</html>\n"
  type: HtmlTemplate
is_package: true
