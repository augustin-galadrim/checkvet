components:
- layout_properties: {slot: default}
  name: header_nav_1
  properties: {active_tab: Settings}
  type: form:Components.HeaderNav
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            /* --- Existing Global Styles (Slightly adjusted for consistency) --- */
            * {
              box-sizing: border-box;
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 0;
            }
            body {
              background-color: #f5f5f5;
              height: 100vh;
              overflow: hidden;
            }
            .container {
              display: flex;
              flex-direction: column;
              height: 100vh;
              max-width: 800px;
              margin: 0 auto;
              background-color: white;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .fixed-section {
              background: white;
              z-index: 10;
            }
            .actions-row {
              display: flex;
              justify-content: flex-end;
              align-items: center;
              padding: 15px 20px;
            }
            .time {
              color: #666;
              font-size: 14px;
            }
            .scrollable-content {
              flex: 1;
              overflow-y: auto;
              padding: 20px;
            }

            /* --- NEW: Improved Settings Layout Styles --- */
            .settings-form {
              background-color: white;
              border-radius: 8px;
            }
            .settings-section {
              background-color: #f9f9f9;
              border: 1px solid #e0e0e0;
              border-radius: 8px;
              padding: 20px;
              margin-bottom: 25px;
            }
            .section-title {
              font-size: 18px;
              font-weight: 600;
              color: #333;
              margin-top: 0;
              margin-bottom: 20px;
              border-bottom: 1px solid #e0e0e0;
              padding-bottom: 10px;
            }
            .form-row {
              display: flex;
              flex-wrap: wrap;
              gap: 20px;
            }
            .form-group {
              flex: 1 1 100%; /* Default to full width */
              margin-bottom: 15px;
            }
            .form-group.half-width {
              flex: 1 1 calc(50% - 10px); /* Two columns on larger screens */
              min-width: 250px; /* Prevent excessive shrinking */
            }
            .form-group label {
              display: block;
              margin-bottom: 8px;
              font-weight: 500;
              color: #333;
            }
            .form-group input[type="text"],
            .form-group input[type="email"],
            .form-group input[type="tel"] {
              width: 100%;
              padding: 10px;
              border: 1px solid #ddd;
              border-radius: 4px;
              font-size: 14px;
            }
            .form-group input[type="email"][readonly] {
              background-color: #f0f0f0;
              cursor: not-allowed;
            }
            .file-input-wrapper {
              display: flex;
              align-items: center;
              gap: 10px;
            }
            .file-input-wrapper input[type="file"] {
              display: none;
            }
            .file-input-wrapper .file-upload-btn {
              padding: 8px 16px;
              background-color: #f0f0f0;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
              font-size: 14px;
              white-space: nowrap;
            }
            .file-input-wrapper .file-name-label {
              flex: 1;
              overflow: hidden;
              text-overflow: ellipsis;
              white-space: nowrap;
              color: #666;
              font-size: 14px;
              padding: 8px;
              border: 1px dashed #ccc;
              border-radius: 4px;
              background-color: #fafafa;
            }
            .button-group {
              display: flex;
              gap: 10px;
              margin-top: 20px;
              justify-content: flex-end;
            }
            .custom-button {
              padding: 12px 24px;
              border: none;
              border-radius: 4px;
              cursor: pointer;
              font-size: 14px;
              text-align: center;
              transition: background-color 0.3s;
            }
            #submit-btn {
              background-color: #4CAF50;
              color: white;
            }
            #cancel-btn {
              background-color: #aaa;
              color: white;
            }
            .custom-structure-button {
              width: 100%;
              padding: 10px;
              border: 1px solid #ddd;
              border-radius: 4px;
              font-size: 14px;
              background-color: #fff;
              cursor: pointer;
              text-align: left;
            }

            /* --- Modal, Footer, and Other Styles (Unchanged) --- */
            .modal {
              display: none; position: fixed; z-index: 20; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.5);
            }
            .modal-content {
              background-color: #fefefe; margin: 10% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 400px; border-radius: 8px;
            }
            .modal-close {
              color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer;
            }
            .structure-option {
              padding: 10px; border: 1px solid #ddd; border-radius: 4px; margin: 5px 0; cursor: pointer; background-color: #fff;
            }
            .structure-option.selected {
              background-color: #d0ebff; border-color: #66b0ff;
            }
            .logout-footer {
              padding: 20px; border-top: 1px solid #ddd; background-color: #f8f8f8; text-align: center; margin-top: 20px;
            }
            #logout-btn, #admin-btn {
              background-color: #f44336; color: white; border: none; border-radius: 4px; padding: 12px 24px; cursor: pointer; font-size: 14px; width: 100%;
            }
            #admin-btn {
              background-color: #007bff; margin-bottom: 10px; display: none; font-weight: bold; border: 2px solid #0056b3;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="fixed-section">
              <div anvil-slot="default"></div>
              <div class="actions-row">
                <div class="time">--:--</div>
              </div>
            </div>
            <div class="scrollable-content">
              <div class="settings-form">
                <form id="vet-settings-form" onsubmit="return false;">

                  <!-- Section 1: Vet Information -->
                  <div class="settings-section">
                    <h2 class="section-title">Vet Information</h2>
                    <div class="form-row">
                      <div class="form-group half-width">
                        <label for="name">Name</label>
                        <input type="text" id="name" name="name_input" required>
                      </div>
                      <div class="form-group half-width">
                        <label for="phone">Phone</label>
                        <input type="tel" id="phone" name="phone_input">
                      </div>
                    </div>
                    <div class="form-group">
                      <label for="email">Email</label>
                      <input type="email" id="email" name="email_input" readonly>
                    </div>
                  </div>

                  <!-- Section 2: Organization & Preferences -->
                  <div class="settings-section">
                    <h2 class="section-title">Organization & Preferences</h2>
                    <div class="form-row">
                      <div class="form-group half-width">
                        <label for="structure-button">Structure</label>
                        <input type="hidden" id="structure" name="structure_input">
                        <button type="button" id="structure-button" class="custom-structure-button">Ind√©pendant</button>
                      </div>
                      <div class="form-group half-width">
                        <label for="favorite-language-button">Favorite Language</label>
                        <input type="hidden" id="favorite-language" name="favorite_language_input">
                        <button type="button" id="favorite-language-button" class="custom-structure-button">English</button>
                      </div>
                    </div>
                    <div class="form-group">
                      <label style="display: flex; align-items: center; cursor: pointer; user-select: none;">
                        <input type="checkbox" id="supervisor" name="supervisor_checkbox" style="margin-right: 8px;">
                        <span>Supervisor</span>
                      </label>
                    </div>
                  </div>

                  <!-- Section 4: Tools -->
                  <div class="settings-section">
                    <h2 class="section-title">Tools</h2>
                    <button type="button" id="microphone-test-button" class="custom-structure-button">Test My Microphone</button>
                  </div>


                  <!-- Main Action Buttons -->
                  <div class="button-group">
                    <div id="cancel-btn" class="custom-button">Cancel</div>
                    <div id="submit-btn" class="custom-button">Update Settings</div>
                  </div>
                </form>
              </div>
              <div class="logout-footer">
                <button id="admin-btn" class="custom-button">Administration</button>
                <button id="logout-btn" class="custom-button">Logout</button>
              </div>
            </div>
          </div>

          <!-- Modals (Structure and Language) - Unchanged -->
          <div id="structure-modal" class="modal">
            <div class="modal-content">
              <span id="structure-modal-close" class="modal-close">√ó</span>
              <h3>Select Structure</h3>
              <div id="structure-options"></div>
            </div>
          </div>
          <div id="favorite-language-modal" class="modal">
            <div class="modal-content">
              <span id="favorite-language-modal-close" class="modal-close">√ó</span>
              <h3>Select Favorite Language</h3>
              <div id="favorite-language-options"></div>
            </div>
          </div>

          <script>
            // Function to show/hide admin button - defined OUTSIDE conditional block
            window.showAdminButton = function(isAdmin) {
              const adminBtn = document.getElementById("admin-btn");
              console.log("showAdminButton called with isAdmin =", isAdmin);
              if (adminBtn) {
                adminBtn.style.display = isAdmin ? "block" : "none";
                console.log("Admin button display set to:", adminBtn.style.display);
              } else {
                console.log("Admin button element not found!");
              }
            };

            // ---------------------------------------
            // 1) Ex√©cuter une seule fois par session
            // ---------------------------------------
            if (!window.__my_vet_settings_globals) {
              window.__my_vet_settings_globals = true;
              console.log("Initializing settings globals");

              // Function to display success/error banners
              window.displayBanner = function(message, type) {
                console.log("Display banner:", message, type);
                const bannerDiv = document.createElement('div');
                bannerDiv.textContent = message;
                bannerDiv.style.padding = '10px';
                bannerDiv.style.margin = '10px 0';
                bannerDiv.style.borderRadius = '4px';
                bannerDiv.style.textAlign = 'center';
                bannerDiv.style.position = 'fixed';
                bannerDiv.style.top = '20px';
                bannerDiv.style.left = '50%';
                bannerDiv.style.transform = 'translateX(-50%)';
                bannerDiv.style.zIndex = '1000';
                bannerDiv.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';

                if (type === 'success') {
                  bannerDiv.style.backgroundColor = '#4CAF50';
                  bannerDiv.style.color = 'white';
                } else {
                  bannerDiv.style.backgroundColor = '#f44336';
                  bannerDiv.style.color = 'white';
                }

                document.body.appendChild(bannerDiv);

                // Remove banner after 3 seconds
                setTimeout(() => {
                  if (document.body.contains(bannerDiv)) {
                    document.body.removeChild(bannerDiv);
                  }
                }, 3000);
              };

              // Fonctions de base pour get/set des champs de texte
              window.getValueById = function(id) {
                const element = document.getElementById(id);
                return element ? element.value : "";
              };
              window.setValueById = function(id, value) {
                const element = document.getElementById(id);
                if (element) {
                  element.value = value;
                }
              };

              window.setButtonTextById = function(id, text) {
                const element = document.getElementById(id);
                if (element) {
                  element.textContent = text;
                }
              };

              // Pour les cases √† cocher
              window.getCheckedById = function(id) {
                const element = document.getElementById(id);
                return element ? element.checked : false;
              };
              window.setCheckedById = function(id, checked) {
                const element = document.getElementById(id);
                if (element) {
                  element.checked = checked;
                }
              };

              // Pour les libell√©s de noms de fichiers
              window.setFileNameById = function(id, fileName) {
                const input = document.getElementById(id);
                if (input && input.type === 'file') {
                  const label = input.nextElementSibling.nextElementSibling;
                  if (label && label.classList.contains('file-name-label')) {
                    label.textContent = fileName || 'Aucun fichier choisi';
                  }
                }
              };

              // Pour lire les donn√©es d'un fichier (renvoie une Promise ou null)
              window.getFileData = function(inputId) {
                const input = document.getElementById(inputId);
                if (input && input.files && input.files.length > 0) {
                  const file = input.files[0];
                  return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                      resolve({
                        name: file.name,
                        content_type: file.type,
                        content: new Uint8Array(e.target.result)
                      });
                    };
                    reader.onerror = reject;
                    reader.readAsArrayBuffer(file);
                  });
                }
                return null;
              };

              // Remplir le modal de structure avec des options.
              window.populateStructureModal = function(options, current) {
                const optionsContainer = document.getElementById("structure-options");
                optionsContainer.innerHTML = "";
                options.forEach(opt => {
                  const optionElem = document.createElement("div");
                  optionElem.classList.add("structure-option");
                  optionElem.textContent = opt;
                  if (current && opt === current) {
                    optionElem.classList.add("selected");
                  }
                  optionElem.addEventListener("click", function(event) {
                    if (opt !== "Ind√©pendant") {
                      anvil.call(document.getElementById('vet-settings-form'), 'check_structure_authorization', opt)
                        .then(function(isAuthorized) {
                          if (!isAuthorized) {
                            alert("Vous n'√™tes pas autoris√©(e) pour cette structure.");
                            return;
                          }
                          let confirmMsg = "√ätes-vous s√ªr de vouloir changer votre structure pour " + opt + " ?";
                          if(opt !== current && !confirm(confirmMsg)) {
                            return;
                          }
                          document.getElementById("structure").value = opt;
                          setButtonTextById("structure-button", opt);
                          const allOptions = optionsContainer.querySelectorAll(".structure-option");
                          allOptions.forEach(elem => elem.classList.remove("selected"));
                          optionElem.classList.add("selected");
                          current = opt;
                          window.closeStructureModal();
                        })
                        .catch(function(error) {
                          alert("Erreur lors de la v√©rification de l'autorisation: " + error);
                        });
                    } else {
                      let confirmMsg = "Voulez-vous vraiment quitter votre structure actuelle ?";
                      if(opt !== current && !confirm(confirmMsg)) {
                        return;
                      }
                      document.getElementById("structure").value = opt;
                      setButtonTextById("structure-button", opt);
                      const allOptions = optionsContainer.querySelectorAll(".structure-option");
                      allOptions.forEach(elem => elem.classList.remove("selected"));
                      optionElem.classList.add("selected");
                      current = opt;
                      window.closeStructureModal();
                    }
                  });
                  optionsContainer.appendChild(optionElem);
                });
              };

              // Remplir le modal de langue pr√©f√©r√©e avec des options.
              window.populateFavoriteLanguageModal = function(options, current) {
                const optionsContainer = document.getElementById("favorite-language-options");
                optionsContainer.innerHTML = "";
                options.forEach(opt => {
                  const optionElem = document.createElement("div");
                  optionElem.classList.add("structure-option");
                  optionElem.textContent = opt.display;
                  if (current && opt.value === current) {
                    optionElem.classList.add("selected");
                  }
                  optionElem.addEventListener("click", function(event) {
                    document.getElementById("favorite-language").value = opt.value;
                    setButtonTextById("favorite-language-button", opt.display);
                    const allOptions = optionsContainer.querySelectorAll(".structure-option");
                    allOptions.forEach(elem => elem.classList.remove("selected"));
                    optionElem.classList.add("selected");
                    current = opt.value;
                    window.closeFavoriteLanguageModal();
                  });
                  optionsContainer.appendChild(optionElem);
                });
              };

              // Ouvrir et fermer les modaux
              window.openStructureModal = function() {
                const modal = document.getElementById("structure-modal");
                modal.style.display = "block";
              };
              window.closeStructureModal = function() {
                const modal = document.getElementById("structure-modal");
                modal.style.display = "none";
              };
              window.openFavoriteLanguageModal = function() {
                const modal = document.getElementById("favorite-language-modal");
                modal.style.display = "block";
              };
              window.closeFavoriteLanguageModal = function() {
                const modal = document.getElementById("favorite-language-modal");
                modal.style.display = "none";
              };

              // Attacher les √©couteurs d'√©v√©nements
              window.__attachVetSettingsEvents = function() {
                console.log("Attaching vet settings events");
                const vetSettingsForm = document.getElementById('vet-settings-form');
                const submitBtn = document.getElementById('submit-btn');
                const cancelBtn = document.getElementById('cancel-btn');
                const structureButton = document.getElementById("structure-button");
                const modalClose = document.getElementById("structure-modal-close");

                if (!vetSettingsForm || !submitBtn || !cancelBtn || !structureButton || !modalClose) {
                  console.log("Settings: Certains √©l√©ments n'ont pas √©t√© trouv√©s, annulation de l'attachement.");
                  return;
                }

                // Remplacer les anciens √©couteurs par des clones
                submitBtn.replaceWith(submitBtn.cloneNode(true));
                cancelBtn.replaceWith(cancelBtn.cloneNode(true));
                structureButton.replaceWith(structureButton.cloneNode(true));
                modalClose.replaceWith(modalClose.cloneNode(true));

                const newSubmitBtn = document.getElementById('submit-btn');
                const newCancelBtn = document.getElementById('cancel-btn');
                const newStructureButton = document.getElementById("structure-button");
                const newModalClose = document.getElementById("structure-modal-close");

                newSubmitBtn.addEventListener('click', (event) => {
                  anvil.call(vetSettingsForm, 'submit_click');
                });

                newCancelBtn.addEventListener('click', (event) => {
                  anvil.call(vetSettingsForm, 'cancel_click');
                });

                newStructureButton.addEventListener('click', (event) => {
                  openStructureModal();
                });

                newModalClose.addEventListener('click', (event) => {
                  closeStructureModal();
                });

                window.addEventListener('click', function(event) {
                  const modal = document.getElementById("structure-modal");
                  if (event.target == modal) {
                    closeStructureModal();
                  }
                });

                // Mettre √† jour le libell√© lors de la s√©lection d'un fichier
                const fileInputs = vetSettingsForm.querySelectorAll('input[type="file"]');
                fileInputs.forEach(input => {
                  input.addEventListener('change', () => {
                    const label = input.nextElementSibling.nextElementSibling;
                    if (label && label.classList.contains('file-name-label')) {
                      label.textContent = input.files[0] ? input.files[0].name : 'Aucun fichier choisi';
                    }
                  });
                });

                // Attacher les √©v√©nements pour le bouton de langue pr√©f√©r√©e
                const favoriteLanguageButton = document.getElementById("favorite-language-button");
                const favoriteLanguageModalClose = document.getElementById("favorite-language-modal-close");
                favoriteLanguageButton.replaceWith(favoriteLanguageButton.cloneNode(true));
                favoriteLanguageModalClose.replaceWith(favoriteLanguageModalClose.cloneNode(true));
                const newFavoriteLanguageButton = document.getElementById("favorite-language-button");
                const newFavoriteLanguageModalClose = document.getElementById("favorite-language-modal-close");
                newFavoriteLanguageButton.addEventListener('click', (event) => {
                  openFavoriteLanguageModal();
                });
                newFavoriteLanguageModalClose.addEventListener('click', (event) => {
                  closeFavoriteLanguageModal();
                });
                window.addEventListener('click', function(event) {
                  const modal = document.getElementById("favorite-language-modal");
                  if (event.target == modal) {
                    closeFavoriteLanguageModal();
                  }
                });

                // Attacher les √©v√©nements pour le bouton Tester mon micro
                const microphoneTestButton = document.getElementById("microphone-test-button");
                if(microphoneTestButton) {
                  microphoneTestButton.replaceWith(microphoneTestButton.cloneNode(true));
                  const newMicrophoneTestButton = document.getElementById("microphone-test-button");
                  newMicrophoneTestButton.addEventListener('click', (event) => {
                    anvil.call(vetSettingsForm, 'openMicrophoneTest');
                  });
                }

                // Attacher les √©v√©nements pour le bouton de d√©connexion
                const logoutBtn = document.getElementById("logout-btn");
                if (logoutBtn) {
                  logoutBtn.replaceWith(logoutBtn.cloneNode(true));
                  const newLogoutBtn = document.getElementById("logout-btn");
                  newLogoutBtn.addEventListener('click', (event) => {
                    anvil.call(vetSettingsForm, 'logout_click');
                  });
                }

                // Attacher l'√©v√©nement pour le bouton Admin
                const adminBtn = document.getElementById("admin-btn");
                console.log("Admin button found:", adminBtn ? "Yes" : "No");
                if (adminBtn) {
                  adminBtn.replaceWith(adminBtn.cloneNode(true));
                  const newAdminBtn = document.getElementById("admin-btn");
                  newAdminBtn.addEventListener('click', (event) => {
                    console.log("Admin button clicked");
                    anvil.call(vetSettingsForm, 'openAdmin');
                  });
                }

                console.log("Settings: Gestionnaires d'√©v√©nements attach√©s √† la nouvelle instance.");
              };
            }

            // Attacher les √©couteurs d√®s que le DOM est pr√™t
            window.__attachVetSettingsEvents();

            // Check if admin button is present in DOM after attachment
            console.log("Admin button present after attachment:", document.getElementById("admin-btn") ? "Yes" : "No");

            // Navigation
            document.querySelectorAll('.nav-tab').forEach(tab => {
              tab.addEventListener('click', (event) => {
                const tabText = tab.getAttribute('data-tab');
                document.querySelector('.nav-tab.active').classList.remove('active');
                tab.classList.add('active');

                if (tabText === 'Production') {
                  anvil.call(document.getElementById('vet-settings-form'), 'openProduction');
                } else if (tabText === 'Mod√®les/IA') {
                  anvil.call(document.getElementById('vet-settings-form'), 'openTemplates');
                } else if (tabText === 'Archives') {
                  anvil.call(document.getElementById('vet-settings-form'), 'openArchives');
                } else if (tabText === 'Param√®tres') {
                  // Rester sur la page actuelle
                }
              });
            });

            // Affichage de l'heure
            function updateTime() {
              const now = new Date();
              const hrs = now.getHours().toString().padStart(2, '0');
              const mins = now.getMinutes().toString().padStart(2, '0');
              document.querySelector('.time').textContent = `${hrs}h${mins}`;
            }
            updateTime();
            setInterval(updateTime, 60000);
          </script>

          <!-- Session handler: now using a valid DOM element from the form -->
          <script>
            if (!window.__session_handlers_initialized) {
              window.__session_handlers_initialized = true;

              window.setupSessionHandlers = function() {
                document.addEventListener('visibilitychange', function() {
                  if (document.visibilityState === 'visible') {
                    var formElem = document.getElementById('vet-settings-form');
                    if (formElem) {
                      anvil.call(formElem, 'refresh_session_relay');
                    }
                  }
                });

                window.addEventListener('online', function() {
                  var formElem = document.getElementById('vet-settings-form');
                  if (formElem) {
                    anvil.call(formElem, 'refresh_session_relay');
                  }
                });
              };
              window.setupSessionHandlers();
            }
          </script>
        </body>
      </html>
  type: HtmlTemplate
is_package: true
