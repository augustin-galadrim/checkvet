components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Réactif aux mobiles -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Interface de Gestion Audio</title>\n\n  <!-- Add RecordRTC for iOS compatibility (only used if you want iOS fallback) -->\n  <script src=\"https://www.webrtc-experiment.com/RecordRTC.js\"></script>\n\n  <!-- Add NoSleep.js for fallback wake lock on older browsers -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/nosleep/0.12.0/NoSleep.min.js\"></script>\n\n  <style>\n    /* =====================================================\n       Styles de base\n    ===================================================== */\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      overflow: hidden;\n    }\n    .container {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      width: 100%;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    /* =====================================================\n       Section fixe (onglets + actions)\n    ===================================================== */\n    .fixed-section {\n      background: white;\n      z-index: 10;\n    }\n    .nav-tabs {\n      display: flex;\n      width: 100%;\n      border-bottom: 1px solid #ddd;\n    }\n    .nav-tab {\n      flex: 1;\n      padding: 8px 16px;\n      cursor: pointer;\n      border: 1px solid #ccc;\n      border-bottom: none;\n      background: #f8f8f8;\n      font-size: 14px;\n      position: relative;\n      margin-right: -1px;\n      text-align: center;\n    }\n    .nav-tab.active {\n      background: #e5e5e5;\n      border-top: 1px solid #999;\n      border-left: 1px solid #999;\n      border-right: 1px solid #999;\n      border-bottom: 1px solid #e5e5e5;\n      margin-bottom: -1px;\n    }\n    .actions-row {\n      display: flex;\n      justify-content: flex-end;\n      align-items: center;\n      padding: 15px 20px;\n    }\n    .time {\n      color: #666;\n      font-size: 14px;\n    }\n    /* =====================================================\n       Contenu scrollable\n    ===================================================== */\n    .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n      padding-bottom: 80px;\n    }\n\n    /* =====================================================\n       Section AUDIO (lecture + enregistrement)\n    ===================================================== */\n    .audio-section {\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      margin-bottom: 20px;\n      position: relative;\n    }\n    #audioBar {\n      width: 100%;\n      height: 50px;\n      background-color: #f8f8f8;\n      border-radius: 5px;\n      display: flex;\n      align-items: center;\n      padding: 0 10px;\n      margin-bottom: 20px;\n      border: 1px solid #ddd;\n      position: relative;\n    }\n    /* Contrôles PC */\n    #audioPlaybackControl {\n      width: 30px;\n      height: 30px;\n      background-color: #4CAF50;\n      border: none;\n      border-radius: 50%;\n      color: white;\n      font-size: 16px;\n      cursor: pointer;\n      margin-right: 10px;\n    }\n    #audioProgress {\n      flex-grow: 1;\n      height: 10px;\n      background-color: #ddd;\n      border-radius: 5px;\n      overflow: hidden;\n      cursor: pointer;\n      margin-right: 10px;\n      touch-action: none;\n    }\n    #audioProgressBar {\n      width: 0;\n      height: 100%;\n      background-color: #4CAF50;\n      transition: width 0.1s linear;\n    }\n    #audioDuration {\n      font-size: 14px;\n    }\n    #clearRecordingButton {\n      background: none;\n      border: none;\n      font-size: 18px;\n      cursor: pointer;\n      color: #666;\n      margin-left: 10px;\n    }\n    #clearRecordingButton:hover {\n      color: #000;\n    }\n    #retryProcessBtn {\n      position: absolute;\n      top: -40px;\n      right: 10px;\n      padding: 8px 12px;\n      background-color: #4caf50;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      display: none;\n    }\n    .recording-controls {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 20px auto;\n    }\n    #circularProgress {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 0 auto;\n      border-radius: 50%;\n      overflow: hidden;\n    }\n    #progressRing {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background: conic-gradient(#ddd 0deg, #ddd 0deg);\n    }\n    #centerHole {\n      position: absolute;\n      top: 8px;\n      left: 8px;\n      width: 184px;\n      height: 184px;\n      background-color: #fff;\n      border-radius: 50%;\n      z-index: 1;\n    }\n    .control-button-group {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 30px;\n      z-index: 2;\n    }\n    .control-button {\n      width: 45px;\n      height: 45px;\n      border: 1px solid #666;\n      border-radius: 2px;\n      cursor: pointer;\n      background-color: white;\n      color: #666;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 24px;\n      transition: all 0.3s ease;\n      padding: 0;\n    }\n    .control-button svg {\n      pointer-events: none;\n    }\n    .control-button:hover {\n      background-color: #f5f5f5;\n      border-color: #333;\n      color: #333;\n    }\n    @keyframes recordingFlash {\n      0% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n      50% { background: conic-gradient(#ffffff 0deg, #ffffff 360deg); }\n      100% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n    }\n    .recording-flash {\n      animation: recordingFlash 1.5s infinite;\n    }\n    /* Affichage mobile de l'audio (seulement sur mobile) */\n    #mobileAudioDisplay {\n      display: none;\n      width: 100%;\n      text-align: center;\n      font-size: 16px;\n      font-weight: bold;\n      color: #333;\n    }\n\n    /* =====================================================\n       Section Paramètres\n    ===================================================== */\n    .parameters-section {\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      margin-bottom: 20px;\n    }\n    .parameter-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 15px;\n    }\n    .parameter-row label {\n      font-weight: bold;\n      margin-right: 10px;\n    }\n    .template-select-container .select-button {\n      min-width: 200px;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      font-size: 14px;\n    }\n    .dropdown {\n      min-width: 200px;\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n      position: relative;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .arrow { margin-left: 10px; color: #666; }\n    .dropdown-menu {\n      position: absolute;\n      top: 100%;\n      left: 0;\n      width: 100%;\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      display: none;\n      z-index: 1000;\n    }\n    .dropdown-menu.active { display: block; }\n    .dropdown-menu div {\n      padding: 8px;\n      cursor: pointer;\n    }\n    .dropdown-menu div:hover { background: #f5f5f5; }\n    /* =====================================================\n       Section Éditeur\n    ===================================================== */\n    .editor-section {\n      background: white;\n      border-radius: 8px;\n      overflow: hidden;\n    }\n    #toolbar {\n      padding: 10px;\n      background: #f8f8f8;\n      border-bottom: 1px solid #ddd;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 5px;\n      align-items: center;\n    }\n    .toolbar-button {\n      padding: 6px 12px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n    }\n    .toolbar-button:hover { background: #f5f5f5; }\n\n    /* Single highlight for the “Start TB Rec” button while recording: */\n    .tb-recording-flash {\n      background-color: #ffebe6 !important;\n      border-color: #ff6347 !important;\n      color: #ff6347 !important;\n    }\n\n    /* Highlight for “Validate” button while AI processes snippet: */\n    .tb-processing-flash {\n      background-color: #e6ffe6 !important;\n      border-color: #4CAF50 !important;\n      color: #4CAF50 !important;\n    }\n\n    .toolbar-button.recording {\n      background-color: #ffebe6;\n      border-color: #ff6347;\n      color: #ff6347;\n    }\n    .toolbar-button.validate {\n      background-color: #e6ffe6;\n      border-color: #4CAF50;\n      color: #4CAF50;\n    }\n    #editor {\n      min-height: 300px;\n      padding: 20px;\n      border: 1px solid #ddd;\n      overflow-y: auto;\n      font-size: 16px;\n      line-height: 1.5;\n    }\n    .scrollable-content::-webkit-scrollbar { width: 8px; }\n    .scrollable-content::-webkit-scrollbar-track { background: #f1f1f1; }\n    .scrollable-content::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 4px;\n    }\n    .scrollable-content::-webkit-scrollbar-thumb:hover { background: #555; }\n\n    /* =====================================================\n       Boutons du bas\n    ===================================================== */\n    .bottom-buttons {\n      position: fixed;\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 800px;\n      max-width: 100%;\n      background: white;\n      padding: 15px 20px;\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      border-top: 1px solid #ddd;\n      box-shadow: 0 -2px 4px rgba(0,0,0,0.1);\n      z-index: 10;\n    }\n    .bottom-button {\n      padding: 10px 30px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n      font-size: 14px;\n      transition: all 0.2s ease;\n    }\n    .bottom-button:hover {\n      background: #f5f5f5;\n      border-color: #999;\n    }\n\n    /* =====================================================\n       Modal de sélection de patient (pour sauvegarde)\n    ===================================================== */\n    .patient-select-container {\n      position: relative;\n      width: 300px;\n      font-family: system-ui, -apple-system, sans-serif;\n    }\n    .select-button#patientSelectBtn { display: none; }\n    .modal {\n      display: none;\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n      z-index: 1000;\n    }\n    .modal-content {\n      position: relative;\n      background-color: white;\n      margin: 15% auto;\n      padding: 20px;\n      width: 90%;\n      max-width: 400px;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    }\n    .modal-header { margin-bottom: 20px; }\n    .modal-title {\n      font-size: 18px;\n      font-weight: 600;\n      margin: 0 0 15px 0;\n    }\n    .search-container { position: relative; margin-bottom: 20px; }\n    .search-icon {\n      position: absolute;\n      left: 12px;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 16px;\n      height: 16px;\n      color: #666;\n    }\n    #patientSearchHolder {\n      /* Container reconstruit dynamiquement */\n    }\n    .search-input {\n      width: 100%;\n      padding: 8px 12px 8px 36px;\n      border: 1px solid #ddd;\n      border-radius: 6px;\n      font-size: 14px;\n      box-sizing: border-box;\n    }\n    .search-input:focus {\n      outline: none;\n      border-color: #2563eb;\n      box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);\n    }\n    .new-patient-btn {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      width: 100%;\n      padding: 8px 12px;\n      background: none;\n      border: none;\n      border-radius: 6px;\n      color: #16a34a;\n      cursor: pointer;\n      font-size: 14px;\n      text-align: left;\n    }\n    .new-patient-btn:hover { background-color: #f0fdf4; }\n    .divider {\n      height: 1px;\n      background-color: #ddd;\n      margin: 15px 0;\n    }\n    .patients-list { max-height: 200px; overflow-y: auto; }\n    .patient-item {\n      display: block;\n      width: 100%;\n      padding: 8px 12px;\n      background: none;\n      border: none;\n      border-radius: 6px;\n      text-align: left;\n      cursor: pointer;\n      font-size: 14px;\n      color: #333;\n    }\n    .patient-item:hover { background-color: #f3f4f6; }\n    .close-button {\n      position: absolute;\n      top: 15px;\n      right: 15px;\n      background: none;\n      border: none;\n      cursor: pointer;\n      padding: 5px;\n      color: #666;\n    }\n\n    /* =====================================================\n       Modal de sélection de modèle\n    ===================================================== */\n    .template-select-container .modal {\n      z-index: 1100;\n    }\n    #templateModal {\n      display: none;\n      position: fixed;\n      top: 0; left: 0;\n      width: 100%; height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n    }\n    #templateModal .modal-content {\n      margin: 15% auto;\n      padding: 20px;\n      width: 90%;\n      max-width: 400px;\n      border-radius: 8px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n      position: relative;\n    }\n    #templateModal .modal-header { margin-bottom: 20px; }\n    #templateModal .modal-title {\n      font-size: 18px;\n      font-weight: 600;\n      margin: 0 0 15px 0;\n    }\n    #templateModal .search-container { position: relative; margin-bottom: 20px; }\n    #templateModal .search-icon {\n      position: absolute;\n      left: 12px;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 16px;\n      height: 16px;\n      color: #666;\n    }\n    #templateModal .search-input {\n      width: 100%;\n      padding: 8px 12px 8px 36px;\n      border: 1px solid #ddd;\n      border-radius: 6px;\n      font-size: 14px;\n      box-sizing: border-box;\n    }\n    #templateModal .templates-list { max-height: 300px; overflow-y: auto; }\n    #templateModal .template-item {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n      padding: 8px 12px;\n      background: none;\n      border: none;\n      border-radius: 6px;\n      text-align: left;\n      cursor: pointer;\n      font-size: 14px;\n      color: #333;\n    }\n    #templateModal .template-item:hover { background: #f3f4f6; }\n    #templateModal .star-icon {\n      font-size: 16px;\n      line-height: 1;\n    }\n    #templateModal .close-button {\n      position: absolute;\n      top: 15px;\n      right: 15px;\n      background: none;\n      border: none;\n      cursor: pointer;\n      padding: 5px;\n      color: #666;\n    }\n\n    /* =====================================================\n       Bannières (messages temporaires)\n    ===================================================== */\n    #bannerContainer {\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      z-index: 2000;\n    }\n    /* Flashing banner to indicate ongoing toolbar recording. \n       We'll toggle .flash-state every second for a \"blink\" effect. */\n    .banner-flash {\n      background-color: #f44336;\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      transition: background-color 0.3s ease;\n    }\n    .banner-flash.flash-state {\n      background-color: #ff7961;\n    }\n\n    .banner {\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n    }\n    .banner-success {\n      background-color: #4caf50;\n    }\n    .banner-error {\n      background-color: #f44336;\n    }\n\n    /* =====================================================\n       Réponse adaptative (mobile)\n    ===================================================== */\n    @media (max-width: 800px) {\n      .container {\n        height: 100vh;\n      }\n      .bottom-buttons {\n        width: 100%;\n        left: 0;\n        transform: none;\n      }\n      .nav-tab {\n        font-size: 12px;\n        padding: 6px 8px;\n      }\n      .actions-row {\n        padding: 10px 15px;\n      }\n      #audioBar {\n        height: auto;\n        padding: 10px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n      #audioPlaybackControl,\n      #audioProgress,\n      #audioDuration,\n      #clearRecordingButton {\n        display: none;\n      }\n      #mobileAudioDisplay {\n        display: block;\n      }\n      .recording-controls {\n        width: 180px;\n        height: 180px;\n      }\n      #circularProgress {\n        width: 180px;\n        height: 180px;\n      }\n      #centerHole {\n        top: 7px;\n        left: 7px;\n        width: 166px;\n        height: 166px;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- Section fixe: Onglets + Actions -->\n    <div class=\"fixed-section\">\n      <div class=\"nav-tabs\">\n        <button class=\"nav-tab active\" data-click=\"production\">Production</button>\n        <button class=\"nav-tab\" data-click=\"templates\">Modèles/IA</button>\n        <button class=\"nav-tab\" data-click=\"archives\">Archives</button>\n        <button class=\"nav-tab\" data-click=\"settings\">Paramètres</button>\n      </div>\n      <div class=\"actions-row\">\n        <div class=\"time\">11:44</div>\n      </div>\n    </div>\n\n    <!-- Contenu scrollable -->\n    <div class=\"scrollable-content\">\n      <!-- Section Audio (Lecture + Enregistrement) -->\n      <div class=\"audio-section\">\n        <div id=\"audioBar\">\n          <button id=\"audioPlaybackControl\">▶</button>\n          <div id=\"audioProgress\">\n            <div id=\"audioProgressBar\"></div>\n          </div>\n          <span id=\"audioDuration\">0:00 / 0:00</span>\n          <button id=\"clearRecordingButton\" title=\"Réinitialiser l'enregistrement\">🗑</button>\n          <button id=\"retryProcessBtn\">Relancer l'IA sur mon audio</button>\n          <div id=\"mobileAudioDisplay\"></div>\n        </div>\n\n        <div class=\"recording-controls\">\n          <div id=\"circularProgress\">\n            <div id=\"progressRing\"></div>\n            <div id=\"centerHole\"></div>\n            <div class=\"control-button-group\">\n              <button id=\"playButton\" class=\"control-button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                  <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n                  <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n                  <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n                </svg>\n              </button>\n              <button id=\"stopButton\" class=\"control-button\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n                  <path d=\"M4 12l5 5L20 7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <audio id=\"audioPlayback\" style=\"display: none;\"></audio>\n      </div>\n\n      <!-- Section Paramètres -->\n      <div class=\"parameters-section\">\n        <div class=\"parameter-row\">\n          <label>Modèle</label>\n          <div class=\"template-select-container\">\n            <button class=\"select-button\" id=\"templateSelectBtn\">\n              <span>Sélectionnez un modèle</span>\n              <span>▼</span>\n            </button>\n          </div>\n        </div>\n        <div class=\"parameter-row\">\n          <label>Langue</label>\n          <div class=\"dropdown\" id=\"langueDropdown\">\n            <span>🇫🇷</span>\n            <span class=\"arrow\">▼</span>\n            <div class=\"dropdown-menu\">\n              <div data-value=\"🇫🇷\">🇫🇷</div>\n              <div data-value=\"🇬🇧\">🇬🇧</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Section Éditeur -->\n      <div class=\"editor-section\">\n        <div id=\"toolbar\">\n          <button onclick=\"formatDoc('bold')\" class=\"toolbar-button\"><b>B</b></button>\n          <button onclick=\"formatDoc('italic')\" class=\"toolbar-button\"><i>I</i></button>\n          <button onclick=\"formatDoc('underline')\" class=\"toolbar-button\"><u>U</u></button>\n          <button onclick=\"formatDoc('justifyleft')\" class=\"toolbar-button\">Gauche</button>\n          <button onclick=\"formatDoc('justifycenter')\" class=\"toolbar-button\">Centre</button>\n          <button onclick=\"formatDoc('justifyright')\" class=\"toolbar-button\">Droite</button>\n          <button onclick=\"insertImage()\" class=\"toolbar-button\">Image</button>\n\n          <!-- SINGLE Start TB Rec button with mic icon only -->\n          <button onclick=\"startToolbarRecording()\" class=\"toolbar-button recording\"\n                  title=\"Enregistrement barre d'outils\">🎤</button>\n\n          <!-- Validate button also finalizes any toolbar snippet if recording -->\n          <button onclick=\"validateAndSend()\" class=\"toolbar-button validate\" title=\"Valider et envoyer\">✓</button>\n\n          <span style=\"margin-left:auto;\"></span>\n          <button onclick=\"copyEditorContent()\" class=\"toolbar-button\">Copier</button>\n        </div>\n        <div id=\"editor\" contenteditable=\"true\"></div>\n      </div>\n\n      <!-- HIDDEN ANCHOR so we can call anvil.call() on a real child element -->\n      <div id=\"toolbarRecorderAnchor\" style=\"display:none;\"></div>\n    </div>\n\n    <!-- Boutons du bas -->\n    <div class=\"bottom-buttons\">\n      <button class=\"bottom-button\" data-click=\"statut\">Statut</button>\n      <button class=\"bottom-button\" data-click=\"enregistrer\">Archiver</button>\n      <button class=\"bottom-button\" data-click=\"partager\">Partager</button>\n    </div>\n  </div>\n\n  <!-- Modal de sélection de patient -->\n  <div class=\"patient-select-container\">\n    <button class=\"select-button\" id=\"patientSelectBtn\" style=\"display:none;\">\n      <span>Sélectionnez un patient</span>\n      <span>▼</span>\n    </button>\n    <div class=\"modal\" id=\"patientModal\">\n      <div class=\"modal-content\">\n        <button class=\"close-button\" onclick=\"closePatientModal()\">✕</button>\n        <div class=\"modal-header\">\n          <h3 class=\"modal-title\">Sélectionnez un patient</h3>\n          <div class=\"search-container\">\n            <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n              <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n            </svg>\n            <div id=\"patientSearchHolder\">\n              <input type=\"text\" class=\"search-input\" placeholder=\"Rechercher un patient...\" id=\"searchInput\" oninput=\"searchPatientsInModal(this.value)\">\n            </div>\n          </div>\n        </div>\n        <button class=\"new-patient-btn\" onclick=\"newPatientForSave()\">\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n            <path d=\"M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2\"></path>\n            <circle cx=\"9\" cy=\"7\" r=\"4\"></circle>\n            <line x1=\"19\" y1=\"8\" x2=\"19\" y2=\"14\"></line>\n            <line x1=\"16\" y1=\"11\" x2=\"22\" y2=\"11\"></line>\n          </svg>\n          Nouveau patient\n        </button>\n        <div class=\"divider\"></div>\n        <div class=\"patients-list\" id=\"patientsList\">\n          <!-- Liste des patients insérée dynamiquement -->\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Modal de sélection de modèle -->\n  <div class=\"template-select-container\">\n    <div class=\"modal\" id=\"templateModal\">\n      <div class=\"modal-content\">\n        <button class=\"close-button\" onclick=\"closeTemplateModal()\">✕</button>\n        <div class=\"modal-header\">\n          <h3 class=\"modal-title\">Sélectionnez un modèle</h3>\n          <div class=\"search-container\">\n            <svg class=\"search-icon\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n              <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n            </svg>\n            <input type=\"text\" class=\"search-input\" placeholder=\"Rechercher un modèle...\" id=\"templateSearchInput\">\n          </div>\n        </div>\n        <div class=\"templates-list\" id=\"templatesList\">\n          <!-- Liste des modèles insérée dynamiquement -->\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Bannières pour messages temporaires -->\n  <div id=\"bannerContainer\"></div>\n\n  <!-- Librairies externes pour PDF -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n\n  <!-- Script principal (JS) -->\n  <script>\n    // The entire JS remains the same as in the previous version,\n    // with the only differences:\n    // 1) We removed the line \"displayBanner(\"Enregistrement (barre d'outils) démarré.\", \"success\")\"\n    // 2) The toolbar start button has only the mic icon.\n\n    // --------------------------------------------------------------------------------------------\n    // Wake lock initialization (Screen Wake Lock API + NoSleep.js fallback)\n    // --------------------------------------------------------------------------------------------\n    window.wakeLockController = {\n      wakeLock: null,\n      noSleep: null,\n      \n      init: function() {\n        if (!this.noSleep) {\n          this.noSleep = new NoSleep();\n        }\n      },\n      requestWakeLock: function() {\n        this.init();\n        if ('wakeLock' in navigator) {\n          navigator.wakeLock.request('screen')\n            .then((lock) => {\n              console.log('Wake Lock activated with Screen Wake Lock API');\n              this.wakeLock = lock;\n              this.wakeLock.addEventListener('release', () => {\n                console.log('Wake Lock was released by the system');\n              });\n            })\n            .catch((err) => {\n              console.log('Failed to activate Screen Wake Lock API, fallback to NoSleep.js:', err);\n              this.noSleep.enable();\n            });\n        } else {\n          console.log('Screen Wake Lock API not supported, using NoSleep.js');\n          this.noSleep.enable();\n        }\n      },\n      releaseWakeLock: function() {\n        if (this.wakeLock) {\n          this.wakeLock.release()\n            .then(() => {\n              this.wakeLock = null;\n              console.log('Wake Lock released');\n            });\n        }\n        if (this.noSleep) {\n          this.noSleep.disable();\n        }\n      }\n    };\n\n    document.addEventListener('visibilitychange', function() {\n      if (document.visibilityState === 'visible' && window.wakeLockController) {\n        window.wakeLockController.requestWakeLock();\n      }\n    });\n\n    // --------------------------------------------------------------------------------------------\n    // Main recorder code\n    // --------------------------------------------------------------------------------------------\n    if (!window.__my_audio_manager_globals) {\n      window.__my_audio_manager_globals = true;\n\n      window.isIOS = function() {\n        return /iPhone|iPad|iPod/i.test(navigator.userAgent || navigator.vendor || (window.opera && opera.toString() === '[object Opera]'));\n      };\n\n      window.audioManagerData = {\n        mediaRecorder: null,\n        recordedChunks: [],\n        audioBlob: null,\n        stream: null,\n        isRecording: false,\n        isIOS: window.isIOS(),\n        recordRTC: null\n      };\n\n      window.transcriptionProgressData = {\n        currentProgress: 0,\n        intervalId: null\n      };\n\n      // ===== FLASHING BANNER FOR ONGOING TOOLBAR RECORDING =====\n      window.startToolbarRecordingBanner = function() {\n        const container = document.getElementById('bannerContainer');\n        if (!container) return;\n        // Avoid duplicates\n        let existing = document.getElementById('toolbarRecordingBanner');\n        if (existing) return;\n\n        let banner = document.createElement('div');\n        banner.id = 'toolbarRecordingBanner';\n        banner.classList.add('banner-flash');\n        banner.textContent = \"Toolbar recording ongoing...\";\n        container.appendChild(banner);\n\n        // Repeatedly toggle .flash-state for the blink\n        window.toolbarRecorder.bannerFlashInterval = setInterval(() => {\n          banner.classList.toggle('flash-state');\n        }, 1000);\n      };\n      window.stopToolbarRecordingBanner = function() {\n        let banner = document.getElementById('toolbarRecordingBanner');\n        if (banner && banner.parentNode) {\n          banner.parentNode.removeChild(banner);\n        }\n        if (window.toolbarRecorder && window.toolbarRecorder.bannerFlashInterval) {\n          clearInterval(window.toolbarRecorder.bannerFlashInterval);\n          window.toolbarRecorder.bannerFlashInterval = null;\n        }\n      };\n      // ==========================================================\n\n      window.blobToBase64 = function(blob) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            const resultStr = reader.result;\n            const base64 = resultStr.split(',')[1];\n            resolve(base64);\n          };\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        });\n      };\n\n      window.setRingPercentage = function(percentage) {\n        const ringElem = document.getElementById(\"progressRing\");\n        const clamped = Math.max(0, Math.min(100, percentage));\n        const angle = (clamped / 100) * 360;\n        if (ringElem) {\n          ringElem.style.background = `conic-gradient(#4caf50 ${angle}deg, #ddd ${angle}deg)`;\n        }\n      };\n\n      window.simulateTranscriptionProgress = function() {\n        const data = window.transcriptionProgressData;\n        data.currentProgress = 0;\n        window.setRingPercentage(0);\n        data.intervalId = setInterval(() => {\n          if (data.currentProgress < 90) {\n            data.currentProgress += 2;\n            window.setRingPercentage(data.currentProgress);\n          } else {\n            clearInterval(data.intervalId);\n          }\n        }, 300);\n      };\n\n      window.finishTranscriptionProgress = function() {\n        const data = window.transcriptionProgressData;\n        clearInterval(data.intervalId);\n        data.currentProgress = 100;\n        window.setRingPercentage(100);\n      };\n\n      window.startRecordingFlash = function() {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (ringElem) ringElem.classList.add(\"recording-flash\");\n      };\n      window.stopRecordingFlash = function() {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (ringElem) ringElem.classList.remove(\"recording-flash\");\n      };\n\n      window.processRecording = async function(blob) {\n        try {\n          window.simulateTranscriptionProgress();\n          const base64Audio = await window.blobToBase64(blob);\n          const stopBtn = document.getElementById(\"stopButton\");\n          anvil.call(stopBtn, \"process_recording\", base64Audio)\n            .then(result => {\n              console.log(\"Enregistrement traité (main). Réponse:\", result);\n              window.finishTranscriptionProgress();\n              window.audioManagerData.audioBlob = blob;\n              window.lastAudioBlob = blob;\n              document.getElementById(\"retryProcessBtn\").style.display = \"block\";\n              updateMobileAudioDisplay();\n            })\n            .catch(error => {\n              console.error(\"Erreur lors du traitement (main recorder):\", error);\n              alert(\"Une erreur s'est produite lors du traitement de l'enregistrement (main).\");\n              window.finishTranscriptionProgress();\n            });\n        } catch (error) {\n          console.error(\"Erreur conversion blob main:\", error);\n          alert(\"Erreur lors de la préparation audio (main).\");\n          window.finishTranscriptionProgress();\n        }\n      };\n\n      window.retryProcessing = function(event) {\n        if (window.lastAudioBlob) {\n          window.simulateTranscriptionProgress();\n          window.blobToBase64(window.lastAudioBlob)\n            .then(base64Audio => {\n              anvil.call(event.target, \"process_recording\", base64Audio)\n                .then(result => {\n                  console.log(\"Re-traitement (main). Réponse:\", result);\n                  window.finishTranscriptionProgress();\n                })\n                .catch(error => {\n                  console.error(\"Erreur nouveau traitement (main):\", error);\n                  alert(\"Erreur lors du nouveau traitement (main).\");\n                  window.finishTranscriptionProgress();\n                });\n            })\n            .catch(err => {\n              console.error(\"Erreur reconversion (main):\", err);\n              alert(\"Erreur reconversion (main).\");\n              window.finishTranscriptionProgress();\n            });\n        }\n      };\n\n      function updateMobileAudioDisplay() {\n        var display = document.getElementById(\"mobileAudioDisplay\");\n        if (!display) return;\n        if (window.audioManagerData.audioBlob) {\n          display.innerHTML = \"Audio 🎵 <button id='mobileClearButton' onclick='clearRecording()'>🗑</button>\";\n        } else {\n          display.innerHTML = \"\";\n        }\n      }\n\n      // iOS-specific start function\n      window.startIOSRecording = async function(data, button, evt) {\n        data.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        data.recordRTC = new RecordRTC(data.stream, {\n          disableLogs: true,\n          type: 'audio',\n          mimeType: 'audio/wav',\n          recorderType: RecordRTC.StereoAudioRecorder,\n          bufferSize: 16384,\n          sampleRate: 44100,\n          numberOfAudioChannels: 1,\n          timeSlice: 10000,\n          checkForInactiveTracks: true,\n          desiredSampRate: 44100\n        });\n        data.recordRTC.startRecording();\n        data.isRecording = true;\n        button.innerHTML = window.pauseIconHTML;\n        anvil.call(evt.target, \"start_recording\");\n        window.startRecordingFlash();\n      };\n\n      window.clearRecording = function() {\n        var data = window.audioManagerData;\n        data.audioBlob = null;\n        data.recordedChunks = [];\n\n        if (data.isIOS) {\n          if (data.recordRTC) {\n            try {\n              data.recordRTC.stopRecording(function() {\n                data.recordRTC.destroy();\n                if (data.stream) {\n                  data.stream.getTracks().forEach(track => track.stop());\n                }\n                setTimeout(() => {\n                  data.recordRTC = null;\n                  data.stream = null;\n                }, 300);\n              });\n            } catch (e) {\n              console.log(\"Error stopping RecordRTC (main):\", e);\n            }\n            data.recordRTC = null;\n          }\n        } else {\n          if (data.mediaRecorder && data.mediaRecorder.state !== \"inactive\") {\n            try {\n              data.mediaRecorder.stop();\n            } catch (e) {\n              console.log(\"Error stopping mediaRecorder (main):\", e);\n            }\n          }\n          data.mediaRecorder = null;\n        }\n\n        if (data.stream) {\n          data.stream.getTracks().forEach(track => track.stop());\n          data.stream = null;\n        }\n\n        data.isRecording = false;\n        var audioPlayback = document.getElementById(\"audioPlayback\");\n        if (audioPlayback) audioPlayback.src = \"\";\n        var audioProgressBar = document.getElementById(\"audioProgressBar\");\n        if (audioProgressBar) audioProgressBar.style.width = \"0%\";\n        var audioDuration = document.getElementById(\"audioDuration\");\n        if (audioDuration) audioDuration.textContent = \"0:00 / 0:00\";\n\n        window.stopRecordingFlash();\n        window.setRingPercentage(0);\n        var pb = document.getElementById(\"playButton\");\n        if (pb) pb.innerHTML = window.micIconHTML;\n        document.getElementById(\"retryProcessBtn\").style.display = \"none\";\n        window.lastAudioBlob = null;\n        updateMobileAudioDisplay();\n      };\n\n      window.micIconHTML = \n        `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n          <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n          <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n          <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n        </svg>`;\n      window.pauseIconHTML = \n        `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n          <rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/>\n          <path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n        </svg>`;\n\n      window.getDropdownSelectedValue = function(dropdownId) {\n        const dropdown = document.getElementById(dropdownId);\n        if (!dropdown) return \"\";\n        const spanElem = dropdown.querySelector(\"span:first-child\");\n        if (!spanElem) return \"\";\n        let text = spanElem.textContent.trim();\n        const starIndex = text.indexOf(\"★\");\n        if (starIndex !== -1) {\n          text = text.substring(0, starIndex).trim();\n        }\n        return text;\n      };\n\n      window.formatDoc = function(cmd) {\n        document.execCommand(cmd, false, null);\n      };\n\n      window.insertImage = function() {\n        var input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'image/*';\n        input.onchange = function(e) {\n          var file = e.target.files[0];\n          var reader = new FileReader();\n          reader.onload = function(event) {\n            var img = document.createElement('img');\n            img.src = event.target.result;\n            img.style.maxWidth = '100%';\n            img.dataset.referenceId = 'img_' + Date.now();\n            document.getElementById('editor').appendChild(img);\n          };\n          reader.readAsDataURL(file);\n        };\n        input.click();\n      };\n\n      window.displayBanner = function(message, type) {\n        const bannerContainer = document.getElementById('bannerContainer');\n        if (!bannerContainer) return;\n        const banner = document.createElement('div');\n        banner.className = 'banner ' + (type === 'success' ? 'banner-success' : 'banner-error');\n        banner.textContent = message;\n        bannerContainer.appendChild(banner);\n        setTimeout(() => {\n          banner.style.opacity = '0';\n          setTimeout(() => {\n            if (banner.parentNode) {\n              banner.parentNode.removeChild(banner);\n            }\n          }, 300);\n        }, 3000);\n      };\n\n      window.copyEditorContent = function() {\n        const editor = document.getElementById('editor');\n        if (!editor) return;\n        const range = document.createRange();\n        range.selectNodeContents(editor);\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);\n        try {\n          document.execCommand('copy');\n          displayBanner('Contenu copié !', 'success');\n        } catch (err) {\n          console.error('Erreur lors de la copie du contenu', err);\n        }\n        selection.removeAllRanges();\n      };\n\n      window.getEditorContent = function() {\n        return document.getElementById('editor').innerHTML;\n      };\n      window.setEditorContent = function(value) {\n        document.getElementById('editor').innerHTML = value;\n      };\n\n      // The main validation flow\n      window.validateAndSend = function() {\n        // The “validate” button also finalizes any ongoing toolbar recording\n        let validateBtn = document.querySelector('.toolbar-button.validate');\n        if (!validateBtn) return;\n\n        // Start a “processing” flash on the validate button\n        validateBtn.classList.add(\"tb-processing-flash\");\n\n        // If a toolbar recording is in progress, finalize it first\n        finalizeToolbarRecording().then(() => {\n          // Then call the normal validation server method\n          return anvil.call(document.getElementById('playButton'), \"validate_and_send\");\n        }).then(() => {\n          // Once done, remove the processing flash\n          validateBtn.classList.remove(\"tb-processing-flash\");\n        }).catch((err) => {\n          console.error(\"[Toolbar] Error finalizing or validating:\", err);\n          validateBtn.classList.remove(\"tb-processing-flash\");\n        });\n      };\n\n      // Our separate data structure for the toolbar recorder\n      window.toolbarRecorder = {\n        stream: null,\n        mediaRecorder: null,\n        isRecording: false,\n        recordedChunks: []\n      };\n\n      // Start the separate toolbar recorder\n      window.startToolbarRecording = function() {\n        console.log(\"[Toolbar] Starting separate toolbar recorder...\");\n        if (window.toolbarRecorder.isRecording) {\n          alert(\"Un enregistrement barre d'outils est déjà en cours.\");\n          return;\n        }\n        window.wakeLockController.requestWakeLock();\n        navigator.mediaDevices.getUserMedia({ audio: true })\n          .then(stream => {\n            window.toolbarRecorder.stream = stream;\n            window.toolbarRecorder.mediaRecorder = new MediaRecorder(stream);\n            window.toolbarRecorder.recordedChunks = [];\n\n            window.toolbarRecorder.mediaRecorder.ondataavailable = evt => {\n              if (evt.data.size > 0) {\n                window.toolbarRecorder.recordedChunks.push(evt.data);\n              }\n            };\n            // We'll handle onstop inside finalizeToolbarRecording\n            window.toolbarRecorder.mediaRecorder.start();\n            window.toolbarRecorder.isRecording = true;\n\n            // Add visual flash to the microphone icon button\n            let startBtn = document.querySelector('button[onclick=\"startToolbarRecording()\"]');\n            if (startBtn) {\n              startBtn.classList.add(\"tb-recording-flash\");\n            }\n\n            // Show the red flashing banner (without any green success banner)\n            window.startToolbarRecordingBanner();\n          })\n          .catch(err => {\n            console.error(\"[Toolbar] Erreur accès micro:\", err);\n            alert(\"Échec de l’accès au micro (barre d’outils).\");\n          });\n      };\n\n      // This function finalizes the snippet if in progress, returning a Promise\n      window.finalizeToolbarRecording = function() {\n        return new Promise((resolve, reject) => {\n          if (!window.toolbarRecorder || !window.toolbarRecorder.isRecording) {\n            // No snippet to finalize\n            resolve();\n            return;\n          }\n          console.log(\"[Toolbar] Stopping toolbar recorder...\");\n\n          // Remove the highlight on the mic icon button\n          let startBtn = document.querySelector('button[onclick=\"startToolbarRecording()\"]');\n          if (startBtn) {\n            startBtn.classList.remove(\"tb-recording-flash\");\n          }\n\n          // Stop the flashing banner\n          window.stopToolbarRecordingBanner();\n\n          window.toolbarRecorder.mediaRecorder.onstop = function() {\n            console.log(\"[Toolbar] MediaRecorder (toolbar) stopped. Finalizing blob...\");\n            let blob = new Blob(window.toolbarRecorder.recordedChunks, { type: 'audio/webm' });\n            window.processToolbarRecordingBlob(blob)\n              .then(() => {\n                resolve();\n              })\n              .catch(reject);\n          };\n          window.toolbarRecorder.mediaRecorder.stop();\n          window.toolbarRecorder.isRecording = false;\n        });\n      };\n\n      // Convert toolbar blob -> base64, then call process_toolbar_recording\n      window.processToolbarRecordingBlob = async function(blob) {\n        console.log(\"[Toolbar] Converting blob -> base64 ...\");\n        try {\n          let base64Audio = await window.blobToBase64(blob);\n          const anchor = document.getElementById(\"toolbarRecorderAnchor\");\n          let resp = await anvil.call(anchor, \"process_toolbar_recording\", base64Audio);\n          console.log(\"[Toolbar] Snippet processed. Response:\", resp);\n        } catch (err) {\n          console.error(\"[Toolbar] Erreur conversion blob:\", err);\n          alert(\"Erreur de conversion BLOB (barre d'outils).\");\n          throw err; // so finalizeToolbarRecording can catch it\n        }\n      };\n\n      // Attach the event listeners now\n      window.__attachAudioManagerEvents = function() {\n        const data = window.audioManagerData;\n        const playButton = document.getElementById(\"playButton\");\n        const stopButton = document.getElementById(\"stopButton\");\n        if (playButton) playButton.replaceWith(playButton.cloneNode(true));\n        if (stopButton) stopButton.replaceWith(stopButton.cloneNode(true));\n\n        const newPlayButton = document.getElementById(\"playButton\");\n        const newStopButton = document.getElementById(\"stopButton\");\n\n        if (newPlayButton) {\n          newPlayButton.addEventListener(\"click\", async (evt) => {\n            window.wakeLockController.requestWakeLock();\n\n            if (!data.isRecording) {\n              if (data.isIOS) {\n                try {\n                  data.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                  if (typeof RecordRTC === 'undefined') {\n                    const script = document.createElement('script');\n                    script.src = 'https://www.webrtc-experiment.com/RecordRTC.js';\n                    script.onload = function() {\n                      window.startIOSRecording(data, newPlayButton, evt);\n                    };\n                    document.head.appendChild(script);\n                  } else {\n                    window.startIOSRecording(data, newPlayButton, evt);\n                  }\n                } catch (err) {\n                  console.error(\"Erreur accès micro (main):\", err);\n                  anvil.call(evt.target, \"show_error\", \"Accès micro refusé ou indisponible.\");\n                }\n              } else {\n                if (data.mediaRecorder && data.mediaRecorder.state === \"inactive\") {\n                  data.mediaRecorder = null;\n                }\n                if (!data.mediaRecorder) {\n                  try {\n                    data.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                    data.mediaRecorder = new MediaRecorder(data.stream);\n                    data.recordedChunks = [];\n                    data.mediaRecorder.ondataavailable = evt => data.recordedChunks.push(evt.data);\n                    data.mediaRecorder.start();\n                    data.isRecording = true;\n                    newPlayButton.innerHTML = window.pauseIconHTML;\n                    anvil.call(evt.target, \"start_recording\");\n                    window.startRecordingFlash();\n                  } catch (err) {\n                    console.error(\"Erreur accès micro (main):\", err);\n                    anvil.call(evt.target, \"show_error\", \"Accès micro refusé ou indisponible (main).\");\n                  }\n                } else {\n                  if (data.mediaRecorder.state === \"paused\") {\n                    data.mediaRecorder.resume();\n                    data.isRecording = true;\n                    newPlayButton.innerHTML = window.pauseIconHTML;\n                    anvil.call(evt.target, \"start_recording\");\n                  }\n                }\n              }\n            } else {\n              // Pause\n              if (data.isIOS) {\n                if (data.recordRTC) {\n                  data.recordRTC.pauseRecording();\n                  data.isRecording = false;\n                  newPlayButton.innerHTML = window.micIconHTML;\n                  anvil.call(evt.target, \"pause_recording\");\n                }\n              } else {\n                if (data.mediaRecorder && data.mediaRecorder.state === \"recording\") {\n                  data.mediaRecorder.pause();\n                  data.isRecording = false;\n                  newPlayButton.innerHTML = window.micIconHTML;\n                  anvil.call(evt.target, \"pause_recording\");\n                }\n              }\n            }\n          });\n        }\n\n        if (newStopButton) {\n          newStopButton.addEventListener(\"click\", (evt) => {\n            if (data.isIOS) {\n              if (data.recordRTC) {\n                data.recordRTC.stopRecording(function() {\n                  const blob = data.recordRTC.getBlob();\n                  data.audioBlob = blob;\n                  const audioPlayback = document.getElementById(\"audioPlayback\");\n                  if (audioPlayback) {\n                    const audioURL = URL.createObjectURL(blob);\n                    audioPlayback.src = audioURL;\n                    audioPlayback.load();\n                  }\n                  window.processRecording(blob);\n                  anvil.call(evt.target, \"stop_recording\");\n                  window.stopRecordingFlash();\n\n                  data.recordRTC.destroy();\n                  if (data.stream) {\n                    data.stream.getTracks().forEach(track => track.stop());\n                  }\n                  setTimeout(() => {\n                    data.recordRTC = null;\n                    data.stream = null;\n                  }, 300);\n                });\n                data.isRecording = false;\n                newPlayButton.innerHTML = window.micIconHTML;\n              }\n            } else {\n              if (data.mediaRecorder && data.mediaRecorder.state !== \"inactive\") {\n                data.mediaRecorder.onstop = () => {\n                  data.audioBlob = new Blob(data.recordedChunks, { type: 'audio/webm' });\n                  const audioPlayback = document.getElementById(\"audioPlayback\");\n                  if (audioPlayback) {\n                    const audioURL = URL.createObjectURL(data.audioBlob);\n                    audioPlayback.src = audioURL;\n                    audioPlayback.load();\n                  }\n                  window.processRecording(data.audioBlob);\n                  anvil.call(evt.target, \"stop_recording\");\n                  window.stopRecordingFlash();\n                };\n                data.mediaRecorder.stop();\n                data.isRecording = false;\n                newPlayButton.innerHTML = window.micIconHTML;\n              }\n            }\n          });\n        }\n\n        const audioPlaybackControl = document.getElementById(\"audioPlaybackControl\");\n        if (audioPlaybackControl) {\n          audioPlaybackControl.replaceWith(audioPlaybackControl.cloneNode(true));\n          const newPlaybackControl = document.getElementById(\"audioPlaybackControl\");\n          newPlaybackControl.addEventListener(\"click\", window.toggleAudioPlayback);\n        }\n\n        const audioProgress = document.getElementById(\"audioProgress\");\n        if (audioProgress) {\n          audioProgress.replaceWith(audioProgress.cloneNode(true));\n          const newAudioProgress = document.getElementById(\"audioProgress\");\n          newAudioProgress.addEventListener(\"click\", window.seekAudio);\n          newAudioProgress.addEventListener(\"touchend\", window.seekAudio);\n        }\n\n        const audioPlayback = document.getElementById(\"audioPlayback\");\n        if (audioPlayback) {\n          audioPlayback.removeEventListener(\"timeupdate\", window.updateAudioProgress);\n          audioPlayback.addEventListener(\"timeupdate\", window.updateAudioProgress);\n          audioPlayback.addEventListener(\"loadedmetadata\", function() {\n            const audioDuration = document.getElementById(\"audioDuration\");\n            if (audioDuration) {\n              audioDuration.textContent = `0:00 / ${window.formatTime(audioPlayback.duration)}`;\n            }\n          });\n        }\n\n        const clearRecordingButton = document.getElementById(\"clearRecordingButton\");\n        if (clearRecordingButton) {\n          clearRecordingButton.replaceWith(clearRecordingButton.cloneNode(true));\n          const newClearBtn = document.getElementById(\"clearRecordingButton\");\n          newClearBtn.addEventListener(\"click\", () => {\n            clearRecording();\n          });\n        }\n\n        const retryProcessBtn = document.getElementById(\"retryProcessBtn\");\n        if (retryProcessBtn) {\n          retryProcessBtn.removeEventListener('click', retryProcessBtn.__listener);\n          retryProcessBtn.__listener = function(e) {\n            window.retryProcessing(e);\n          };\n          retryProcessBtn.addEventListener('click', retryProcessBtn.__listener);\n        }\n\n        const allDropdowns = document.querySelectorAll('.dropdown');\n        allDropdowns.forEach(dd => {\n          dd.removeEventListener('click', dd.__listener);\n          const newListener = function(e) {\n            const menu = dd.querySelector('.dropdown-menu');\n            if (!menu) return;\n            if (e.target.closest('.dropdown-menu')) return;\n            menu.classList.toggle('active');\n          };\n          dd.__listener = newListener;\n          dd.addEventListener('click', newListener);\n\n          const menu = dd.querySelector('.dropdown-menu');\n          const dropdownItems = dd.querySelectorAll('.dropdown-menu div');\n          dropdownItems.forEach(item => {\n            item.removeEventListener('click', item.__clickListener);\n            const newItemListener = function(ev) {\n              ev.stopPropagation();\n              const selectedValue = ev.target.getAttribute('data-value');\n              if (selectedValue) {\n                const displaySpan = dd.querySelector('span:first-child');\n                if (displaySpan) {\n                  displaySpan.textContent = selectedValue;\n                }\n                if (menu) menu.classList.remove('active');\n              }\n            };\n            item.__clickListener = newItemListener;\n            item.addEventListener('click', newItemListener);\n          });\n        });\n\n        const navTabs = document.querySelectorAll('.nav-tab');\n        navTabs.forEach(tab => {\n          tab.removeEventListener('click', tab.__navListener);\n          let newNavListener = function(e) {\n            const action = e.target.dataset.click;\n            if (action === 'production') {\n              anvil.call(e.target, 'open_production_form');\n            } else if (action === 'templates') {\n              anvil.call(e.target, 'open_templates_form');\n            } else if (action === 'archives') {\n              anvil.call(e.target, 'open_archives_form');\n            } else if (action === 'settings') {\n              anvil.call(e.target, 'open_settings_form');\n            }\n          };\n          tab.__navListener = newNavListener;\n          tab.addEventListener('click', newNavListener);\n        });\n\n        const bottomButtons = document.querySelectorAll('.bottom-button');\n        bottomButtons.forEach(btn => {\n          btn.removeEventListener('click', btn.__listener);\n          const newListener = function(e) {\n            const action = e.currentTarget.dataset.click;\n            if (action === 'statut') {\n              anvil.call(e.currentTarget, 'on_statut_clicked').then(function(chosenStatus){\n                if (chosenStatus) {\n                  e.currentTarget.textContent = chosenStatus;\n                }\n              });\n            } else if (action === 'enregistrer') {\n              window.saveContent(e);\n            } else if (action === 'partager') {\n              console.log(\"Partager déclenché !\");\n              window.displayBanner(\"Fonctionnalité en cours de développement par l'équipe Checkvet\", \"success\");\n            }\n          };\n          btn.__listener = newListener;\n          btn.addEventListener('click', newListener);\n        });\n\n        const templateSelectBtn = document.getElementById(\"templateSelectBtn\");\n        if (templateSelectBtn) {\n          templateSelectBtn.replaceWith(templateSelectBtn.cloneNode(true));\n          const newTemplateSelectBtn = document.getElementById(\"templateSelectBtn\");\n          newTemplateSelectBtn.addEventListener(\"click\", openTemplateModal);\n        }\n\n        const templateSearchInput = document.getElementById(\"templateSearchInput\");\n        if (templateSearchInput) {\n          templateSearchInput.replaceWith(templateSearchInput.cloneNode(true));\n          const newTemplateSearchInput = document.getElementById(\"templateSearchInput\");\n          newTemplateSearchInput.addEventListener('input', function(e) {\n            const searchTerm = e.target.value;\n            searchTemplatesInModal(searchTerm);\n          });\n        }\n\n        // Request an initial wake lock upon load\n        window.wakeLockController.requestWakeLock();\n        console.log(\"AudioManager: Écouteurs d'événements (main) attachés. iOS detection:\", data.isIOS);\n      };\n\n      // Provide these for main audio controls\n      window.toggleAudioPlayback = function() {\n        const audioPlayback = document.getElementById(\"audioPlayback\");\n        if (!audioPlayback) return;\n        if (audioPlayback.paused) {\n          audioPlayback.play();\n          document.getElementById(\"audioPlaybackControl\").textContent = \"⏸\";\n        } else {\n          audioPlayback.pause();\n          document.getElementById(\"audioPlaybackControl\").textContent = \"▶\";\n        }\n      };\n      window.updateAudioProgress = function() {\n        const audio = document.getElementById(\"audioPlayback\");\n        const progressBar = document.getElementById(\"audioProgressBar\");\n        const audioDuration = document.getElementById(\"audioDuration\");\n        if (!audio || !progressBar || !audioDuration) return;\n        const currentTime = audio.currentTime;\n        const duration = audio.duration;\n        if (duration > 0) {\n          const percent = (currentTime / duration) * 100;\n          progressBar.style.width = percent + \"%\";\n          audioDuration.textContent = formatTime(currentTime) + \" / \" + formatTime(duration);\n        }\n      };\n      window.seekAudio = function(e) {\n        const audio = document.getElementById(\"audioPlayback\");\n        const progress = document.getElementById(\"audioProgress\");\n        if (!audio || !progress) return;\n        const rect = progress.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const width = rect.width;\n        const seekTime = (x / width) * audio.duration;\n        audio.currentTime = seekTime;\n      };\n      window.formatTime = function(time) {\n        if (isNaN(time)) return \"0:00\";\n        const minutes = Math.floor(time / 60);\n        const seconds = Math.floor(time % 60);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      };\n\n      // Save content to a patient (unchanged from your original code)\n      window.saveContent = function(event) {\n        window._saveContentData = {\n          content: document.getElementById('editor').innerHTML,\n          images: Array.from(document.querySelectorAll('#editor img')).map(img => ({\n            media: img.src,\n            reference_id: img.dataset.referenceId || ('img_' + Date.now()),\n            position: img.offsetTop.toString()\n          }))\n        };\n        openPatientModalForSave();\n      };\n      function openPatientModalForSave() {\n        var modal = document.getElementById('patientModal');\n        modal.style.display = 'block';\n        window.rebuildPatientSearchInput();\n        searchPatientsInModal('');\n      }\n      function closePatientModal() {\n        var modal = document.getElementById('patientModal');\n        modal.style.display = 'none';\n      }\n      function searchPatientsInModal(searchTerm) {\n        var modal = document.getElementById('patientModal');\n        anvil.call(modal, 'search_patients_relay', searchTerm)\n          .then(function(patients) {\n            renderPatients(patients);\n          })\n          .catch(function(error){\n            console.error(\"Erreur de recherche de patients:\", error);\n            renderPatients([]);\n          });\n      }\n      function renderPatients(patients) {\n        const patientsList = document.getElementById('patientsList');\n        if (!patientsList) return;\n        patientsList.innerHTML = patients.map(patient => \n          `<button class=\"patient-item\" onclick=\"selectPatientForSave('${patient.unique_id}', '${patient.name}')\">\n            ${patient.name}\n          </button>`\n        ).join('');\n      }\n      function selectPatientForSave(id, name) {\n        window.selectedPatient = { unique_id: id, name: name };\n        closePatientModal();\n        continueSave();\n      }\n      function newPatientForSave() {\n        var modal = document.getElementById('patientModal');\n        anvil.call(modal, 'get_new_patient_details')\n          .then(function(newDetails){\n            if(newDetails) {\n              window.selectedPatient = { unique_id: null, name: newDetails.name, details: newDetails };\n              closePatientModal();\n              continueSave();\n            }\n          })\n          .catch(function(error){\n            console.error(\"Erreur obtention newPatientForSave:\", error);\n          });\n      }\n      function continueSave() {\n        var contentJSON = JSON.stringify({ content: window._saveContentData.content });\n        var modal = document.getElementById('patientModal');\n        anvil.call(modal, 'save_report', contentJSON, window._saveContentData.images, window.selectedPatient)\n          .then(function(result){\n            if(result) {\n              displayBanner(\"Rapport enregistré avec succès\", \"success\");\n            } else {\n              alert(\"Échec de l'enregistrement du rapport\");\n            }\n          })\n          .catch(function(error){\n            console.error(\"Erreur enregistrement du rapport:\", error);\n            alert(\"Erreur: \" + error.message);\n          });\n      }\n      window.rebuildPatientSearchInput = function() {\n        var searchHolder = document.getElementById(\"patientSearchHolder\");\n        if (searchHolder) {\n          var newInput = document.createElement(\"input\");\n          newInput.type = \"text\";\n          newInput.className = \"search-input\";\n          newInput.id = \"searchInput\";\n          newInput.placeholder = \"Rechercher un patient...\";\n          newInput.setAttribute(\"oninput\", \"searchPatientsInModal(this.value)\");\n          searchHolder.innerHTML = \"\";\n          searchHolder.appendChild(newInput);\n        }\n      };\n\n      // Template modal handling\n      window.populateTemplateModal = function(templates) {\n        templates = templates.filter(t => t.priority === 1 || t.priority === 2);\n        templates.sort((a, b) => {\n          if (a.priority === 2 && b.priority !== 2) return -1;\n          if (b.priority === 2 && a.priority !== 2) return 1;\n          return 0;\n        });\n        window.templatesData = templates;\n        let defaultTemplate = templates.find(t => t.priority === 2);\n        if (!defaultTemplate) { defaultTemplate = templates[0]; }\n        if (defaultTemplate) {\n          let starColor = defaultTemplate.priority === 2 ? \"green\" : \"yellow\";\n          document.getElementById('templateSelectBtn').firstElementChild.innerHTML =\n            defaultTemplate.template_name + ' <span class=\"star-icon\" style=\"color:' + starColor + '\">★</span>';\n          window.selectedTemplate = defaultTemplate;\n        }\n        renderTemplates(templates);\n      };\n      function openTemplateModal() {\n        document.getElementById('templateModal').style.display = 'block';\n        document.getElementById('templateSearchInput').value = '';\n        renderTemplates(window.templatesData || []);\n      }\n      function closeTemplateModal() {\n        document.getElementById('templateModal').style.display = 'none';\n      }\n      function renderTemplates(templatesToRender) {\n        const templatesList = document.getElementById('templatesList');\n        if (!templatesList) return;\n        templatesList.innerHTML = templatesToRender.map(template => {\n          let starColor = \"gray\";\n          if (template.priority === 2) starColor = \"green\";\n          else if (template.priority === 1) starColor = \"yellow\";\n          return `\n          <button class=\"template-item\" onclick=\"selectTemplate(${template.id}, '${template.template_name}', '${starColor}')\">\n            <span>${template.template_name}</span>\n            <span class=\"star-icon\" style=\"color: ${starColor}\">★</span>\n          </button>\n          `;\n        }).join('');\n      }\n      function selectTemplate(id, name, starColor) {\n        document.getElementById('templateSelectBtn').firstElementChild.innerHTML =\n          name + ' <span class=\"star-icon\" style=\"color:' + starColor + '\">★</span>';\n        window.selectedTemplate = { id, template_name: name, starColor };\n        closeTemplateModal();\n      }\n      function searchTemplatesInModal(searchTerm) {\n        var modal = document.getElementById('templateModal');\n        anvil.call(modal, 'search_template_relay', searchTerm)\n          .then(function(templates) {\n            renderTemplates(templates);\n          })\n          .catch(function(error){\n            console.error(\"Erreur recherche de modèles:\", error);\n            renderTemplates([]);\n          });\n      }\n\n      // Attach the events on load\n      window.__attachAudioManagerEvents();\n    }\n  </script>\n</body>\n</html>\n"
  type: HtmlTemplate
is_package: true
