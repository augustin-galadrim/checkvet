components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <!-- Viewport responsive -->\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Gestionnaire audio – Édition Secrétariat</title>\n  <style>\n    /* =====================================================\n       Styles de base\n    ===================================================== */\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      overflow: hidden;\n    }\n    .container {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      width: 100%;\n      max-width: 800px;\n      margin: 0 auto;\n      background: white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    /* =====================================================\n       Barre Retour en haut\n    ===================================================== */\n    .retour-bar {\n      background: #e5e5e5;\n      padding: 15px 20px;\n      cursor: pointer;\n      font-size: 16px;\n      text-align: center;\n      border-bottom: 1px solid #ddd;\n      user-select: none;\n    }\n    /* =====================================================\n       Contenu défilable\n    ===================================================== */\n    .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n      padding-bottom: 80px; /* éviter le chevauchement avec les boutons du bas */\n    }\n    /* =====================================================\n       SECTION AUDIO\n    ===================================================== */\n    .audio-section {\n      background: white;\n      padding: 20px;\n      border-radius: 8px;\n      margin-bottom: 20px;\n      position: relative;\n    }\n    /* ------------------- \n       Nouveau Banner de relance IA \n    ---------------------- */\n    #audioBar {\n      width: 100%;\n      background-color: #4caf50;\n      color: white;\n      text-align: center;\n      padding: 15px;\n      font-size: 18px;\n      cursor: pointer;\n      margin-bottom: 20px;\n      border-radius: 5px;\n    }\n    /* =====================================================\n       SECTION enregistrement (reste inchangé)\n    ===================================================== */\n    .recording-controls {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 20px auto;\n    }\n    #circularProgress {\n      position: relative;\n      width: 200px;\n      height: 200px;\n      margin: 0 auto;\n    }\n    #progressRing {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      border-radius: 50%;\n      background: conic-gradient(#ddd 0deg, #ddd 0deg);\n    }\n    #centerHole {\n      position: absolute;\n      top: 8px;\n      left: 8px;\n      width: 184px;\n      height: 184px;\n      background: white;\n      border-radius: 50%;\n      z-index: 1;\n    }\n    .control-button-group {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 30px;\n      z-index: 2;\n    }\n    .control-button {\n      width: 45px;\n      height: 45px;\n      border: 1px solid #666;\n      border-radius: 2px;\n      cursor: pointer;\n      background: white;\n      color: #666;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-size: 24px;\n      transition: all 0.3s ease;\n      padding: 0;\n    }\n    .control-button:hover {\n      background: #f5f5f5;\n      border-color: #333;\n      color: #333;\n    }\n    @keyframes recordingFlash {\n      0% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n      50% { background: conic-gradient(#ffffff 0deg, #ffffff 360deg); }\n      100% { background: conic-gradient(#ffe5e5 0deg, #ffe5e5 360deg); }\n    }\n    .recording-flash {\n      animation: recordingFlash 1.5s infinite;\n    }\n    /* =====================================================\n       SECTION ÉDITEUR\n    ===================================================== */\n    .editor-section {\n      background: white;\n      border-radius: 8px;\n      overflow: hidden;\n    }\n    #toolbar {\n      padding: 10px;\n      background: #f8f8f8;\n      border-bottom: 1px solid #ddd;\n      display: flex;\n      flex-wrap: wrap;\n      gap: 5px;\n      align-items: center;\n    }\n    .toolbar-button {\n      padding: 6px 12px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n    }\n    .toolbar-button:hover { background: #f5f5f5; }\n    #editor {\n      min-height: 300px;\n      padding: 20px;\n      border: 1px solid #ddd;\n      overflow-y: auto;\n      font-size: 16px;\n      line-height: 1.5;\n    }\n    /* =====================================================\n       BOUTONS DU BAS\n    ===================================================== */\n    .bottom-buttons {\n      position: fixed;\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 800px;\n      max-width: 100%;\n      background: white;\n      padding: 15px 20px;\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      border-top: 1px solid #ddd;\n      box-shadow: 0 -2px 4px rgba(0,0,0,0.1);\n      z-index: 10;\n    }\n    .bottom-button {\n      padding: 10px 30px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: white;\n      cursor: pointer;\n      font-size: 14px;\n      transition: all 0.2s ease;\n    }\n    .bottom-button:hover {\n      background: #f5f5f5;\n      border-color: #999;\n    }\n\n    /* Bannières de notification */\n    #bannerContainer {\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      z-index: 2000;\n    }\n    .banner {\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      transition: opacity 0.3s ease;\n    }\n    .banner-success {\n      background-color: #4caf50;\n    }\n    .banner-error {\n      background-color: #f44336;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- Barre \"Retour\" en haut -->\n    <div class=\"retour-bar\" id=\"retourBar\">← Retour</div>\n\n    <!-- Contenu défilable -->\n    <div class=\"scrollable-content\">\n      <!-- SECTION AUDIO -->\n      <div class=\"audio-section\">\n        <!-- Remplacement du playback bar par un banner vert cliquable -->\n        <div id=\"audioBar\">Relancer l'IA à partir de mon audio</div>\n        <!-- La section des contrôles d'enregistrement reste inchangée -->\n        <div class=\"recording-controls\">\n          <div id=\"circularProgress\">\n            <div id=\"progressRing\"></div>\n            <div id=\"centerHole\"></div>\n            <div class=\"control-button-group\">\n              <button id=\"playButton\" class=\"control-button\">\n                <!-- Icône micro -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                  <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n                  <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n                  <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n                </svg>\n              </button>\n              <button id=\"stopButton\" class=\"control-button\">\n                <!-- Icône stop -->\n                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n                  <path d=\"M4 12l5 5L20 7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n        <!-- Élément audio caché (reste inchangé) -->\n        <audio id=\"audioPlayback\" style=\"display:none;\"></audio>\n      </div>\n\n      <!-- SECTION ÉDITEUR -->\n      <div class=\"editor-section\">\n        <div id=\"toolbar\">\n          <button onclick=\"formatDoc('bold')\" class=\"toolbar-button\"><b>B</b></button>\n          <button onclick=\"formatDoc('italic')\" class=\"toolbar-button\"><i>I</i></button>\n          <button onclick=\"formatDoc('underline')\" class=\"toolbar-button\"><u>U</u></button>\n          <button onclick=\"formatDoc('justifyleft')\" class=\"toolbar-button\">Gauche</button>\n          <button onclick=\"formatDoc('justifycenter')\" class=\"toolbar-button\">Centre</button>\n          <button onclick=\"formatDoc('justifyright')\" class=\"toolbar-button\">Droite</button>\n          <button onclick=\"insertImage()\" class=\"toolbar-button\">Image</button>\n          <span style=\"margin-left:auto;\"></span>\n          <button onclick=\"copyEditorContent()\" class=\"toolbar-button\">Copier</button>\n        </div>\n        <div id=\"editor\" contenteditable=\"true\"></div>\n      </div>\n    </div>\n\n    <!-- Boutons du bas -->\n    <div class=\"bottom-buttons\">\n      <button class=\"bottom-button\" id=\"statutButton\" data-click=\"statut\">Statut</button>\n      <button class=\"bottom-button\" id=\"archiverButton\" data-click=\"update\">Archiver</button>\n      <!-- \"Partager\" button => triggers a banner saying it's not ready -->\n      <button class=\"bottom-button\" id=\"partagerButton\" data-click=\"partager\">Partager</button>\n    </div>\n  </div>\n\n  <!-- Conteneur de bannière pour messages temporaires -->\n  <div id=\"bannerContainer\"></div>\n\n  <!-- Bibliothèques externes pour l'export PDF (non utilisées pour le bouton \"Partager\") -->\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js\"></script>\n\n  <script>\n    /********************\n     * Variables Globales et Fonctions Utilitaires\n     ********************/\n    if (!window.__my_audio_manager_globals) {\n      window.__my_audio_manager_globals = true;\n      window.audioManagerData = {\n        mediaRecorder: null,\n        recordedChunks: [],\n        audioBlob: null,\n        stream: null,\n        isRecording: false\n      };\n      window.transcriptionProgressData = {\n        currentProgress: 0,\n        intervalId: null\n      };\n\n      window.blobToBase64 = function(blob) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            const base64 = reader.result.split(',')[1];\n            resolve(base64);\n          };\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        });\n      };\n\n      window.setRingPercentage = function(percentage) {\n        const ringElem = document.getElementById(\"progressRing\");\n        const clamped = Math.max(0, Math.min(percentage, 100));\n        const angle = (clamped / 100) * 360;\n        if (ringElem) {\n          ringElem.style.background = `conic-gradient(#4caf50 ${angle}deg, #ddd ${angle}deg)`;\n        }\n      };\n\n      window.simulateTranscriptionProgress = function() {\n        const data = window.transcriptionProgressData;\n        data.currentProgress = 0;\n        window.setRingPercentage(0);\n        data.intervalId = setInterval(() => {\n          if (data.currentProgress < 90) {\n            data.currentProgress += 2;\n            window.setRingPercentage(data.currentProgress);\n          } else {\n            clearInterval(data.intervalId);\n          }\n        }, 300);\n      };\n\n      window.finishTranscriptionProgress = function() {\n        clearInterval(window.transcriptionProgressData.intervalId);\n        window.transcriptionProgressData.currentProgress = 100;\n        window.setRingPercentage(100);\n      };\n\n      window.startRecordingFlash = function() {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (ringElem) { ringElem.classList.add(\"recording-flash\"); }\n      };\n\n      window.stopRecordingFlash = function() {\n        const ringElem = document.getElementById(\"progressRing\");\n        if (ringElem) { ringElem.classList.remove(\"recording-flash\"); }\n      };\n\n      window.processRecording = async function(blob) {\n        try {\n          window.simulateTranscriptionProgress();\n          const base64Audio = await window.blobToBase64(blob);\n          const stopBtn = document.getElementById(\"stopButton\");\n          anvil.call(stopBtn, \"process_recording\", base64Audio)\n            .then(result => {\n              console.log(\"Enregistrement traité. Réponse du serveur :\", result);\n              window.finishTranscriptionProgress();\n              window.audioManagerData.audioBlob = blob;\n              window.lastAudioBlob = blob;\n            })\n            .catch(error => {\n              console.error(\"Erreur lors du traitement de l'enregistrement :\", error);\n              alert(\"Une erreur s'est produite lors du traitement de l'enregistrement.\");\n              window.finishTranscriptionProgress();\n            });\n        } catch (error) {\n          console.error(\"Erreur lors de la conversion du blob en base64 :\", error);\n          alert(\"Une erreur s'est produite lors de la préparation des données audio.\");\n          window.finishTranscriptionProgress();\n        }\n      };\n\n      window.retryProcessing = function(event) {\n        if (window.lastAudioBlob) {\n          window.simulateTranscriptionProgress();\n          window.blobToBase64(window.lastAudioBlob)\n            .then(base64Audio => {\n              anvil.call(event.target, \"process_recording\", base64Audio)\n                .then(result => {\n                  console.log(\"Enregistrement retraité. Réponse du serveur :\", result);\n                  window.finishTranscriptionProgress();\n                })\n                .catch(error => {\n                  console.error(\"Erreur lors du retraitement de l'enregistrement :\", error);\n                  alert(\"Une erreur s'est produite lors du retraitement de l'enregistrement.\");\n                  window.finishTranscriptionProgress();\n                });\n            })\n            .catch(err => {\n              console.error(\"Erreur lors de la conversion du blob en base64 :\", err);\n              alert(\"Une erreur s'est produite lors de la préparation des données audio.\");\n              window.finishTranscriptionProgress();\n            });\n        }\n      };\n\n      window.formatTime = function(seconds) {\n        const minutes = Math.floor(seconds / 60);\n        const secs = Math.floor(seconds % 60).toString().padStart(2, '0');\n        return `${minutes}:${secs}`;\n      };\n\n      window.updateAudioProgress = function() {\n        const audioPlayback = document.getElementById(\"audioPlayback\");\n        const audioProgressBar = document.getElementById(\"audioProgressBar\");\n        const audioDuration = document.getElementById(\"audioDuration\");\n        if (audioPlayback && audioPlayback.duration) {\n          const progress = (audioPlayback.currentTime / audioPlayback.duration) * 100;\n          if (audioProgressBar) {\n            audioProgressBar.style.width = progress + \"%\";\n          }\n          if (audioDuration) {\n            audioDuration.textContent =\n              window.formatTime(audioPlayback.currentTime) + \" / \" +\n              window.formatTime(audioPlayback.duration);\n          }\n        }\n      };\n\n      window.toggleAudioPlayback = function() {\n        const audioPlayback = document.getElementById(\"audioPlayback\");\n        const audioPlaybackControl = document.getElementById(\"audioPlaybackControl\");\n        if (audioPlayback && audioPlaybackControl) {\n          if (audioPlayback.paused) {\n            audioPlayback.play();\n            audioPlaybackControl.textContent = \"⏸\";\n          } else {\n            audioPlayback.pause();\n            audioPlaybackControl.textContent = \"▶\";\n          }\n        }\n      };\n\n      window.seekAudio = function(e) {\n        e.preventDefault();\n        const audioPlayback = document.getElementById(\"audioPlayback\");\n        const audioProgress = document.getElementById(\"audioProgress\");\n        if (audioPlayback && audioPlayback.duration) {\n          const rect = audioProgress.getBoundingClientRect();\n          const offsetX = e.offsetX;\n          const seekPosition = (offsetX / rect.width) * audioPlayback.duration;\n          audioPlayback.currentTime = seekPosition;\n        }\n      };\n\n      window.micIconHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n          <path d=\"M8 11.5a2.5 2.5 0 0 0 2.5-2.5V4a2.5 2.5 0 1 0-5 0v5A2.5 2.5 0 0 0 8 11.5z\"/>\n          <path d=\"M10 5a.5.5 0 0 1 1 0v4a3 3 0 1 1-6 0V5a.5.5 0 0 1 1 0v4a2 2 0 0 0 4 0V5z\"/>\n          <path d=\"M8 13a4.5 4.5 0 0 0 4.5-4.5.5.5 0 0 1 1 0 5.5 5.5 0 0 1-11 0 .5.5 0 0 1 1 0A4.5 4.5 0 0 0 8 13z\"/>\n        </svg>\n      `;\n      window.pauseIconHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"16\" height=\"16\">\n          <rect x=\"9\" y=\"2\" width=\"6\" height=\"12\" rx=\"3\" fill=\"currentColor\"/>\n          <path d=\"M6 12a6 6 0 0 0 12 0M12 18v4M8 22h8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n        </svg>\n      `;\n\n      window.formatDoc = function(cmd) {\n        document.execCommand(cmd, false, null);\n      };\n\n      window.insertImage = function() {\n        var input = document.createElement('input');\n        input.type = 'file';\n        input.accept = 'image/*';\n        input.onchange = function(e) {\n          var file = e.target.files[0];\n          var reader = new FileReader();\n          reader.onload = function(event) {\n            var img = document.createElement('img');\n            img.src = event.target.result;\n            img.style.maxWidth = '100%';\n            img.dataset.referenceId = 'img_' + Date.now();\n            document.getElementById('editor').appendChild(img);\n          };\n          reader.readAsDataURL(file);\n        };\n        input.click();\n      };\n\n      window.displayBanner = function(message, type) {\n        const bannerContainer = document.getElementById('bannerContainer');\n        if (!bannerContainer) return;\n        const banner = document.createElement('div');\n        banner.className = 'banner ' + (type === 'success' ? 'banner-success' : 'banner-error');\n        banner.textContent = message;\n        bannerContainer.appendChild(banner);\n\n        // Auto-hide after 3s\n        setTimeout(() => {\n          banner.style.opacity = '0';\n          setTimeout(() => {\n            if (banner.parentNode) {\n              banner.parentNode.removeChild(banner);\n            }\n          }, 300);\n        }, 3000);\n      };\n\n      // We keep exportToPDF() for reference, but do NOT call it on \"Partager\".\n      window.exportToPDF = function(event) {\n        let content = document.getElementById('editor').innerHTML;\n        let images = [];\n        document.querySelectorAll('#editor img').forEach(img => {\n          images.push({\n            media: img.src,\n            reference_id: img.dataset.referenceId || ('img_' + Date.now()),\n            position: img.offsetTop.toString()\n          });\n        });\n        let placeholders = { bodyContent: content };\n        let fileName = prompt(\"Veuillez entrer un nom de fichier pour le PDF :\");\n        if (!fileName || fileName.trim() === \"\") {\n          alert(\"Exportation du PDF annulée.\");\n          return;\n        }\n        anvil.call(event, 'build_report_pdf_relay', placeholders, images)\n          .then(function(pdfBase64) {\n            let pdfUrl = \"data:application/pdf;base64,\" + pdfBase64;\n            window.open(pdfUrl, \"_blank\");\n          })\n          .catch(function(error){\n            console.error(\"ERREUR lors de la génération ou de l'ouverture du PDF via relais :\", error);\n            alert(\"Erreur : \" + error.message);\n          });\n      };\n\n      window.getEditorContent = function() {\n        return document.getElementById('editor').innerHTML;\n      };\n      window.setEditorContent = function(value) {\n        document.getElementById('editor').innerHTML = value;\n      };\n\n      window.copyEditorContent = function() {\n        const editor = document.getElementById('editor');\n        if (!editor) return;\n        const range = document.createRange();\n        range.selectNodeContents(editor);\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(range);\n        try {\n          document.execCommand('copy');\n          displayBanner('Contenu copié !', 'success');\n        } catch (err) {\n          console.error('Erreur lors de la copie du contenu', err);\n        }\n        selection.removeAllRanges();\n      };\n    }\n\n    /********************\n     * Attacher les Écouteurs d'Événements\n     ********************/\n    window.__attachAudioManagerEvents = function() {\n      const data = window.audioManagerData;\n\n      // Barre \"Retour\"\n      const retourBar = document.getElementById(\"retourBar\");\n      if (retourBar) {\n        retourBar.replaceWith(retourBar.cloneNode(true));\n        const newRetourBar = document.getElementById(\"retourBar\");\n        newRetourBar.addEventListener(\"click\", function(e) {\n          anvil.call(e.target, \"retour_clicked\");\n        });\n      }\n\n      // Banner vert (IA)\n      const audioBar = document.getElementById(\"audioBar\");\n      if (audioBar) {\n        audioBar.removeEventListener(\"click\", audioBar.__listener);\n        audioBar.__listener = function(e) {\n          anvil.call(e.target, \"relaunch_ai\");\n        };\n        audioBar.addEventListener(\"click\", audioBar.__listener);\n      }\n\n      // Contrôles d'enregistrement\n      const playButton = document.getElementById(\"playButton\");\n      const stopButton = document.getElementById(\"stopButton\");\n      if (playButton) playButton.replaceWith(playButton.cloneNode(true));\n      if (stopButton) stopButton.replaceWith(stopButton.cloneNode(true));\n      const newPlayButton = document.getElementById(\"playButton\");\n      const newStopButton = document.getElementById(\"stopButton\");\n\n      // Bouton Play/Pause\n      if (newPlayButton) {\n        newPlayButton.addEventListener(\"click\", async (evt) => {\n          if (!data.isRecording) {\n            if (data.mediaRecorder && data.mediaRecorder.state === \"inactive\") {\n              data.mediaRecorder = null;\n            }\n            if (!data.mediaRecorder) {\n              try {\n                data.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n                data.mediaRecorder = new MediaRecorder(data.stream);\n                data.recordedChunks = [];\n                data.mediaRecorder.ondataavailable = evt => data.recordedChunks.push(evt.data);\n                data.mediaRecorder.start();\n                data.isRecording = true;\n                newPlayButton.innerHTML = window.pauseIconHTML;\n                anvil.call(evt.target, \"start_recording\");\n                window.startRecordingFlash();\n              } catch (err) {\n                console.error(\"Erreur d'accès au microphone :\", err);\n                anvil.call(evt.target, \"show_error\", \"Accès au microphone refusé ou indisponible.\");\n              }\n            } else if (data.mediaRecorder.state === \"paused\") {\n              data.mediaRecorder.resume();\n              data.isRecording = true;\n              newPlayButton.innerHTML = window.pauseIconHTML;\n              anvil.call(evt.target, \"start_recording\");\n            }\n          } else {\n            if (data.mediaRecorder && data.mediaRecorder.state === \"recording\") {\n              data.mediaRecorder.pause();\n              data.isRecording = false;\n              newPlayButton.innerHTML = window.micIconHTML;\n              anvil.call(evt.target, \"pause_recording\");\n            }\n          }\n        });\n      }\n\n      // Bouton Stop\n      if (newStopButton) {\n        newStopButton.addEventListener(\"click\", (evt) => {\n          if (data.mediaRecorder && data.mediaRecorder.state !== \"inactive\") {\n            data.mediaRecorder.onstop = () => {\n              data.audioBlob = new Blob(data.recordedChunks, { type: 'audio/webm' });\n              const audioPlayback = document.getElementById(\"audioPlayback\");\n              if (audioPlayback) {\n                const audioURL = URL.createObjectURL(data.audioBlob);\n                audioPlayback.src = audioURL;\n                audioPlayback.load();\n              }\n              window.processRecording(data.audioBlob);\n              anvil.call(evt.target, \"stop_recording\");\n              window.stopRecordingFlash();\n            };\n            data.mediaRecorder.stop();\n            data.isRecording = false;\n            newPlayButton.innerHTML = window.micIconHTML;\n          }\n        });\n      }\n\n      // Autres contrôles audio\n      const audioPlaybackControl = document.getElementById(\"audioPlaybackControl\");\n      if (audioPlaybackControl) {\n        audioPlaybackControl.replaceWith(audioPlaybackControl.cloneNode(true));\n        const newPlaybackControl = document.getElementById(\"audioPlaybackControl\");\n        newPlaybackControl.addEventListener(\"click\", window.toggleAudioPlayback);\n      }\n      const audioProgress = document.getElementById(\"audioProgress\");\n      if (audioProgress) {\n        audioProgress.replaceWith(audioProgress.cloneNode(true));\n        const newAudioProgress = document.getElementById(\"audioProgress\");\n        newAudioProgress.addEventListener(\"click\", window.seekAudio);\n        newAudioProgress.addEventListener(\"touchend\", window.seekAudio);\n      }\n      const audioPlayback = document.getElementById(\"audioPlayback\");\n      if (audioPlayback) {\n        audioPlayback.removeEventListener(\"timeupdate\", window.updateAudioProgress);\n        audioPlayback.addEventListener(\"timeupdate\", window.updateAudioProgress);\n        audioPlayback.addEventListener(\"loadedmetadata\", function() {\n          const audioDuration = document.getElementById(\"audioDuration\");\n          if (audioDuration) {\n            audioDuration.textContent = `0:00 / ${window.formatTime(audioPlayback.duration)}`;\n          }\n        });\n      }\n      const clearRecordingButton = document.getElementById(\"clearRecordingButton\");\n      if (clearRecordingButton) {\n        clearRecordingButton.replaceWith(clearRecordingButton.cloneNode(true));\n        const newClearBtn = document.getElementById(\"clearRecordingButton\");\n        newClearBtn.addEventListener(\"click\", () => {\n          data.audioBlob = null;\n          data.recordedChunks = [];\n          if (data.mediaRecorder && data.mediaRecorder.state !== \"inactive\") {\n            data.mediaRecorder.stop();\n          }\n          data.mediaRecorder = null;\n          data.isRecording = false;\n          const audioPlayback = document.getElementById(\"audioPlayback\");\n          if (audioPlayback) { audioPlayback.src = \"\"; }\n          const audioProgressBar = document.getElementById(\"audioProgressBar\");\n          if (audioProgressBar) audioProgressBar.style.width = \"0%\";\n          const audioDuration = document.getElementById(\"audioDuration\");\n          if (audioDuration) audioDuration.textContent = \"0:00 / 0:00\";\n          window.stopRecordingFlash();\n          window.setRingPercentage(0);\n          const pb = document.getElementById(\"playButton\");\n          if (pb) pb.innerHTML = window.micIconHTML;\n        });\n      }\n\n      // Boutons du bas\n      const bottomButtons = document.querySelectorAll('.bottom-button');\n      bottomButtons.forEach(btn => {\n        btn.removeEventListener('click', btn.__listener);\n\n        const newListener = function(e) {\n          console.log(\"Clicked bottom button:\", e.currentTarget.id,\n                      \" data-click=\", e.currentTarget.dataset.click);\n\n          const action = e.currentTarget.dataset.click;\n          if (action === 'statut') {\n            anvil.call(e.currentTarget, 'on_statut_clicked').then(function(chosenStatut){\n              if (chosenStatut) {\n                e.currentTarget.textContent = chosenStatut;\n              }\n            });\n          } else if (action === 'update') {\n            // \"Archiver\" => envoi de l'éditeur\n            const contentJSON = JSON.stringify({ content: window.getEditorContent() });\n            const images = Array.from(document.querySelectorAll('#editor img')).map(img => ({\n              media: img.src,\n              reference_id: img.dataset.referenceId || ('img_' + Date.now()),\n              position: img.offsetTop.toString()\n            }));\n            anvil.call(e.currentTarget, \"update_report\", e.currentTarget.textContent, contentJSON, images);\n          } else if (action === 'partager') {\n            // Montrer un banner indiquant que la fonctionnalité n'est pas prête\n            console.log(\"Partager triggered!\");\n            window.displayBanner(\"fonctionnalité en cours de développement par les équipes Checkvet\", \"success\");\n          }\n        };\n\n        btn.__listener = newListener;\n        btn.addEventListener('click', newListener);\n      });\n\n      // (Si on avait un sélecteur de template, on le gère ici, pas besoin dans cette version)\n      console.log(\"AudioManagerEditSecretariat : Écouteurs d'événements attachés.\");\n    };\n\n    // Attache les écouteurs dès le chargement\n    window.__attachAudioManagerEvents();\n  </script>\n\n  <!-- Gérer la session (réseaux hors-ligne, etc.) -->\n  <script>\n    // Initialize only une fois\n    if (!window.__session_handlers_initialized) {\n      window.__session_handlers_initialized = true;\n\n      // Session handler setup\n      window.setupSessionHandlers = function() {\n        // Quand l'onglet revient en avant-plan\n        document.addEventListener('visibilitychange', function() {\n          if (document.visibilityState === 'visible') {\n            anvil.call(document.body, 'refresh_session_relay');\n          }\n        });\n        // Quand on revient online\n        window.addEventListener('online', function() {\n          anvil.call(document.body, 'refresh_session_relay');\n        });\n      };\n    }\n  </script>\n</body>\n</html>\n"
  type: HtmlTemplate
is_package: true
