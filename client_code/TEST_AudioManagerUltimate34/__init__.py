from ._anvil_designer import TEST_AudioManagerUltimate34Template
from anvil import *
import anvil.server
import anvil.tables as tables
import anvil.tables.query as q
from anvil.tables import app_tables
import json
import anvil.users
import base64
import anvil.media
import anvil.js
import time


def safe_value(item, key, default_value):
  """Retourne la valeur associ√©e √† 'key' dans 'item', ou 'default_value' si la cl√© est manquante ou None."""
  if item is None:
    return default_value
  val = item.get(key)
  return default_value if val is None else val


class TEST_AudioManagerUltimate34(TEST_AudioManagerUltimate34Template):
  def __init__(
    self,
    clicked_value=None,
    template_name=None,
    initial_content=None,
    prompt=None,
    **properties,
  ):
    print("[DEBUG] Initialisation du formulaire FR_AudioManager")
    print(
      f"[DEBUG] Param√®tres __init__: clicked_value={clicked_value}, template_name={template_name}, initial_content={initial_content}, prompt={prompt}"
    )
    self.init_components(**properties)

    # Stocker les param√®tres fournis par l'utilisateur
    self.clicked_value = clicked_value
    self.template_name = template_name
    self.initial_content = initial_content
    self.prompt = prompt

    # Stockage pour la transcription brute
    self.raw_transcription = None

    # √âtat de l'enregistrement
    self.recording_state = "idle"

    # Le statut s√©lectionn√© par l'utilisateur sera stock√© ici
    self.selected_statut = None

    self.audio_chunks = []

    def silent_error_handler(err):
      print(f"[DEBUG] Gestionnaire d'erreur silencieux: {err}")
      # Optionnel: Ajoutez du logging ici
      pass

    set_default_error_handling(silent_error_handler)

    # Lors de l'affichage du formulaire, ex√©cuter form_show
    self.add_event_handler("show", self.form_show)
    print("[DEBUG] __init__ termin√©.")

  def form_show(self, **event_args):
    print("[DEBUG] D√©marrage de form_show dans FR_AudioManager")
    # V√©rifier si l'utilisateur a fourni des infos suppl√©mentaires
    additional_info = anvil.server.call("pick_user_info", "additional_info")
    print(f"[DEBUG] additional_info depuis pick_user_info: {additional_info}")
    if not additional_info:
      print(
        "[DEBUG] Pas d'additional_info, ouverture du flux d'inscription en fran√ßais (RegistrationFlow)"
      )
      open_form("FR_RegistrationFlow")
      return

    mobile_installation = anvil.server.call("pick_user_info2", "mobile_installation")
    print(f"[DEBUG] mobile_installation depuis pick_user_info2: {mobile_installation}")
    if not mobile_installation:
      print(
        "[DEBUG] Pas d'installation mobile renseign√©e, ouverture du flux d'installation mobile en fran√ßais"
      )
      open_form("FR_MobileInstallationFlow")
      return

    # Charger les mod√®les en base et filtrer sur les favoris (priorit√© 1 ou 2)
    templates = anvil.server.call(
      "read_templates"
    )  # renvoie une liste de dictionnaires
    filtered_templates = [t for t in templates if t.get("priority") in (1, 2)]
    self.call_js("populateTemplateModal", filtered_templates)

    # Charger un contenu initial dans l'√©diteur, si fourni
    if self.initial_content:
      print("[DEBUG] Chargement du contenu initial dans l'√©diteur.")
      self.editor_content = self.initial_content
    else:
      if self.clicked_value is not None:
        print("[DEBUG] clicked_value fourni, chargement du contenu du rapport.")
        self.load_report_content()

    # Recr√©er le champ de recherche de patient (comme dans la modal d'archives).
    print("[DEBUG] Reconstruire le champ de recherche patient.")
    self.call_js("rebuildPatientSearchInput")

    print("[DEBUG] form_show termin√©.")

  def refresh_session_relay(self, **event_args):
    """Appel√© lorsque l'application redevient en ligne ou que l'onglet revient au premier plan, pour garder la session utilisateur active."""
    try:
      return anvil.server.call("check_and_refresh_session")
    except Exception as e:
      print(f"[DEBUG] Erreur dans refresh_session_relay: {str(e)}")
      return False

  def load_report_content(self):
    print(
      f"[DEBUG] Chargement du contenu du rapport pour clicked_value: {self.clicked_value}"
    )
    try:
      content, error = anvil.server.call("load_report_content", self.clicked_value)
      print(
        f"[DEBUG] R√©sultat de load_report_content: content={content}, error={error}"
      )
      if error:
        alert(error)
      elif content:
        self.editor_content = content
      else:
        alert("Erreur inattendue : aucun contenu renvoy√©.")
    except Exception as e:
      print(f"[ERROR] Exception dans load_report_content: {e}")

  # -------------------------
  # M√©thodes d'enregistrement
  # -------------------------
  def start_recording(self, **event_args):
    self.recording_state = "recording"
    print(
      "[DEBUG] start_recording() appel√©. √âtat d'enregistrement d√©fini sur 'recording'."
    )

  def pause_recording(self, **event_args):
    self.recording_state = "paused"
    print(
      "[DEBUG] pause_recording() appel√©. √âtat d'enregistrement d√©fini sur 'paused'."
    )

  def stop_recording(self, **event_args):
    self.recording_state = "stopped"
    print(
      "[DEBUG] stop_recording() appel√©. √âtat d'enregistrement d√©fini sur 'stopped'."
    )

  def show_error(self, error_message, **event_args):
    print(f"[DEBUG] show_error() appel√© avec le message: {error_message}")
    alert(error_message)

  # -------------------------
  # Nouvelle m√©thode pour traiter les fichiers audio upload√©s
  # -------------------------
  def process_uploaded_audio(self, audio_blob, **event_args):
    """
    Traite un fichier audio upload√© (particuli√®rement pour les Voice Memos iOS)
    """
    print("[DEBUG] process_uploaded_audio() appel√© avec un audio blob.")
    try:
      # Ex√©cuter le traitement de l'audio une fois le fichier re√ßu
      return self.process_recording(audio_blob)
    except Exception as e:
      print(f"[ERROR] Exception dans process_uploaded_audio: {e}")
      alert(f"Erreur lors du traitement du fichier audio: {str(e)}")
      return None

  # -------------------------
  # D√©tection de la langue
  # -------------------------
  def get_selected_language(self):
    """
    R√©cup√®re la langue actuellement s√©lectionn√©e en se basant sur l'√©moji du drapeau
    dans le dropdown de langue.
    Retourne: 'FR' ou 'EN'
    """
    try:
      language_emoji = self.call_js("getDropdownSelectedValue", "langueDropdown")
      print(f"[DEBUG] √âmoji de langue s√©lectionn√©: {language_emoji}")
      if language_emoji == "üá´üá∑":
        return "FR"
      elif language_emoji == "üá¨üáß":
        return "EN"
      else:
        # Par d√©faut, on retourne FR si on ne sait pas
        print(
          f"[DEBUG] √âmoji de langue inconnu: {language_emoji}, on retourne FR par d√©faut"
        )
        return "FR"
    except Exception as e:
      print(f"[ERROR] Erreur en r√©cup√©rant la langue s√©lectionn√©e: {e}")
      return "FR"





  def process_recording(self, audio_blob, **event_args):
      # Nombre maximum de tentatives en cas de ¬´ Server code took too long ¬ª
    RETRY_LIMIT = 3
    BACKOFF_SEC = 2           # base du back-off exponentiel : 1√ó, 2√ó, 4√ó ‚Ä¶
    """
    Traite un enregistrement audio et g√©n√®re un rapport.
    Ajoute une logique de RETRY pour chaque appel serveur susceptible
    de lever anvil.server.TimeoutError (¬´ server code took too long ¬ª).
    """

    # ------------------------------------------------------------
    # Helper : appel serveur avec reprises
    # ------------------------------------------------------------
    def call_with_retry(fn_name, *args):
      for attempt in range(RETRY_LIMIT):
        try:
          return anvil.server.call_s(fn_name, *args)
        except anvil.server.TimeoutError as e:
          if attempt < RETRY_LIMIT - 1:
            wait = BACKOFF_SEC ** attempt
            print(f"[WARN] {fn_name} timeout ; retry {attempt+1}/{RETRY_LIMIT} "
                  f"after {wait}s")
            time.sleep(wait)             # Skulpt dispose de time.sleep
          else:
            raise e                      # toutes les tentatives ont √©chou√©

    # ------------------------------------------------------------
    # 0. normaliser l‚Äôentr√©e
    # ------------------------------------------------------------
    MAX_DIRECT_PAYLOAD = 3_800_000  # 3.8 MB ‚âÉ 4 MB s√©rialis√©
    if isinstance(audio_blob, str):
      if len(audio_blob) > MAX_DIRECT_PAYLOAD:
        raw = base64.b64decode(audio_blob)
        audio_blob = anvil.BlobMedia(content=raw,
                                    content_type="audio/webm",
                                    name="recording.webm")
        print(f"[DEBUG] Base-64 >4 MB ‚Üí BlobMedia ({len(raw)/1024:.1f} kB)")
    elif isinstance(audio_blob, anvil.BlobMedia):
      pass
    else:                                 # JsProxy Blob
      audio_blob = anvil.js.to_media(audio_blob, name="recording.webm")
      print("[DEBUG] Js Blob ‚Üí BlobMedia")

    # ------------------------------------------------------------
    # 1. s√©lection du mod√®le
    # ------------------------------------------------------------
    tmpl_raw = self.call_js("getDropdownSelectedValue", "templateSelectBtn")
    selected_template = tmpl_raw.split(" [")[0]
    if not selected_template or selected_template.startswith("S√©lection"):
      alert("Aucun mod√®le s√©lectionn√©. Veuillez en choisir un.")
      return

    lang        = self.get_selected_language()
    prompt_col  = "prompt_fr" if lang == "FR" else "prompt_en"
    prompt      = call_with_retry("pick_template", selected_template, prompt_col) \
                  or call_with_retry("pick_template", selected_template, "prompt")
    if not prompt:
      alert(f"Aucun prompt pour ¬´ {selected_template} ¬ª")
      return
    self.template_name, self.prompt = selected_template, prompt

    # ------------------------------------------------------------
    # 2. transcription Whisper
    # ------------------------------------------------------------
    whisper_fn = "EN_process_audio_whisper" if lang == "EN" else "process_audio_whisper"
    transcription = call_with_retry(whisper_fn, audio_blob)
    if isinstance(transcription, dict) and "error" in transcription:
      alert(transcription["error"]); return
    self.raw_transcription = transcription

    # ------------------------------------------------------------
    # 3. g√©n√©ration GPT-4
    # ------------------------------------------------------------
    report = call_with_retry("generate_report", prompt, transcription)
    if isinstance(report, dict) and "error" in report:
      alert(report["error"]); return

    # ------------------------------------------------------------
    # 4. formatage
    # ------------------------------------------------------------
    formatter   = "EN_format_report" if lang == "EN" else "format_report"
    report_final = call_with_retry(formatter, report)
    if isinstance(report_final, dict) and "error" in report_final:
      alert(report_final["error"]); return

    # ------------------------------------------------------------
    # 5. affichage
    # ------------------------------------------------------------
    self.editor_content = report_final
    print("[DEBUG] process_recording termin√© ‚úì")
    return "OK"


  # 1) appel√© pour chaque chunk
  def receive_audio_chunk(self, b64_chunk, index, total, **event_args):
    if not self.audio_chunks or len(self.audio_chunks) != total:
      self.audio_chunks = [""] * total
    self.audio_chunks[index] = b64_chunk
    return "OK"

  # 2) consolidation sans bytearray ni join massif
  def process_consolidated_audio(self, **event_args):
    if not self.audio_chunks or "" in self.audio_chunks:
      return {"error": "Tous les morceaux audio n'ont pas √©t√© re√ßus."}

    data_bytes = b""
    for part in self.audio_chunks:  # concat√©nation incr√©mentale
      data_bytes += base64.b64decode(part)

    self.audio_chunks = []  # reset

    media = anvil.BlobMedia(
      content=data_bytes, content_type="audio/webm", name="recording.webm"
    )

    return self.process_recording(media)

  # -------------------------
  # Traitement des formats iOS
  # -------------------------
  def convert_audio_format_if_needed(self, audio_blob, file_name, **event_args):
    """
    V√©rifie si le format audio est compatible (notamment pour iOS Voice Memos) et le convertit si n√©cessaire.
    iOS Voice Memos utilise g√©n√©ralement le format .m4a, qui est compatible avec notre traitement.
    """
    print(f"[DEBUG] V√©rification du format audio pour: {file_name}")

    try:
      # V√©rifier l'extension du fichier
      file_extension = file_name.lower().split(".")[-1] if "." in file_name else ""

      if file_extension in ["m4a", "mp3", "wav", "aac"]:
        # Formats d√©j√† compatibles avec notre syst√®me
        print(f"[DEBUG] Format audio compatible: {file_extension}")
        return audio_blob
      else:
        # On pourrait impl√©menter la conversion ici
        # Pour l'instant, on alerte simplement l'utilisateur
        print(f"[DEBUG] Format audio non optimal: {file_extension}")
        if file_extension not in ["m4a"]:
          alert(
            f"Note: Le format {file_extension} n'est pas optimis√© pour iOS Voice Memos (qui utilise m4a)."
          )
        return audio_blob

    except Exception as e:
      print(f"[ERROR] Erreur lors de la v√©rification du format audio: {e}")
      return audio_blob  # On retourne le blob original en cas d'erreur

  # -------------------------
  # Traitement audio (TOOLBAR recorder)
  # -------------------------
  def process_toolbar_recording(self, audio_blob, **event_args):
    """
    Enregistrement via la barre d'outils (compl√®tement s√©par√© du main).
    1. R√©cup√®re le contenu existant de l'√©diteur.
    2. Transcrit la voix.
    3. Combine l'existant + la nouvelle transcription
    4. G√©n√®re un rapport GPT
    5. Met √† jour l'√©diteur avec le contenu final
    """
    print("[DEBUG] process_toolbar_recording() - toolbar flow.")
    try:
      # Prompt cod√© en dur (ou tout autre prompt que vous voulez)
      self.prompt = "you are a helpful AI assistant"

      # 1) R√©cup√©rer le contenu actuel de l'√©diteur
      existing_content = self.editor_content or ""
      print(f"[DEBUG] existing_content length: {len(existing_content)}")

      # 2) Transcrire l'audio nouvellement enregistr√©
      selected_language = self.get_selected_language()
      print(f"[DEBUG] (toolbar) Langue choisie: {selected_language}")

      if selected_language == "EN":
        transcription = anvil.server.call("EN_process_audio_whisper", audio_blob)
      else:
        transcription = anvil.server.call("process_audio_whisper", audio_blob)

      print(f"[DEBUG] (toolbar) Transcription re√ßue: {transcription}")

      # 3) Combiner la transcription avec le contenu de l'√©diteur
      combined_text = existing_content + "\n" + transcription

      # 4) G√©n√©rer le r√©sultat via GPT
      report_content = anvil.server.call("generate_report", self.prompt, combined_text)
      print(f"[DEBUG] (toolbar) GPT result length: {len(report_content or '')}")

      # 5) Formatage selon la langue
      if selected_language == "FR":
        report_final = anvil.server.call("format_report", report_content)
      else:
        report_final = anvil.server.call("EN_format_report", report_content)

      # Mise √† jour de l'√©diteur
      self.editor_content = report_final

      print("[DEBUG] process_toolbar_recording() termin√© avec succ√®s (toolbar flow).")
      return "OK"

    except Exception as e:
      print(f"[ERROR] Exception dans process_toolbar_recording (toolbar flow): {e}")
      alert(
        f"Erreur lors du traitement de l'enregistrement via barre d'outils: {str(e)}"
      )
      return None

  # -------------------------
  # Support pour le bouton de validation/envoi
  # -------------------------
  def validate_and_send(self, **event_args):
    """G√®re la validation et l'envoi du contenu de l'√©diteur"""
    print("[DEBUG] validate_and_send() appel√©")
    try:
      content = self.editor_content
      if not content or not content.strip():
        self.call_js("displayBanner", "Aucun contenu √† envoyer", "error")
        return False
      # ICI: logique d'envoi (email, etc.)
      self.call_js("displayBanner", "Contenu valid√© et envoy√© avec succ√®s!", "success")
      return True

    except Exception as e:
      print(f"[ERROR] Exception dans validate_and_send: {e}")
      alert(f"Erreur lors de la validation et l'envoi: {str(e)}")
      return False

  # -------------------------
  # Propri√©t√© pour l'√©diteur
  # -------------------------
  @property
  def editor_content(self):
    try:
      content = self.call_js("getEditorContent")
      print(f"[DEBUG] Contenu de l'√©diteur r√©cup√©r√©: {content}")
      return content
    except Exception as e:
      print(f"[ERROR] ERREUR en r√©cup√©rant le contenu de l'√©diteur: {e}")
      return None

  @editor_content.setter
  def editor_content(self, value):
    try:
      print(f"[DEBUG] Mise √† jour du contenu de l'√©diteur: {value}")
      self.call_js("setEditorContent", value)
    except Exception as e:
      print(f"[ERROR] ERREUR en d√©finissant le contenu de l'√©diteur: {e}")

  # -------------------------
  # M√©thode pour le bouton "Statut"
  # -------------------------
  def on_statut_clicked(self, **event_args):
    print("[DEBUG] on_statut_clicked() appel√©")
    choice = alert(
      "Choisir le statut :", buttons=["√† corriger", "valid√©", "envoy√©", "Annuler"]
    )
    print(f"[DEBUG] Statut s√©lectionn√©: {choice}")
    if choice in ["√† corriger", "valid√©", "envoy√©"]:
      self.selected_statut = choice
      self.call_js("displayBanner", f"Statut choisi: {choice}", "success")
      return choice
    else:
      return None

  # -------------------------
  # Sauvegarde et g√©n√©ration PDF
  # -------------------------
  def save_report(self, content_json, images, selected_patient, **event_args):
    print("[DEBUG] save_report() appel√© depuis le JS")
    try:
      # V√©rifier que selected_patient est un dict
      if not isinstance(selected_patient, dict):
        print(
          f"[DEBUG] selected_patient n'est pas un dict. Recherche du patient : {selected_patient}"
        )
        matches = self.search_patients_relay(selected_patient)
        if len(matches) == 1:
          selected_patient = matches[0]
          print(f"[DEBUG] Patient trouv√©: {selected_patient}")
        elif len(matches) > 1:
          alert(
            "Plusieurs patients trouv√©s. Veuillez en s√©lectionner un dans la liste."
          )
          return
        else:
          alert("Aucun patient trouv√© avec ce nom.")
          return

      animal_name = selected_patient.get("name")
      unique_id = selected_patient.get("unique_id")
      print(
        f"[DEBUG] Extraction du patient: animal_name={animal_name}, unique_id={unique_id}"
      )

      if unique_id is None:
        print("[DEBUG] Nouveau patient d√©tect√©, cr√©ation via write_animal_first_time")
        details = selected_patient.get("details", {})
        type_val = details.get("type")
        proprietaire_val = details.get("proprietaire")
        new_unique_id = anvil.server.call(
          "write_animal_first_time",
          animal_name,
          type=type_val,
          proprietaire=proprietaire_val,
        )
        print(f"[DEBUG] write_animal_first_time a renvoy√© unique_id: {new_unique_id}")
        unique_id = new_unique_id
      else:
        print("[DEBUG] Patient existant s√©lectionn√©, r√©utilisation des infos.")

      parsed = json.loads(content_json)
      html_content = parsed.get("content", "")
      print(f"[DEBUG] Longueur du contenu HTML: {len(html_content)}")
      print(f"[DEBUG] Nombre d'images: {len(images)}")

      statut = self.selected_statut or "Non sp√©cifi√©"
      print(f"[DEBUG] Statut utilis√©: {statut}")

      print("[DEBUG] Appel de write_report_first_time avec unique_id.")
      result = anvil.server.call(
        "write_report_first_time",
        animal_name=animal_name,
        report_rich=html_content,
        statut=statut,
        unique_id=unique_id,
        transcript=self.raw_transcription,
      )
      print(f"[DEBUG] Retour de write_report_first_time : {result}")

      if result:
        self.call_js("displayBanner", "Rapport enregistr√© avec succ√®s", "success")
      else:
        alert("√âchec de l'enregistrement du rapport. Veuillez r√©essayer.")

    except Exception as e:
      print(f"[ERROR] Exception dans save_report: {e}")
      raise

    print("[DEBUG] save_report() termin√© avec succ√®s.")
    return True

  def get_new_patient_details(self):
    print("[DEBUG] get_new_patient_details() appel√©")
    form_content = ColumnPanel(spacing=10)
    form_content.add_component(TextBox(placeholder="Nom"))
    form_content.add_component(TextBox(placeholder="Esp√®ce"))
    form_content.add_component(TextBox(placeholder="Propri√©taire"))
    result = alert(
      content=form_content,
      title="Entrer les d√©tails du nouveau patient",
      buttons=["OK", "Annuler"],
    )
    print(f"[DEBUG] R√©sultat get_new_patient_details: {result}")
    if result == "OK":
      components = form_content.get_components()
      details = {
        "name": components[0].text,
        "type": components[1].text,
        "proprietaire": components[2].text,
      }
      print(f"[DEBUG] D√©tails du nouveau patient: {details}")
      return details
    else:
      print("[DEBUG] get_new_patient_details annul√© par l'utilisateur.")
      return None

  def build_report_pdf_relay(self, placeholders, images):
    print("[DEBUG] build_report_pdf_relay appel√©")
    print(f"[DEBUG] Placeholders: {placeholders}, Nombre d'images: {len(images)}")
    pdf_base64 = anvil.server.call("build_report_pdf_base64", placeholders, images)
    print(f"[DEBUG] pdf_base64 re√ßu du serveur. Longueur: {len(pdf_base64)}")
    return pdf_base64

  def get_media_url_relay(self, pdf_media):
    print("[DEBUG] get_media_url_relay appel√©")
    import anvil

    url = anvil.get_url(pdf_media)
    print(f"[DEBUG] URL g√©n√©r√©e: {url}")
    return url

  # -------------------------
  # Navigation depuis les onglets du haut
  # -------------------------
  def open_production_form(self, **event_args):
    print("[DEBUG] Ouverture du formulaire FR_Production")
    open_form("TEST_AudioManagerUltimate2")

  def open_templates_form(self, **event_args):
    print("[DEBUG] Ouverture du formulaire FR_Templates")
    open_form("TEST_Templates")

  def open_archives_form(self, **event_args):
    print("[DEBUG] Ouverture du formulaire FR_Archives")
    current_user = anvil.users.get_user()
    if current_user["supervisor"]:
      open_form("TEST_ArchivesSecretariat")
    else:
      open_form("TEST_Archives")

  def open_settings_form(self, **event_args):
    print("[DEBUG] Ouverture du formulaire FR_Parametres")
    open_form("TEST_Settings")

  # -------------------------
  # Relay front-end pour la recherche de patients
  # -------------------------
  def search_patients_relay(self, search_term, **event_args):
    print(f"[DEBUG] search_patients_relay appel√© avec search_term: {search_term}")
    try:
      results = anvil.server.call("search_patients", search_term)
      print(f"[DEBUG] R√©sultats de search_patients_relay: {results}")
      return results
    except Exception as e:
      print(f"[ERROR] Erreur dans search_patients_relay: {e}")
      return []

  # -------------------------
  # Relay front-end pour la recherche de mod√®les
  # -------------------------
  def search_template_relay(self, search_term, **event_args):
    print(f"[DEBUG] search_template_relay appel√© avec search_term: {search_term}")
    try:
      results = anvil.server.call("EN_search_templates", search_term)
      if results is None:
        results = []
      transformed_results = []
      for template in results:
        if template is None:
          continue
        transformed_result = {
          "id": safe_value(template, "id", ""),
          "template_name": safe_value(template, "template_name", "Mod√®le sans nom"),
          "priority": safe_value(template, "priority", 0),
        }
        transformed_results.append(transformed_result)
      print(f"[DEBUG] R√©sultats de mod√®les transform√©s: {transformed_results}")
      return transformed_results
    except Exception as e:
      print(f"[ERROR] Erreur dans search_template_relay: {e}")
      return []

  # -------------------------
  # Nouveau bouton : Mode hors ligne
  # -------------------------
  def open_offline_mode(self, **event_args):
    print("[DEBUG] Ouverture du formulaire TEST_OfflineAudioManager")
    open_form("TEST_OfflineAudioManager")
