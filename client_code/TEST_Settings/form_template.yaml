components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <style>\n    /* Global styles */\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      overflow: hidden;\n    }\n\n    .container {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n\n    .fixed-section {\n      background: white;\n      z-index: 10;\n    }\n\n    .nav-tabs {\n      display: flex;\n      width: 100%;\n      border-bottom: 1px solid #ddd;\n    }\n\n    .nav-tab {\n      flex: 1;\n      padding: 8px 16px;\n      cursor: pointer;\n      border: 1px solid #ccc;\n      border-bottom: none;\n      background: #f8f8f8;\n      font-size: 14px;\n      position: relative;\n      margin-right: -1px;\n      text-align: center;\n    }\n\n    .nav-tab.active {\n      background: #e5e5e5;\n      border-top: 1px solid #999;\n      border-left: 1px solid #999;\n      border-right: 1px solid #999;\n      border-bottom: 1px solid #e5e5e5;\n      margin-bottom: -1px;\n    }\n\n    .actions-row {\n      display: flex;\n      justify-content: flex-end;\n      align-items: center;\n      padding: 15px 20px;\n    }\n\n    .time {\n      color: #666;\n      font-size: 14px;\n    }\n\n    .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n    }\n\n    /* Settings Form Styling */\n    .settings-form {\n      background-color: white;\n      border-radius: 8px;\n      padding: 20px;\n    }\n\n    .form-group {\n      margin-bottom: 20px;\n    }\n    .form-group label {\n      display: block;\n      margin-bottom: 8px;\n      font-weight: 500;\n      color: #333;\n    }\n    .form-group input[type=\"text\"],\n    .form-group input[type=\"email\"],\n    .form-group input[type=\"tel\"],\n    .form-group textarea,\n    .form-group select {\n      width: 100%;\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 14px;\n    }\n    .form-group textarea {\n      height: 100px;\n      resize: vertical;\n    }\n\n    .form-group input[type=\"checkbox\"] {\n      margin-right: 8px;\n    }\n\n    .file-input-wrapper {\n      display: flex;\n      align-items: center;\n      gap: 10px;\n    }\n    .file-input-wrapper input[type=\"file\"] {\n      display: none;\n    }\n    .file-input-wrapper label.file-upload-btn {\n      padding: 8px 16px;\n      background-color: #f0f0f0;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n      display: inline-block;\n    }\n    .file-input-wrapper label.file-name-label {\n      flex: 1;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      color: #666;\n      font-size: 14px;\n    }\n\n    .button-group {\n      display: flex;\n      gap: 10px;\n      margin-top: 30px;\n    }\n    .custom-button {\n      flex: 1;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      font-size: 14px;\n      text-align: center;\n      transition: background-color 0.3s;\n    }\n    #submit-btn {\n      background-color: #4CAF50;\n      color: white;\n    }\n    #submit-btn:hover {\n      background-color: #45a049;\n    }\n    #cancel-btn {\n      background-color: #f44336;\n      color: white;\n    }\n    #cancel-btn:hover {\n      background-color: #d32f2f;\n    }\n\n    /* Custom style for the structure and favorite language buttons */\n    .custom-structure-button {\n      width: 100%;\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 14px;\n      background-color: #fff;\n      cursor: pointer;\n    }\n\n    /* Modal styling */\n    .modal {\n      display: none;\n      position: fixed;\n      z-index: 20;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      overflow: auto;\n      background-color: rgba(0,0,0,0.5);\n    }\n\n    .modal-content {\n      background-color: #fefefe;\n      margin: 10% auto;\n      padding: 20px;\n      border: 1px solid #888;\n      width: 80%;\n      max-width: 400px;\n      border-radius: 8px;\n    }\n\n    .modal-close {\n      color: #aaa;\n      float: right;\n      font-size: 28px;\n      font-weight: bold;\n      cursor: pointer;\n    }\n    .modal-close:hover,\n    .modal-close:focus {\n      color: black;\n      text-decoration: none;\n    }\n\n    .structure-option {\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      margin: 5px 0;\n      cursor: pointer;\n      background-color: #fff;\n    }\n    .structure-option:hover {\n      background-color: #f0f0f0;\n    }\n    .structure-option.selected {\n      background-color: #d0ebff;\n      border-color: #66b0ff;\n    }\n\n    /* Logout footer styling (now inside the scrollable content) */\n    .logout-footer {\n      padding: 15px 20px;\n      border-top: 1px solid #ddd;\n      background-color: #f8f8f8;\n      text-align: center;\n      margin-top: 20px;\n    }\n    #logout-btn {\n      background-color: #f44336;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      padding: 12px 24px;\n      cursor: pointer;\n      font-size: 14px;\n      transition: background-color 0.3s;\n    }\n    #logout-btn:hover {\n      background-color: #d32f2f;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- En-tête fixe avec onglets -->\n    <div class=\"fixed-section\">\n      <div class=\"nav-tabs\">\n        <button class=\"nav-tab\" data-tab=\"Production\">Production</button>\n        <button class=\"nav-tab\" data-tab=\"Modèles/IA\">Modèles/IA</button>\n        <button class=\"nav-tab\" data-tab=\"Archives\">Archives</button>\n        <button class=\"nav-tab active\" data-tab=\"Paramètres\">Paramètres</button>\n      </div>\n\n      <div class=\"actions-row\">\n        <div class=\"time\">--:--</div>\n      </div>\n    </div>\n\n    <div class=\"scrollable-content\">\n      <div class=\"settings-form\">\n        <form id=\"vet-settings-form\" enctype=\"multipart/form-data\">\n          <div class=\"form-group\">\n            <label for=\"name\">Nom</label>\n            <input type=\"text\" id=\"name\" name=\"name_input\" required>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" name=\"email_input\" readonly>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"phone\">Téléphone</label>\n            <input type=\"tel\" id=\"phone\" name=\"phone_input\">\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"structure\">Structure</label>\n            <!-- L'input caché contient la valeur de la structure -->\n            <input type=\"hidden\" id=\"structure\" name=\"structure_input\">\n            <!-- Le bouton affiche la structure actuelle -->\n            <button type=\"button\" id=\"structure-button\" class=\"custom-structure-button\">Indépendant</button>\n          </div>\n\n          <!-- Nouveau champ Langue préférée -->\n          <div class=\"form-group\">\n            <label for=\"favorite-language\">Langue préférée</label>\n            <!-- L'input caché contient la valeur de la langue préférée (FR, EN, ES ou DE) -->\n            <input type=\"hidden\" id=\"favorite-language\" name=\"favorite_language_input\">\n            <!-- Le bouton affiche la langue préférée (affichée dans sa propre langue) -->\n            <button type=\"button\" id=\"favorite-language-button\" class=\"custom-structure-button\">Anglais</button>\n          </div>\n          \n          <!-- Nouveau bouton Tester mon micro -->\n          <div class=\"form-group\">\n            <button type=\"button\" id=\"microphone-test-button\" class=\"custom-structure-button\">Tester mon micro</button>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"signature\">Signature</label>\n            <div class=\"file-input-wrapper\">\n              <input type=\"file\" id=\"signature\" name=\"signature_input\" accept=\"image/*\">\n              <label for=\"signature\" class=\"file-upload-btn\">Choisir un fichier</label>\n              <label class=\"file-name-label\">Aucun fichier choisi</label>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"report-header\">En-tête du rapport</label>\n            <div class=\"file-input-wrapper\">\n              <input type=\"file\" id=\"report-header\" name=\"report_header_input\" accept=\"image/*\">\n              <label for=\"report-header\" class=\"file-upload-btn\">Choisir un fichier</label>\n              <label class=\"file-name-label\">Aucun fichier choisi</label>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label for=\"report-footer\">Pied de page du rapport</label>\n            <div class=\"file-input-wrapper\">\n              <input type=\"file\" id=\"report-footer\" name=\"report_footer_input\" accept=\"image/*\">\n              <label for=\"report-footer\" class=\"file-upload-btn\">Choisir un fichier</label>\n              <label class=\"file-name-label\">Aucun fichier choisi</label>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <label style=\"display: flex; align-items: center;\">\n              <input type=\"checkbox\" id=\"supervisor\" name=\"supervisor_checkbox\">\n              <span style=\"margin-left: 8px;\">Superviseur</span>\n            </label>\n          </div>\n\n          <div class=\"button-group\">\n            <div id=\"submit-btn\" class=\"custom-button\">Mettre à jour les paramètres</div>\n            <div id=\"cancel-btn\" class=\"custom-button\">Annuler</div>\n          </div>\n        </form>\n      </div>\n\n      <div class=\"logout-footer\">\n        <button id=\"logout-btn\" class=\"custom-button\">Déconnexion</button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Modal pour la sélection de structure -->\n  <div id=\"structure-modal\" class=\"modal\">\n    <div class=\"modal-content\">\n      <span id=\"structure-modal-close\" class=\"modal-close\">&times;</span>\n      <h3>Sélectionner une structure</h3>\n      <div id=\"structure-options\">\n        <!-- Les options seront insérées dynamiquement ici -->\n      </div>\n    </div>\n  </div>\n\n  <!-- Modal pour la sélection de la langue préférée -->\n  <div id=\"favorite-language-modal\" class=\"modal\">\n    <div class=\"modal-content\">\n      <span id=\"favorite-language-modal-close\" class=\"modal-close\">&times;</span>\n      <h3>Sélectionner la langue préférée</h3>\n      <div id=\"favorite-language-options\">\n        <!-- Les options seront insérées dynamiquement ici -->\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // ---------------------------------------\n    // 1) Exécuter une seule fois par session\n    // ---------------------------------------\n    if (!window.__my_vet_settings_globals) {\n      window.__my_vet_settings_globals = true;\n\n      // Fonctions de base pour get/set des champs de texte\n      window.getValueById = function(id) {\n        const element = document.getElementById(id);\n        return element ? element.value : \"\";\n      };\n      window.setValueById = function(id, value) {\n        const element = document.getElementById(id);\n        if (element) {\n          element.value = value;\n        }\n      };\n\n      // Nouvelle fonction utilitaire : Modifier le texte interne d'un bouton (ou de tout élément) par son id.\n      window.setButtonTextById = function(id, text) {\n        const element = document.getElementById(id);\n        if (element) {\n          element.textContent = text;\n        }\n      };\n\n      // Pour les cases à cocher\n      window.getCheckedById = function(id) {\n        const element = document.getElementById(id);\n        return element ? element.checked : false;\n      };\n      window.setCheckedById = function(id, checked) {\n        const element = document.getElementById(id);\n        if (element) {\n          element.checked = checked;\n        }\n      };\n\n      // Pour les libellés de noms de fichiers\n      window.setFileNameById = function(id, fileName) {\n        const input = document.getElementById(id);\n        if (input && input.type === 'file') {\n          // Frère suivant: le label \"Choisir un fichier\", puis le suivant: file-name-label\n          const label = input.nextElementSibling.nextElementSibling;\n          if (label && label.classList.contains('file-name-label')) {\n            label.textContent = fileName || 'Aucun fichier choisi';\n          }\n        }\n      };\n\n      // Pour lire les données d'un fichier (renvoie une Promise ou null)\n      window.getFileData = function(inputId) {\n        const input = document.getElementById(inputId);\n        if (input && input.files && input.files.length > 0) {\n          const file = input.files[0];\n          return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = function(e) {\n              resolve({\n                name: file.name,\n                content_type: file.type,\n                content: new Uint8Array(e.target.result)\n              });\n            };\n            reader.onerror = reject;\n            reader.readAsArrayBuffer(file);\n          });\n        }\n        return null;\n      };\n\n      // Nouvelle fonction utilitaire : Remplir le modal de structure avec des options.\n      // Appelle le back‐end pour vérifier si l'utilisateur est autorisé pour une structure.\n      window.populateStructureModal = function(options, current) {\n        const optionsContainer = document.getElementById(\"structure-options\");\n        optionsContainer.innerHTML = \"\";\n        options.forEach(opt => {\n          const optionElem = document.createElement(\"div\");\n          optionElem.classList.add(\"structure-option\");\n          optionElem.textContent = opt;\n          if (current && opt === current) {\n            optionElem.classList.add(\"selected\");\n          }\n          optionElem.addEventListener(\"click\", function(event) {\n            if (opt !== \"Indépendant\") {\n              // Appel du back-end via la fonction relais pour vérifier l'autorisation.\n              anvil.call(event.target, 'check_structure_authorization', opt)\n              .then(function(isAuthorized) {\n                if (!isAuthorized) {\n                  alert(\"Vous n'êtes pas autorisé(e) pour cette structure.\");\n                  return;\n                }\n                let confirmMsg = \"Êtes-vous sûr de vouloir changer votre structure pour \" + opt + \" ?\";\n                if(opt !== current && !confirm(confirmMsg)) {\n                  return;\n                }\n                document.getElementById(\"structure\").value = opt;\n                setButtonTextById(\"structure-button\", opt);\n                const allOptions = optionsContainer.querySelectorAll(\".structure-option\");\n                allOptions.forEach(elem => elem.classList.remove(\"selected\"));\n                optionElem.classList.add(\"selected\");\n                current = opt;\n                window.closeStructureModal();\n              })\n              .catch(function(error) {\n                alert(\"Erreur lors de la vérification de l'autorisation: \" + error);\n              });\n            } else {\n              // \"Indépendant\" ne nécessite pas de vérification d'autorisation.\n              let confirmMsg = \"Voulez-vous vraiment quitter votre structure actuelle ?\";\n              if(opt !== current && !confirm(confirmMsg)) {\n                return;\n              }\n              document.getElementById(\"structure\").value = opt;\n              setButtonTextById(\"structure-button\", opt);\n              const allOptions = optionsContainer.querySelectorAll(\".structure-option\");\n              allOptions.forEach(elem => elem.classList.remove(\"selected\"));\n              optionElem.classList.add(\"selected\");\n              current = opt;\n              window.closeStructureModal();\n            }\n          });\n          optionsContainer.appendChild(optionElem);\n        });\n      };\n\n      // Nouvelle fonction utilitaire : Remplir le modal de langue préférée avec des options.\n      // Le paramètre options est supposé être un tableau d'objets avec :\n      //   display : le texte à afficher (dans la langue d'origine)\n      //   value : la valeur sous-jacente (FR, EN, ES ou DE)\n      window.populateFavoriteLanguageModal = function(options, current) {\n        const optionsContainer = document.getElementById(\"favorite-language-options\");\n        optionsContainer.innerHTML = \"\";\n        options.forEach(opt => {\n          const optionElem = document.createElement(\"div\");\n          optionElem.classList.add(\"structure-option\");\n          optionElem.textContent = opt.display;\n          if (current && opt.value === current) {\n            optionElem.classList.add(\"selected\");\n          }\n          optionElem.addEventListener(\"click\", function(event) {\n            document.getElementById(\"favorite-language\").value = opt.value;\n            setButtonTextById(\"favorite-language-button\", opt.display);\n            const allOptions = optionsContainer.querySelectorAll(\".structure-option\");\n            allOptions.forEach(elem => elem.classList.remove(\"selected\"));\n            optionElem.classList.add(\"selected\");\n            current = opt.value;\n            window.closeFavoriteLanguageModal();\n          });\n          optionsContainer.appendChild(optionElem);\n        });\n      };\n\n      // Ouvrir le modal de structure\n      window.openStructureModal = function() {\n        const modal = document.getElementById(\"structure-modal\");\n        modal.style.display = \"block\";\n      };\n\n      // Fermer le modal de structure\n      window.closeStructureModal = function() {\n        const modal = document.getElementById(\"structure-modal\");\n        modal.style.display = \"none\";\n      };\n\n      // Ouvrir le modal de langue préférée\n      window.openFavoriteLanguageModal = function() {\n        const modal = document.getElementById(\"favorite-language-modal\");\n        modal.style.display = \"block\";\n      };\n\n      // Fermer le modal de langue préférée\n      window.closeFavoriteLanguageModal = function() {\n        const modal = document.getElementById(\"favorite-language-modal\");\n        modal.style.display = \"none\";\n      };\n\n      // Attacher les écouteurs d'événements à chaque affichage du DOM\n      window.__attachVetSettingsEvents = function() {\n        const vetSettingsForm = document.getElementById('vet-settings-form');\n        const submitBtn = document.getElementById('submit-btn');\n        const cancelBtn = document.getElementById('cancel-btn');\n        const structureButton = document.getElementById(\"structure-button\");\n        const modalClose = document.getElementById(\"structure-modal-close\");\n\n        if (!vetSettingsForm || !submitBtn || !cancelBtn || !structureButton || !modalClose) {\n          console.log(\"Settings: Certains éléments n'ont pas été trouvés, annulation de l'attachement.\");\n          return;\n        }\n\n        // Supprimer les anciens écouteurs (le cas échéant) en clonant\n        submitBtn.replaceWith(submitBtn.cloneNode(true));\n        cancelBtn.replaceWith(cancelBtn.cloneNode(true));\n        structureButton.replaceWith(structureButton.cloneNode(true));\n        modalClose.replaceWith(modalClose.cloneNode(true));\n\n        // Reprendre les références fraîches\n        const newSubmitBtn = document.getElementById('submit-btn');\n        const newCancelBtn = document.getElementById('cancel-btn');\n        const newStructureButton = document.getElementById(\"structure-button\");\n        const newModalClose = document.getElementById(\"structure-modal-close\");\n\n        // Soumission\n        newSubmitBtn.addEventListener('click', (event) => {\n          anvil.call(event.target, 'submit_click');\n        });\n\n        // Annuler\n        newCancelBtn.addEventListener('click', (event) => {\n          anvil.call(event.target, 'cancel_click');\n        });\n\n        // Clic sur le bouton Structure : ouvrir le modal\n        newStructureButton.addEventListener('click', (event) => {\n          openStructureModal();\n        });\n\n        // Bouton de fermeture du modal de structure\n        newModalClose.addEventListener('click', (event) => {\n          closeStructureModal();\n        });\n\n        // Fermer le modal de structure si l'utilisateur clique en dehors du contenu\n        window.addEventListener('click', function(event) {\n          const modal = document.getElementById(\"structure-modal\");\n          if (event.target == modal) {\n            closeStructureModal();\n          }\n        });\n\n        // Mettre à jour le libellé lors de la sélection d'un fichier\n        const fileInputs = vetSettingsForm.querySelectorAll('input[type=\"file\"]');\n        fileInputs.forEach(input => {\n          input.addEventListener('change', () => {\n            const label = input.nextElementSibling.nextElementSibling;\n            if (label && label.classList.contains('file-name-label')) {\n              label.textContent = input.files[0] ? input.files[0].name : 'Aucun fichier choisi';\n            }\n          });\n        });\n\n        // Attacher les événements pour le bouton de langue préférée\n        const favoriteLanguageButton = document.getElementById(\"favorite-language-button\");\n        const favoriteLanguageModalClose = document.getElementById(\"favorite-language-modal-close\");\n        favoriteLanguageButton.replaceWith(favoriteLanguageButton.cloneNode(true));\n        favoriteLanguageModalClose.replaceWith(favoriteLanguageModalClose.cloneNode(true));\n        const newFavoriteLanguageButton = document.getElementById(\"favorite-language-button\");\n        const newFavoriteLanguageModalClose = document.getElementById(\"favorite-language-modal-close\");\n        newFavoriteLanguageButton.addEventListener('click', (event) => {\n          openFavoriteLanguageModal();\n        });\n        newFavoriteLanguageModalClose.addEventListener('click', (event) => {\n          closeFavoriteLanguageModal();\n        });\n        window.addEventListener('click', function(event) {\n          const modal = document.getElementById(\"favorite-language-modal\");\n          if (event.target == modal) {\n            closeFavoriteLanguageModal();\n          }\n        });\n\n        // Attacher les événements pour le bouton Tester mon micro\n        const microphoneTestButton = document.getElementById(\"microphone-test-button\");\n        if(microphoneTestButton) {\n          microphoneTestButton.replaceWith(microphoneTestButton.cloneNode(true));\n          const newMicrophoneTestButton = document.getElementById(\"microphone-test-button\");\n          newMicrophoneTestButton.addEventListener('click', (event) => {\n            anvil.call(event.target, 'openMicrophoneTest');\n          });\n        }\n\n        // Attacher les événements pour le bouton de déconnexion\n        const logoutBtn = document.getElementById(\"logout-btn\");\n        if (logoutBtn) {\n          logoutBtn.addEventListener('click', (event) => {\n            anvil.call(event.target, 'logout_click');\n          });\n        }\n\n        console.log(\"Settings: Gestionnaires d'événements attachés à la nouvelle instance.\");\n      };\n    }\n\n    // ---------------------------------------\n    // 2) Attacher les écouteurs d'événements au DOM fraîchement chargé\n    // ---------------------------------------\n    window.__attachVetSettingsEvents();\n\n    // ---------------------------------------\n    // 3) Navigation\n    // ---------------------------------------\n    document.querySelectorAll('.nav-tab').forEach(tab => {\n      tab.addEventListener('click', (event) => {\n        const tabText = tab.getAttribute('data-tab');\n\n        // Retirer \"active\" de l'onglet actif actuel\n        document.querySelector('.nav-tab.active').classList.remove('active');\n        // Marquer l'onglet cliqué comme actif\n        tab.classList.add('active');\n\n        // \"Paramètres\" ne fait rien (déjà sur cette page)\n        // \"Production\" => openProduction\n        // \"Modèles/IA\" => openTemplates\n        // \"Archives\" => openArchives\n        if (tabText === 'Production') {\n          anvil.call(event.target, 'openProduction');\n        } else if (tabText === 'Modèles/IA') {\n          anvil.call(event.target, 'openTemplates');\n        } else if (tabText === 'Archives') {\n          anvil.call(event.target, 'openArchives');\n        } else if (tabText === 'Paramètres') {\n          // ne rien faire\n        }\n      });\n    });\n\n    // ---------------------------------------\n    // 4) Affichage de l'heure\n    // ---------------------------------------\n    function updateTime() {\n      const now = new Date();\n      const hrs = now.getHours().toString().padStart(2, '0');\n      const mins = now.getMinutes().toString().padStart(2, '0');\n      document.querySelector('.time').textContent = `${hrs}h${mins}`;\n    }\n    updateTime();\n    setInterval(updateTime, 60000);\n  </script>\n<!-- Add this simple script to your forms -->\n  <script>\n    // Initialize only once\n    if (!window.__session_handlers_initialized) {\n      window.__session_handlers_initialized = true;\n      \n      // Session handler setup\n      window.setupSessionHandlers = function() {\n        // Tab visibility change\n        document.addEventListener('visibilitychange', function() {\n          if (document.visibilityState === 'visible') {\n            anvil.call(document.body, 'refresh_session_relay');\n          }\n        });\n        \n        // Online status change\n        window.addEventListener('online', function() {\n          anvil.call(document.body, 'refresh_session_relay');\n        });\n      };\n    }\n  </script>\n</body>\n</html>\n"
  type: HtmlTemplate
is_package: true
