components: []
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>Templates/AI Management</title>\n  <style>\n    /* ---------------------------\n       Global & Layout Styles\n       --------------------------- */\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      overflow: hidden;\n    }\n    .container {\n      display: flex;\n      flex-direction: column;\n      height: 100vh;\n      max-width: 800px;\n      margin: 0 auto;\n      background-color: white;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n      position: relative;\n    }\n    .fixed-section {\n      background: white;\n      z-index: 10;\n    }\n    .nav-tabs {\n      display: flex;\n      width: 100%;\n      border-bottom: 1px solid #ddd;\n    }\n    .nav-tab {\n      flex: 1;\n      padding: 8px 16px;\n      cursor: pointer;\n      border: 1px solid #ccc;\n      border-bottom: none;\n      background: #f8f8f8;\n      font-size: 14px;\n      position: relative;\n      margin-right: -1px;\n      text-align: center;\n    }\n    .nav-tab.active {\n      background: #e5e5e5;\n      border-top: 1px solid #999;\n      border-left: 1px solid #999;\n      border-right: 1px solid #999;\n      border-bottom: 1px solid #e5e5e5;\n      margin-bottom: -1px;\n    }\n    .actions-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 15px 20px;\n    }\n    .left-section {\n      display: flex;\n      align-items: center;\n      flex: 1;\n      justify-content: space-between;\n    }\n    /* Container for the two buttons */\n    .buttons-container {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    }\n    .create-button {\n      padding: 8px 16px;\n      background: #fff;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      gap: 5px;\n    }\n    .create-button:hover {\n      background: #f5f5f5;\n    }\n    /* Style for the new personalize button */\n    .personalize-button {\n      padding: 8px 16px;\n      background: #fff;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .personalize-button:hover {\n      background: #f5f5f5;\n    }\n    .time {\n      color: #666;\n      font-size: 14px;\n    }\n    .search-bar {\n      display: block;\n      width: calc(100% - 40px);\n      padding: 8px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      margin: 0 20px 15px 20px;\n    }\n    .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n    }\n    /* ---------------------------\n       Template List Styles\n       --------------------------- */\n    .template-list {\n      list-style: none;\n      margin: 0;\n      padding: 0;\n    }\n    .template-item {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 12px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      margin-bottom: 8px;\n      background: white;\n    }\n    .template-name {\n      flex-grow: 1;\n      margin-right: 10px;\n    }\n    .template-actions {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    }\n    .star-icon {\n      cursor: pointer;\n      font-size: 20px;\n    }\n    .edit-button {\n      padding: 4px 8px;\n      background: #f0f0f0;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      cursor: pointer;\n    }\n    .delete-icon {\n      color: #666;\n      cursor: pointer;\n    }\n    /* ---------------------------\n       Custom Scrollbar\n       --------------------------- */\n    .scrollable-content::-webkit-scrollbar {\n      width: 8px;\n    }\n    .scrollable-content::-webkit-scrollbar-track {\n      background: #f1f1f1;\n    }\n    .scrollable-content::-webkit-scrollbar-thumb {\n      background: #888;\n      border-radius: 4px;\n    }\n    .scrollable-content::-webkit-scrollbar-thumb:hover {\n      background: #555;\n    }\n    /* ---------------------------\n       Modal Styles\n       --------------------------- */\n    .modal-backdrop {\n      display: none; /* Toggled by JS */\n      position: fixed;\n      top: 0;\n      left: 0;\n      z-index: 999;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n    }\n    .modal-container {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: #fff;\n      width: 90%;\n      max-width: 400px;\n      padding: 20px;\n      border-radius: 6px;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n    }\n    .modal-header {\n      font-weight: bold;\n      margin-bottom: 10px;\n    }\n    .modal-body {\n      margin-bottom: 15px;\n    }\n    .modal-body p {\n      margin-bottom: 10px;\n    }\n    .modal-body label {\n      display: inline-block;\n      margin-bottom: 6px;\n      font-weight: bold;\n    }\n    .modal-footer {\n      display: flex;\n      justify-content: flex-end;\n      gap: 10px;\n    }\n    .button {\n      padding: 6px 12px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: #f5f5f5;\n      cursor: pointer;\n    }\n    .button:hover {\n      background: #e0e0e0;\n    }\n    .banner-message {\n      position: absolute;\n      top: 10px;\n      left: 50%;\n      transform: translateX(-50%);\n      background: #fffae6;\n      border: 1px solid #f0e68c;\n      padding: 10px 20px;\n      border-radius: 4px;\n      font-weight: bold;\n      color: #666;\n      z-index: 1000;\n      opacity: 0.95;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <!-- This banner container will display temporary messages -->\n    <div id=\"bannerContainer\"></div>\n\n    <!-- Fixed section: Navigation & Actions -->\n    <div class=\"fixed-section\">\n      <div class=\"nav-tabs\">\n        <button class=\"nav-tab\" data-tab=\"Production\">Production</button>\n        <button class=\"nav-tab active\" data-tab=\"Templates/AI\">Templates/AI</button>\n        <button class=\"nav-tab\" data-tab=\"Archives\">Archives</button>\n        <button class=\"nav-tab\" data-tab=\"Settings\">Settings</button>\n      </div>\n      <div class=\"actions-row\">\n        <div class=\"left-section\">\n          <div class=\"buttons-container\">\n            <button class=\"create-button\" id=\"createBtn\">+ Create</button>\n            <button class=\"personalize-button\" id=\"personalizeBtn\">Customize your AI</button>\n          </div>\n          <div class=\"time\">--:--</div>\n        </div>\n      </div>\n      <input type=\"text\" class=\"search-bar\" placeholder=\"Search\">\n    </div>\n    <!-- Scrollable list of templates -->\n    <div class=\"scrollable-content\">\n      <ul class=\"template-list\" id=\"templateList\">\n        <!-- Dynamically injected by JS -->\n      </ul>\n    </div>\n  </div>\n\n  <!-- PDF Modal for uploading and converting PDF -->\n  <div class=\"modal-backdrop\" id=\"pdfModalBackdrop\">\n    <div class=\"modal-container\">\n      <div id=\"modalContent\">\n        <!-- Dynamic modal content -->\n      </div>\n    </div>\n  </div>\n\n  <script>\n    // ------------------------------------------------------------\n    // Utility: Display a temporary banner message\n    // ------------------------------------------------------------\n    function showBanner(message) {\n      const bannerContainer = document.getElementById(\"bannerContainer\");\n      if (!bannerContainer) return;\n      const banner = document.createElement(\"div\");\n      banner.className = \"banner-message\";\n      banner.textContent = message;\n      bannerContainer.appendChild(banner);\n      setTimeout(() => {\n        bannerContainer.removeChild(banner);\n      }, 3000);\n    }\n\n    // ------------------------------------------------------------\n    // 1) Global declarations & populateTemplates function\n    // ------------------------------------------------------------\n    if (!window.__templates_globals) {\n      window.__templates_globals = true;\n\n      window.populateTemplates = function(templates) {\n        /*\n          Expected format for each template:\n          {\n            \"id\": <unique identifier>,\n            \"template_name\": \"A Name\",\n            \"owner\": ...,\n            \"prompt\": ...,\n            \"human_readable\": ...,\n            \"priority\": 0   // 0, 1 or 2\n          }\n        */\n        const list = document.getElementById(\"templateList\");\n        if (!list) {\n          console.log(\"populateTemplates: #templateList not found\");\n          return;\n        }\n        list.innerHTML = \"\";\n        templates.forEach(tpl => {\n          const li = document.createElement(\"li\");\n          li.className = \"template-item\";\n          li.dataset.id = tpl.id;\n          li.dataset.priority = tpl.priority || \"0\";\n          li.dataset.name = tpl.template_name;  // storing template_name\n\n          // Element displaying the template name\n          const spanName = document.createElement(\"span\");\n          spanName.className = \"template-name\";\n          spanName.textContent = tpl.template_name || \"Unnamed Template\";\n\n          // Container for actions\n          const actionsDiv = document.createElement(\"div\");\n          actionsDiv.className = \"template-actions\";\n\n          // Star icon â€“ its color reflects the current priority:\n          // 0 : gray, 1 : yellow, 2 : green.\n          const star = document.createElement(\"span\");\n          star.className = \"star-icon\";\n          const prio = parseInt(tpl.priority) || 0;\n          if (prio === 2) {\n            star.style.color = \"green\";\n          } else if (prio === 1) {\n            star.style.color = \"yellow\";\n          } else {\n            star.style.color = \"#ccc\";\n          }\n          star.textContent = \"â˜…\";\n          star.addEventListener(\"click\", (event) => {\n            updateTemplatePriority(event, li);\n          });\n\n          // Edit button â€“ shows a banner when clicked.\n          const editBtn = document.createElement(\"button\");\n          editBtn.className = \"edit-button\";\n          editBtn.textContent = \"Edit\";\n          editBtn.addEventListener(\"click\", (event) => {\n            showBanner(\"Feature under development by the Checkvet team\");\n          });\n\n          // Delete icon â€“ shows a banner when clicked.\n          const delIcon = document.createElement(\"span\");\n          delIcon.className = \"delete-icon\";\n          delIcon.textContent = \"ðŸ—‘\";\n          delIcon.addEventListener(\"click\", (event) => {\n            showBanner(\"Feature under development by the Checkvet team\");\n          });\n\n          actionsDiv.appendChild(star);\n          actionsDiv.appendChild(editBtn);\n          actionsDiv.appendChild(delIcon);\n\n          li.appendChild(spanName);\n          li.appendChild(actionsDiv);\n          list.appendChild(li);\n        });\n      };\n    }\n\n    // ------------------------------------------------------------\n    // 2) Update the priority of a template (logic for star icon click)\n    // ------------------------------------------------------------\n    function updateTemplatePriority(event, tplElement) {\n      const currentPriority = parseInt(tplElement.dataset.priority) || 0;\n      let newPriority = (currentPriority + 1) % 3; // Cycle: 0 â†’ 1 â†’ 2 â†’ 0\n\n      // If promoting to yellow (priority 1), ensure there are at most 2 yellow favorites\n      if (newPriority === 1) {\n        let yellowCount = 0;\n        document.querySelectorAll('.template-item').forEach(item => {\n          if (item !== tplElement && item.dataset.priority === \"1\") {\n            yellowCount++;\n          }\n        });\n        if (yellowCount >= 2) {\n          alert(\"Maximum number of yellow favorites reached. Please demote a template before promoting this one to yellow.\");\n          return;\n        }\n      }\n\n      // If promoting to green (priority 2), automatically demote any other green template.\n      if (newPriority === 2) {\n        document.querySelectorAll('.template-item').forEach(item => {\n          if (item !== tplElement && item.dataset.priority === \"2\") {\n            item.dataset.priority = \"0\";\n            const starOther = item.querySelector('.star-icon');\n            if (starOther) starOther.style.color = \"#ccc\";\n            // Update the other template on the server using its template_name.\n            anvil.call(event.target, 'set_priority', item.dataset.name, 0);\n          }\n        });\n      }\n\n      // Update the visual state of the clicked template\n      tplElement.dataset.priority = newPriority;\n      const star = tplElement.querySelector('.star-icon');\n      if (newPriority === 0) {\n        star.style.color = \"#ccc\";\n      } else if (newPriority === 1) {\n        star.style.color = \"yellow\";\n      } else if (newPriority === 2) {\n        star.style.color = \"green\";\n      }\n\n      // Inform the server (via the Python relay method) of the priority change.\n      anvil.call(event.target, 'set_priority', tplElement.dataset.name, newPriority);\n    }\n\n    // ------------------------------------------------------------\n    // 3) Attach event listeners for navigation, buttons, and the search bar\n    // ------------------------------------------------------------\n    (function attachTemplatesEvents() {\n      console.log(\"TemplatesPage: Attaching event listeners...\");\n\n      // Navigation tabs\n      const tabs = document.querySelectorAll('.nav-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (event) => {\n          const currentActive = document.querySelector('.nav-tab.active');\n          if (currentActive) currentActive.classList.remove('active');\n          tab.classList.add('active');\n\n          const tabText = tab.getAttribute(\"data-tab\");\n          if (tabText === 'Production') {\n            anvil.call(event.target, 'open_production_form');\n          } else if (tabText === 'Archives') {\n            anvil.call(event.target, 'open_archives_form');\n          } else if (tabText === 'Settings') {\n            anvil.call(event.target, 'open_settings_form');\n          }\n          // For the \"Templates/AI\" tab, we are already on this page.\n        });\n      });\n\n      // Create button â€“ displays the PDF modal\n      const createBtn = document.getElementById('createBtn');\n      if (createBtn) {\n        createBtn.replaceWith(createBtn.cloneNode(true));\n        const newCreateBtn = document.getElementById('createBtn');\n        newCreateBtn.addEventListener('click', (event) => {\n          anvil.call(event.target, 'show_pdf_modal');\n        });\n      }\n\n      // \"Customize your AI\" button â€“ shows a banner when clicked\n      const personalizeBtn = document.getElementById('personalizeBtn');\n      if (personalizeBtn) {\n        personalizeBtn.replaceWith(personalizeBtn.cloneNode(true));\n        const newPersonalizeBtn = document.getElementById('personalizeBtn');\n        newPersonalizeBtn.addEventListener('click', (event) => {\n          showBanner(\"Feature under development by the Checkvet team\");\n        });\n      }\n\n      // ------------------------------------------------------------------------\n      // Manage the search bar for templates\n      // ------------------------------------------------------------------------\n      const searchInput = document.querySelector('.search-bar');\n      if (searchInput) {\n        searchInput.addEventListener('input', function(event) {\n          const query = event.target.value;\n          anvil.call(event.target, 'search_templates_client', query);\n        });\n      }\n\n      console.log(\"TemplatesPage: Event listeners attached.\");\n    })();\n\n    // ------------------------------------------------------------\n    // 4) Display current time\n    // ------------------------------------------------------------\n    function updateTime() {\n      const now = new Date();\n      const hrs = now.getHours().toString().padStart(2, '0');\n      const mins = now.getMinutes().toString().padStart(2, '0');\n      document.querySelector('.time').textContent = `${hrs}h${mins}`;\n    }\n    updateTime();\n    setInterval(updateTime, 60000);\n\n    // ------------------------------------------------------------\n    // 5) Modal logic for converting a PDF to a template\n    // ------------------------------------------------------------\n    window.openPdfModal = function() {\n      const backdrop = document.getElementById(\"pdfModalBackdrop\");\n      if (!backdrop) return;\n      backdrop.style.display = \"block\";\n\n      const modalContent = document.getElementById(\"modalContent\");\n      if (!modalContent) return;\n\n      modalContent.innerHTML = `\n        <div class=\"modal-header\">Welcome to Template Customization</div>\n        <div class=\"modal-body\">\n          <p>Please select a PDF document:</p>\n          <input type=\"file\" id=\"pdfFileInput\" accept=\"application/pdf\" />\n          <br/><br/>\n          <label for=\"templateNameInput\">Template Name:</label><br/>\n          <input type=\"text\" id=\"templateNameInput\" placeholder=\"E.g.: My new template\" style=\"width:100%;\" />\n          <br/><br/>\n        </div>\n        <div class=\"modal-footer\">\n          <button class=\"button\" id=\"transformBtn\">Transform to template</button>\n          <button class=\"button\" id=\"cancelBtn\">Cancel</button>\n        </div>\n      `;\n\n      const cancelBtn = document.getElementById(\"cancelBtn\");\n      cancelBtn.addEventListener(\"click\", () => {\n        backdrop.style.display = \"none\";\n      });\n\n      const transformBtn = document.getElementById(\"transformBtn\");\n      transformBtn.addEventListener(\"click\", async (event) => {\n        const fileInput = document.getElementById(\"pdfFileInput\");\n        const templateNameInput = document.getElementById(\"templateNameInput\");\n        if (!fileInput.files.length) {\n          alert(\"Please select a PDF file first.\");\n          return;\n        }\n        if (!templateNameInput.value.trim()) {\n          alert(\"Please enter a template name.\");\n          return;\n        }\n        const selectedFile = fileInput.files[0];\n        try {\n          const base64Pdf = await fileToBase64(selectedFile);\n          anvil.call(event.target, 'transform_pdf_to_template', base64Pdf, templateNameInput.value.trim());\n        } catch (err) {\n          alert(\"Error converting PDF: \" + err);\n        }\n      });\n    };\n\n    // Called from Python to display a success banner after transformation\n    window.showSuccessBanner = function() {\n      const modalContent = document.getElementById(\"modalContent\");\n      if (!modalContent) return;\n\n      modalContent.innerHTML = `\n        <div class=\"banner-message\">Congratulations, you have a new template!</div>\n        <div class=\"modal-footer\">\n          <button class=\"button\" id=\"closeSuccessBtn\">Close</button>\n        </div>\n      `;\n\n      const closeBtn = document.getElementById(\"closeSuccessBtn\");\n      closeBtn.addEventListener(\"click\", () => {\n        document.getElementById(\"pdfModalBackdrop\").style.display = \"none\";\n      });\n    };\n\n    // Utility: Convert a file to Base64\n    function fileToBase64(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          // Extract only the Base64 string (after \"base64,\")\n          const base64Str = reader.result.split(\"base64,\")[1];\n          resolve(base64Str);\n        };\n        reader.onerror = (error) => reject(error);\n        reader.readAsDataURL(file);\n      });\n    }\n  </script>\n  <script>\n    // Listen for when the app comes back online\n    window.addEventListener('online', function(event) {\n      console.log(\"App back online, refreshing session\");\n      anvil.call(event.target, 'refresh_session_relay');\n    });\n    \n    // Listen for when the app regains focus (user returns to the tab)\n    document.addEventListener('visibilitychange', function(event) {\n      if (document.visibilityState === 'visible') {\n        console.log(\"App visible again, checking session\");\n        anvil.call(event.target, 'refresh_session_relay');\n      }\n    });\n  </script>\n</body>\n</html>\n"
  type: HtmlTemplate
is_package: true
