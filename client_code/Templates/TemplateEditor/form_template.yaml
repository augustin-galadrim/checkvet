components: []
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Template Editor</title>
          <style>
            /* ===========================
            Basic Layout & Container
            ============================ */
            * {
              box-sizing: border-box;
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 0;
            }
            body {
              background-color: #f5f5f5;
              height: 100vh;
              overflow: hidden;
            }
            .container {
              display: flex;
              flex-direction: column;
              height: 100vh;
              width: 100%;
              max-width: 800px;
              margin: 0 auto;
              background: #fff;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }

            /* ===========================
            Return Bar
            ============================ */
            .return-bar {
              background: #e5e5e5;
              padding: 15px 20px;
              cursor: pointer;
              font-size: 16px;
              text-align: center;
              border-bottom: 1px solid #ddd;
              user-select: none;
            }

            /* ===========================
            Template Name Input
            ============================ */
            .template-name {
              padding: 15px 20px;
              border-bottom: 1px solid #ddd;
            }
            .template-name input {
              width: 100%;
              padding: 10px;
              border: 1px solid #ddd;
              border-radius: 4px;
              font-size: 16px;
            }

            /* ===========================
            Scrollable Content
            ============================ */
            .scrollable-content {
              flex: 1;
              overflow-y: auto;
              padding: 20px;
              padding-bottom: 80px; /* space for bottom buttons */
            }

            /* ===========================
            EDITOR SECTION
            ============================ */
            .editor-section {
              background: #fff;
              border-radius: 8px;
              overflow: hidden;
            }
            #toolbar {
              padding: 10px;
              background: #f8f8f8;
              border-bottom: 1px solid #ddd;
              display: flex;
              flex-wrap: wrap;
              gap: 5px;
              align-items: center;
            }
            .toolbar-button {
              padding: 6px 12px;
              border: 1px solid #ddd;
              border-radius: 4px;
              background: #fff;
              cursor: pointer;
            }
            .toolbar-button:hover {
              background: #f5f5f5;
            }
            #editor {
              min-height: 300px;
              padding: 20px;
              border: 1px solid #ddd;
              overflow-y: auto;
              font-size: 16px;
              line-height: 1.5;
            }

            /* ===========================
            BOTTOM BUTTONS
            ============================ */
            .bottom-buttons {
              position: fixed;
              bottom: 0;
              left: 50%;
              transform: translateX(-50%);
              width: 800px;
              max-width: 100%;
              background: #fff;
              padding: 15px 20px;
              display: flex;
              justify-content: center;
              gap: 20px;
              border-top: 1px solid #ddd;
              box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
              z-index: 10;
            }
            .bottom-button {
              padding: 10px 30px;
              border: 1px solid #ddd;
              border-radius: 4px;
              background: #fff;
              cursor: pointer;
              font-size: 14px;
              transition: all 0.2s ease;
            }
            .bottom-button:hover {
              background: #f5f5f5;
              border-color: #999;
            }
            .primary-button {
              background: #4caf50;
              color: white;
              border-color: #4caf50;
            }
            .primary-button:hover {
              background: #45a049;
              border-color: #45a049;
            }

            /* ===========================
            NOTIFICATION BANNERS
            ============================ */
            #bannerContainer {
              position: fixed;
              top: 20px;
              left: 50%;
              transform: translateX(-50%);
              z-index: 2000;
            }
            .banner {
              margin-bottom: 10px;
              padding: 10px 20px;
              border-radius: 4px;
              color: #fff;
              opacity: 0.9;
              font-size: 14px;
              min-width: 200px;
              text-align: center;
              transition: opacity 0.3s ease;
            }
            .banner-success {
              background-color: #4caf50;
            }
            .banner-error {
              background-color: #f44336;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <!-- Return bar -->
            <div class="return-bar" id="returnBar">‚Üê Return</div>

            <!-- Template name input -->
            <div class="template-name">
              <input type="text" id="templateName" placeholder="Template Name">
            </div>

            <!-- Main scrollable area -->
            <div class="scrollable-content">
              <!-- EDITOR SECTION -->
              <div class="editor-section">
                <div id="toolbar">
                  <button class="toolbar-button" onclick="formatDoc('bold')"><b>B</b></button>
                  <button class="toolbar-button" onclick="formatDoc('italic')"><i>I</i></button>
                  <button class="toolbar-button" onclick="formatDoc('underline')"><u>U</u></button>
                  <button class="toolbar-button" onclick="formatDoc('justifyleft')">Left</button>
                  <button class="toolbar-button" onclick="formatDoc('justifycenter')">Center</button>
                  <button class="toolbar-button" onclick="formatDoc('justifyright')">Right</button>
                  <button class="toolbar-button" onclick="insertImage()">Image</button>
                  <span style="margin-left:auto;"></span>
                  <button class="toolbar-button" onclick="copyEditorContent()">Copy</button>
                </div>
                <div id="editor" contenteditable="true"></div>
              </div>
            </div>

            <!-- Bottom buttons -->
            <div class="bottom-buttons">
              <button class="bottom-button" id="cancelButton">Cancel</button>
              <button class="bottom-button primary-button" id="saveButton">Save Template</button>
            </div>
          </div>

          <!-- Banner container -->
          <div id="bannerContainer"></div>

          <script>
            /****************************************************
           * 1) GLOBALS & HELPER FUNCTIONS
           ****************************************************/
            console.log("===== LOADING TEMPLATE EDITOR HTML/JS =====");

            // Store all globals in a single object to avoid collisions
            if (!window.__my_template_editor_globals) {
              window.__my_template_editor_globals = true;

              /***********************************************
             * Editor content functions (matching .py calls)
             ***********************************************/
              window.getEditorContent = function() {
                console.log("getEditorContent() called in JS => returning #editor HTML");
                const editor = document.getElementById("editor");
                if (!editor) return "";
                return editor.innerHTML;
              };

              window.setEditorContent = function(value) {
                console.log("setEditorContent() called in JS => setting #editor HTML to length:", value?.length);
                const editor = document.getElementById("editor");
                if (editor) {
                  editor.innerHTML = value || "";
                } else {
                  console.warn("#editor not found in setEditorContent");
                }
              };

              window.setTemplateNameValue = function(value) {
                console.log("setTemplateNameValue() called in JS");
                const nameInput = document.getElementById("templateName");
                if (nameInput) {
                  nameInput.value = value || "";
                } else {
                  console.warn("#templateName not found in setTemplateNameValue");
                }
              };

              /***********************************************
             * Banner function (matching .py calls: displayBanner)
             ***********************************************/
              window.displayBanner = function(message, type) {
                console.log("displayBanner() =>", message, type);
                const container = document.getElementById("bannerContainer");
                if (!container) {
                  console.warn("#bannerContainer not found!");
                  return;
                }
                const banner = document.createElement("div");
                banner.className = "banner " + (type === "success" ? "banner-success" : "banner-error");
                banner.textContent = message;
                container.appendChild(banner);

                // Auto-hide after 3s
                setTimeout(() => {
                  banner.style.opacity = "0";
                  setTimeout(() => {
                    if (banner.parentNode) {
                      banner.parentNode.removeChild(banner);
                    }
                  }, 300);
                }, 3000);
              };

              /***********************************************
             * Rich text formatting helper functions
             ***********************************************/
              // Format document
              window.formatDoc = function(cmd) {
                document.execCommand(cmd, false, null);
              };

              // Insert image
              window.insertImage = function() {
                const input = document.createElement("input");
                input.type = "file";
                input.accept = "image/*";
                input.onchange = function(e) {
                  const file = e.target.files[0];
                  if (!file) return;
                  const reader = new FileReader();
                  reader.onload = function(evt) {
                    const img = document.createElement("img");
                    img.src = evt.target.result;
                    img.style.maxWidth = "100%";
                    img.dataset.referenceId = "img_" + Date.now();
                    const editorEl = document.getElementById("editor");
                    if (editorEl) editorEl.appendChild(img);
                  };
                  reader.readAsDataURL(file);
                };
                input.click();
              };

              // Copy entire editor
              window.copyEditorContent = function() {
                const editor = document.getElementById("editor");
                if (!editor) return;
                const range = document.createRange();
                range.selectNodeContents(editor);
                const selection = window.getSelection();
                selection.removeAllRanges();
                selection.addRange(range);
                try {
                  document.execCommand("copy");
                  displayBanner("Content copied!", "success");
                } catch (err) {
                  console.error("Error copying =>", err);
                }
                selection.removeAllRanges();
              };
            }

            /****************************************************
           * 2) ATTACH EVENT LISTENERS
           ****************************************************/
            window.__attachTemplateEditorEvents = function() {
              console.log("===== Attaching Template Editor Event Listeners =====");

              // "Return" bar
              const returnBar = document.getElementById("returnBar");
              if (returnBar) {
                returnBar.replaceWith(returnBar.cloneNode(true));
                const newReturnBar = document.getElementById("returnBar");
                newReturnBar.addEventListener("click", e => {
                  console.log("'Return' clicked => call return_clicked in Python");
                  anvil.call(e.target, "return_clicked");
                });
              }

              // Save button
              const saveButton = document.getElementById("saveButton");
              if (saveButton) {
                saveButton.replaceWith(saveButton.cloneNode(true));
                const newSaveButton = document.getElementById("saveButton");
                newSaveButton.addEventListener("click", e => {
                  console.log("'Save Template' clicked => call save_template in Python");
                  const templateName = document.getElementById("templateName").value.trim();
                  if (!templateName) {
                    displayBanner("Please enter a template name", "error");
                    return;
                  }

                  const contentJSON = JSON.stringify({ content: window.getEditorContent() });
                  const images = Array.from(document.querySelectorAll("#editor img")).map(img => ({
                    media: img.src,
                    reference_id: img.dataset.referenceId || ("img_" + Date.now()),
                    position: img.offsetTop.toString()
                  }));

                  anvil.call(e.target, "save_template", templateName, contentJSON, images);
                });
              }

              // Cancel button
              const cancelButton = document.getElementById("cancelButton");
              if (cancelButton) {
                cancelButton.replaceWith(cancelButton.cloneNode(true));
                const newCancelButton = document.getElementById("cancelButton");
                newCancelButton.addEventListener("click", e => {
                  console.log("'Cancel' clicked => call return_clicked in Python");
                  anvil.call(e.target, "return_clicked");
                });
              }

              console.log("===== Done attaching Template Editor event listeners =====");
            };

            /****************************************************
           * 3) INIT ON LOAD
           ****************************************************/
            console.log("Calling __attachTemplateEditorEvents() now...");
            window.__attachTemplateEditorEvents();

            // Refresh session on visibility changes
            if (!window.__session_handlers_initialized) {
              window.__session_handlers_initialized = true;
              document.addEventListener("visibilitychange", () => {
                if (document.visibilityState === "visible") {
                  anvil.call(document.body, "refresh_session_relay");
                }
              });
              window.addEventListener("online", () => {
                anvil.call(document.body, "refresh_session_relay");
              });
            }
            console.log("===== TEMPLATE EDITOR HTML/JS FULLY LOADED =====");
          </script>
        </body>
      </html>
  type: HtmlTemplate
is_package: true
