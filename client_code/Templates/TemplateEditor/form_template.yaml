components:
- layout_properties: {slot: default}
  name: header_return_1
  properties: {return_form: Templates.Templates}
  type: form:Components.HeaderReturn
- layout_properties: {slot: editor_slot}
  name: text_editor_1
  properties: {show_align_buttons: true, show_image_button: false}
  type: form:Components.TextEditor
container:
  properties:
    html: "\n  <style>\n    /* ===========================\n    Basic Layout & Container\n    ============================ */\n    * {\n      box-sizing: border-box;\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n    body {\n      background-color: #f5f5f5;\n      height: 100vh;\n      overflow: hidden;\n    }\n\n    /* ===========================\n    Template Name Input\n    ============================ */\n    .template-name {\n      padding: 15px 20px;\n      border-bottom: 1px solid #ddd;\n    }\n    .template-name input {\n      width: 100%;\n      padding: 10px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 16px;\n    }\n\n    /* ===========================\n    Scrollable Content\n    ============================ */\n    .scrollable-content {\n      flex: 1;\n      overflow-y: auto;\n      padding: 20px;\n      padding-bottom: 80px; /* space for bottom buttons */\n    }\n\n    /* ===========================\n    BOTTOM BUTTONS\n    ============================ */\n    .bottom-buttons {\n      position: fixed;\n      bottom: 0;\n      left: 50%;\n      transform: translateX(-50%);\n      width: 800px;\n      max-width: 100%;\n      background: #fff;\n      padding: 15px 20px;\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      border-top: 1px solid #ddd;\n      box-shadow: 0 -2px 4px rgba(0,0,0,0.1);\n      z-index: 10;\n    }\n    .bottom-button {\n      padding: 10px 30px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      background: #fff;\n      cursor: pointer;\n      font-size: 14px;\n      transition: all 0.2s ease;\n    }\n    .bottom-button:hover {\n      background: #f5f5f5;\n      border-color: #999;\n    }\n    .primary-button {\n      background: #4caf50;\n      color: white;\n      border-color: #4caf50;\n    }\n    .primary-button:hover {\n      background: #45a049;\n      border-color: #45a049;\n    }\n\n    /* ===========================\n    NOTIFICATION BANNERS\n    ============================ */\n    #bannerContainer {\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      z-index: 2000;\n    }\n    .banner {\n      margin-bottom: 10px;\n      padding: 10px 20px;\n      border-radius: 4px;\n      color: #fff;\n      opacity: 0.9;\n      font-size: 14px;\n      min-width: 200px;\n      text-align: center;\n      transition: opacity 0.3s ease;\n    }\n    .banner-success {\n      background-color: #4caf50;\n    }\n    .banner-error {\n      background-color: #f44336;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"responsive-container\">\n    <!-- Return bar -->\n    <div anvil-slot=\"default\"></div>\n\n    <!-- Template name input -->\n    <div class=\"template-name\">\n      <input type=\"text\" id=\"templateName\" placeholder=\"Template Name\">\n      <!-- Add this language selector -->\n      <select id=\"templateLanguage\" style=\"padding: 10px; border-radius: 4px; border: 1px solid #ddd;\">\n        <option value=\"en\">ðŸ‡¬ðŸ‡§</option>\n        <option value=\"fr\">ðŸ‡«ðŸ‡·</option>\n      </select>\n    </div>\n    \n\n    <!-- Main scrollable area -->\n    <div class=\"scrollable-content\">\n    <div anvil-slot=\"editor_slot\"></div>\n\n    <!-- Bottom buttons -->\n    <div class=\"bottom-buttons\">\n      <button class=\"bottom-button\" id=\"cancelButton\">Cancel</button>\n      <button class=\"bottom-button primary-button\" id=\"saveButton\">Save Template</button>\n    </div>\n  </div>\n\n  <!-- Banner container -->\n  <div id=\"bannerContainer\"></div>\n\n    <script>\n      /****************************************************\n    * 1) RULE 1: DEFINE GLOBALS & HELPERS ONLY ONCE\n    ****************************************************/\n      console.log(\"===== LOADING TEMPLATE EDITOR HTML/JS =====\");\n\n      // Use a guard to ensure functions exposed to Python and other globals\n      // are defined only a single time.\n      if (!window.__my_template_editor_globals) {\n        window.__my_template_editor_globals = true;\n\n        window.setTemplateNameValue = function(value) {\n          console.log(\"setTemplateNameValue() called in JS\");\n          const nameInput = document.getElementById(\"templateName\");\n          if (nameInput) {\n            nameInput.value = value || \"\";\n          } else {\n            // This warning is crucial for debugging race conditions.\n            // If it appears, the Python form_show fired before the DOM was ready.\n            console.warn(\"#templateName not found in setTemplateNameValue\");\n          }\n        };\n        window.setLanguageValue = function(value) {\n          console.log(`setLanguageValue() called in JS with value: ${value}`);\n          const langSelect = document.getElementById(\"templateLanguage\");\n          if (langSelect) {\n            langSelect.value = value || \"en\"; // Default to 'en' if value is null\n          } else {\n            console.warn(\"#templateLanguage select element not found.\");\n          }\n        };\n\n        /***********************************************\n      * Banner function (matching .py calls: displayBanner)\n      ***********************************************/\n        window.displayBanner = function(message, type) {\n          console.log(\"displayBanner() =>\", message, type);\n          const container = document.getElementById(\"bannerContainer\");\n          if (!container) {\n            console.warn(\"#bannerContainer not found!\");\n            return;\n          }\n          const banner = document.createElement(\"div\");\n          banner.className = \"banner \" + (type === \"success\" ? \"banner-success\" : \"banner-error\");\n          banner.textContent = message;\n          container.appendChild(banner);\n\n          // Auto-hide after 3s\n          setTimeout(() => {\n            banner.style.opacity = \"0\";\n            setTimeout(() => {\n              if (banner.parentNode) {\n                banner.parentNode.removeChild(banner);\n              }\n            }, 300);\n          }, 3000);\n        };\n\n        // Session refresh listeners also only need to be attached once.\n        if (!window.__session_handlers_initialized) {\n          window.__session_handlers_initialized = true;\n          document.addEventListener(\"visibilitychange\", () => {\n            if (document.visibilityState === \"visible\") {\n              // Use a valid element for the Anvil call\n              anvil.call(document.body, \"refresh_session_relay\");\n            }\n          });\n          window.addEventListener(\"online\", () => {\n            anvil.call(document.body, \"refresh_session_relay\");\n          });\n        }\n      }\n\n\n      /****************************************************\n    * 2) RULE 2: ALWAYS ATTACH EVENT LISTENERS ON LOAD\n    ****************************************************/\n      // This function is defined outside the guard so it's always accessible.\n      // It will attach (or re-attach) event listeners every time the form is shown.\n      window.__attachTemplateEditorEvents = function() {\n        console.log(\"===== Attaching Template Editor Event Listeners =====\");\n\n        // \"Return\" bar\n        const returnBar = document.getElementById(\"returnBar\");\n        if (returnBar) {\n          // Use the cloneNode pattern to remove old listeners\n          returnBar.replaceWith(returnBar.cloneNode(true));\n          const newReturnBar = document.getElementById(\"returnBar\");\n          newReturnBar.addEventListener(\"click\", e => {\n            console.log(\"'Return' clicked => call return_clicked in Python\");\n            // Use event.target per the rules\n            anvil.call(e.target, \"return_clicked\");\n          });\n        }\n\n        // Save button\n        const saveButton = document.getElementById(\"saveButton\");\n        if (saveButton) {\n          saveButton.replaceWith(saveButton.cloneNode(true));\n          const newSaveButton = document.getElementById(\"saveButton\");\n          newSaveButton.addEventListener(\"click\", e => {\n            console.log(\"'Save Template' clicked => call save_template in Python\");\n            const templateName = document.getElementById(\"templateName\").value.trim();\n            const templateLanguage = document.getElementById(\"templateLanguage\").value;\n            if (!templateName) {\n              displayBanner(\"Please enter a template name\", \"error\");\n              return;\n            }\n\n            // Assuming getEditorContent is a global function from your TextEditor component\n            const contentJSON = window.getEditorContent ? JSON.stringify({ content: window.getEditorContent() }) : '{}';\n            const images = []; // Your image extraction logic can go here\n\n            anvil.call(e.target, \"save_template\", templateName, templateLanguage, contentJSON, images);\n          });\n        }\n\n        // Cancel button\n        const cancelButton = document.getElementById(\"cancelButton\");\n        if (cancelButton) {\n          cancelButton.replaceWith(cancelButton.cloneNode(true));\n          const newCancelButton = document.getElementById(\"cancelButton\");\n          newCancelButton.addEventListener(\"click\", e => {\n            console.log(\"'Cancel' clicked => call return_clicked in Python\");\n            anvil.call(e.target, \"return_clicked\");\n          });\n        }\n\n        console.log(\"===== Done attaching Template Editor event listeners =====\");\n      };\n\n\n      /****************************************************\n    * 3) RULE 3: IMMEDIATELY ATTACH EVERYTHING\n    ****************************************************/\n      // This call is now OUTSIDE the guard, so it runs on EVERY form load,\n      // ensuring the event listeners are always attached to the current buttons.\n      window.__attachTemplateEditorEvents();\n\n      console.log(\"===== TEMPLATE EDITOR HTML/JS FULLY LOADED =====\");\n    </script>\n</body>"
  type: HtmlTemplate
is_package: true
