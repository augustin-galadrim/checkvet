components:
- layout_properties: {slot: default}
  name: header_return_1
  properties: {return_form: Templates.Templates}
  type: form:Components.HeaderReturn
- layout_properties: {slot: editor_slot}
  name: text_editor_1
  properties: {show_align_buttons: true, show_image_button: false}
  type: form:Components.TextEditor
container:
  properties:
    html: |-
      <head>
        <style>
          * { box-sizing: border-box; font-family: Arial, sans-serif; margin: 0; padding: 0; }
          body { background-color: #f5f5f5; height: 100vh; overflow: hidden; }
          .template-name { padding: 15px 20px; border-bottom: 1px solid #ddd; display: flex; gap: 10px; align-items: center; }
          .template-name input { flex-grow: 1; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 16px; }
          .scrollable-content { flex: 1; overflow-y: auto; padding: 20px; padding-bottom: 80px; }
          .bottom-buttons { position: fixed; bottom: 0; left: 50%; transform: translateX(-50%); width: 800px; max-width: 100%; background: #fff; padding: 15px 20px; display: flex; justify-content: center; gap: 20px; border-top: 1px solid #ddd; box-shadow: 0 -2px 4px rgba(0,0,0,0.1); z-index: 10; }
          .bottom-button { padding: 10px 30px; border: 1px solid #ddd; border-radius: 4px; background: #fff; cursor: pointer; font-size: 14px; transition: all 0.2s ease; }
          .bottom-button:hover { background: #f5f5f5; border-color: #999; }
          .primary-button { background: #4caf50; color: white; border-color: #4caf50; }
          .primary-button:hover { background: #45a049; border-color: #45a049; }
        </style>
      </head>
      <body>
        <div class="responsive-container">
          <div anvil-slot="default"></div>
          <div class="template-name">
            <input type="text" id="templateEditor-input-name" placeholder="Template Name">
            <select id="templateEditor-select-language" style="padding: 10px; border-radius: 4px; border: 1px solid #ddd;">
              <option value="en">ðŸ‡¬ðŸ‡§</option>
              <option value="fr">ðŸ‡«ðŸ‡·</option>
            </select>
          </div>
          <div class="scrollable-content">
            <div anvil-slot="editor_slot"></div>
          </div>
          <div class="bottom-buttons">
            <button class="bottom-button" id="templateEditor-button-cancel">Cancel</button>
            <button class="bottom-button primary-button" id="templateEditor-button-save">Save Template</button>
          </div>
        </div>

        <script>
          if (!window.__my_template_editor_globals) {
            window.__my_template_editor_globals = true;

            const logger = window.createLogger('TemplateEditor');

            window.setTemplateNameValue = function(value) {
              const nameInput = document.getElementById("templateEditor-input-name");
              if (nameInput) {
                nameInput.value = value || "";
              } else {
                logger.warn("#templateEditor-input-name not found.");
              }
            };

            window.setLanguageValue = function(value) {
              const langSelect = document.getElementById("templateEditor-select-language");
              if (langSelect) {
                langSelect.value = value || "en";
              } else {
                logger.warn("#templateEditor-select-language not found.");
              }
            };

            window.js_attachTemplateEditorEvents = function() {
              logger.log("Attaching Template Editor event listeners.");

              const reattach = (id, event, handler) => {
                const element = document.getElementById(id);
                if(element) {
                  const newElement = element.cloneNode(true);
                  element.parentNode.replaceChild(newElement, element);
                  newElement.addEventListener(event, handler);
                } else {
                  logger.warn(`Element with ID '${id}' not found for event attachment.`);
                }
              };

              reattach('templateEditor-button-save', 'click', e => {
                logger.debug("'Save' clicked. Gathering data for Python.");
                const templateName = document.getElementById("templateEditor-input-name").value;
                const templateLanguage = document.getElementById("templateEditor-select-language").value;
                anvil.call(e.target, "save_template", templateName, templateLanguage);
              });

              reattach('templateEditor-button-cancel', 'click', e => {
                logger.debug("'Cancel' clicked, opening Templates form.");
                open_form("Templates.Templates");
              });
            };
          }
        </script>
      </body>
  type: HtmlTemplate
is_package: true
