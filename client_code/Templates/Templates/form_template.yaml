components:
- layout_properties: {slot: time_display_slot}
  name: time_display_1
  properties: {}
  type: form:Components.TimeDisplay
- layout_properties: {slot: default}
  name: header_nav_1
  properties: {active_tab: Templates}
  type: form:Components.HeaderNav
container:
  properties:
    html: "<!DOCTYPE html>\n<html lang=\"fr\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Gestion des Templates/IA</title>\n    <style>\n      * { box-sizing: border-box; font-family: Arial, sans-serif; margin: 0; padding: 0; }\n      body { background-color: #f5f5f5; height: 100vh; }\n      .fixed-section { background: white; z-index: 10; }\n\n      /* MODIFIED: Ensured correct button alignment */\n      .actions-row { \n        display: flex; \n        align-items: center; \n        padding: 15px 20px; \n      }\n      .actions-row > [anvil-slot=\"time_display_slot\"] {\n        margin-left: auto; /* This pushes the time to the far right */\n      }\n      .create-button { padding: 8px 16px; background: #fff; border: 1px solid #ddd; border-radius: 4px; cursor: pointer; }\n      .search-bar { display: block; width: calc(100% - 40px); padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin: 0 20px 15px 20px; }\n      .scrollable-content { flex: 1; overflow-y: auto; padding: 20px; }\n\n      /* --- Collapsible Section Styles --- */\n      .templates-section { margin-bottom: 10px; background-color: white; border: 1px solid #ddd; border-radius: 8px; overflow: hidden; }\n      .section-header { display: flex; justify-content: space-between; align-items: center; padding: 15px; cursor: pointer; background-color: #f9f9f9; user-select: none; }\n      .section-header:hover { background-color: #f0f0f0; }\n      .section-title { font-size: 16px; font-weight: 600; color: #333; }\n      .section-arrow { width: 0; height: 0; border-top: 5px solid transparent; border-bottom: 5px solid transparent; border-left: 5px solid #555; transition: transform 0.2s ease-in-out; }\n      .templates-section.expanded .section-arrow { transform: rotate(90deg); }\n      .section-content { max-height: 0; transition: max-height 0.3s ease-in-out; }\n      .templates-section.expanded .section-content { max-height: 2000px; }\n\n      /* --- Template Item Styles --- */\n      .template-list { list-style: none; margin: 0; padding: 0 15px 15px 15px; }\n      .template-item { display: flex; align-items: center; justify-content: space-between; padding: 12px; border-bottom: 1px solid #eee; transition: background-color 0.2s; }\n      .template-item:hover { background-color: #f0f0f0; } /* MODIFIED: Hover effect re-added */\n      .template-item:last-child { border-bottom: none; }\n      .template-item .template-name { flex-grow: 1; margin-right: 10px; font-weight: 500; cursor: pointer; }\n\n      /* --- Action Menu Styles --- */\n      .item-actions { display: flex; align-items: center; gap: 5px; }\n      .kebab-menu-container { position: relative; }\n      .icon-button { color: #666; cursor: pointer; background: none; border: none; padding: 4px; display: flex; align-items: center; justify-content: center; border-radius: 50%; font-size: 16px; }\n      .icon-button:hover { background-color: #e0e0e0; }\n      .kebab-button { font-size: 20px; font-weight: bold; line-height: 1; }\n      .actions-menu { display: none; position: absolute; right: 0; top: 100%; background-color: white; border: 1px solid #ddd; border-radius: 4px; box-shadow: 0 2px 5px rgba(0,0,0,0.15); z-index: 10; min-width: 150px; }\n      .actions-menu.visible { display: block; }\n      .menu-item { padding: 10px; cursor: pointer; background: none; border: none; width: 100%; text-align: left; font-size: 14px; }\n      .menu-item:hover { background-color: #f5f5f5; }\n      .empty-list-message { text-align: center; color: #888; padding: 20px; }\n    </style>\n  </head>\n  <body>\n    <div class=\"responsive-container\">\n      <div class=\"fixed-section\">\n        <div anvil-slot=\"default\"></div>\n        <!-- MODIFIED: Ensured correct button and time alignment -->\n        <div class=\"actions-row\">\n          <button class=\"create-button\" id=\"createBtn\">New Template</button>\n          <div anvil-slot=\"time_display_slot\"></div>\n        </div>\n        <input type=\"text\" class=\"search-bar\" placeholder=\"Search all templates...\">\n      </div>\n      <div class=\"scrollable-content\">\n        <div id=\"templates-container\"></div>\n      </div>\n    </div>\n\n    <script>\n      if (!window.__templates_globals) {\n        window.__templates_globals = true;\n\n        let allTemplatesData = [];\n        let currentDefaultId = null;\n\n        document.addEventListener('click', (e) => {\n          if (!e.target.closest('.kebab-menu-container')) {\n            document.querySelectorAll('.actions-menu.visible').forEach(menu => menu.classList.remove('visible'));\n          }\n        });\n\n        window.populateTemplates = function(templates, defaultTemplateId) {\n          allTemplatesData = templates || [];\n          currentDefaultId = defaultTemplateId;\n          renderAllSections(allTemplatesData);\n        };\n\n        function renderAllSections(templatesToRender) {\n          const container = document.getElementById('templates-container');\n          container.innerHTML = '';\n\n          const defaultTpl = templatesToRender.find(t => t.id === currentDefaultId);\n          const activeTpls = templatesToRender.filter(t => t.id !== currentDefaultId && t.display);\n          const inactiveTpls = templatesToRender.filter(t => t.id !== currentDefaultId && !t.display);\n\n          container.appendChild(createSection('Default Template', 'default', defaultTpl ? [defaultTpl] : [], true));\n          container.appendChild(createSection(`Active Templates (${activeTpls.length})`, 'active', activeTpls, true));\n          container.appendChild(createSection(`Inactive Templates (${inactiveTpls.length})`, 'inactive', inactiveTpls, false));\n        }\n\n        function createSection(title, key, templates, expandedDefault) {\n          const sectionDiv = document.createElement('div');\n          sectionDiv.className = `templates-section ${expandedDefault ? 'expanded' : ''}`;\n\n          const header = document.createElement('div');\n          header.className = 'section-header';\n          header.innerHTML = `<span class=\"section-title\">${title}</span><div class=\"section-arrow\"></div>`;\n          header.addEventListener('click', () => sectionDiv.classList.toggle('expanded'));\n\n          const content = document.createElement('div');\n          content.className = 'section-content';\n          const list = document.createElement('ul');\n          list.className = 'template-list';\n\n          if (templates && templates.length > 0) {\n            templates.forEach(t => list.appendChild(createTemplateElement(t, key === 'default')));\n          } else {\n            list.innerHTML = `<div class='empty-list-message'>No ${key} templates found.</div>`;\n          }\n\n            content.appendChild(list);\n            sectionDiv.appendChild(header);\n            sectionDiv.appendChild(content);\n            return sectionDiv;\n          }\n\n            function createTemplateElement(tpl, isDefault = false) {\n            const li = document.createElement(\"li\");\n            li.className = \"template-item\";\n\n            const spanName = document.createElement(\"span\");\n            spanName.className = \"template-name\";\n            const langToFlag = {\n              'en': '🇬🇧',\n              'fr': '🇫🇷'\n            };\n\n            // Get the flag for the template's language, defaulting to a generic flag\n            const langCode = tpl.language || 'en'; // Default to 'en' if language is not set\n            const flag = langToFlag[langCode] || '🏳️';\n\n            // Construct the new display name with the flag\n            const displayName = `${tpl.name || \"Untitled Template\"} - ${flag}`;\n            spanName.textContent = displayName;\n            spanName.addEventListener(\"click\", () => anvil.call(li, 'open_template_editor', tpl.id));\n\n            li.appendChild(spanName);\n\n            const actionsContainer = document.createElement('div');\n            actionsContainer.className = 'item-actions';\n\n            const kebabContainer = document.createElement(\"div\");\n            kebabContainer.className = \"kebab-menu-container\";\n            kebabContainer.addEventListener('click', (e) => e.stopPropagation());\n\n            const kebabBtn = document.createElement(\"button\");\n            kebabBtn.className = \"icon-button kebab-button\";\n            kebabBtn.innerHTML = '...';\n\n            const kebabMenu = document.createElement(\"div\");\n            kebabMenu.className = \"actions-menu\";\n\n            kebabBtn.addEventListener('click', (e) => {\n            document.querySelectorAll('.actions-menu.visible').forEach(m => { if (m !== kebabMenu) m.classList.remove('visible'); });\n            kebabMenu.classList.toggle('visible');\n          });\n\n            if (!isDefault) {\n            const setDefaultItem = document.createElement(\"button\");\n            setDefaultItem.className = \"menu-item\";\n            setDefaultItem.textContent = \"Set as Default\";\n            setDefaultItem.addEventListener(\"click\", (e) => anvil.call(setDefaultItem, 'set_default_template', tpl.id));\n            kebabMenu.appendChild(setDefaultItem);\n          }\n\n            const toggleItem = document.createElement(\"button\");\n            toggleItem.className = \"menu-item\";\n            toggleItem.textContent = tpl.display ? \"Hide\" : \"Show\";\n            toggleItem.addEventListener(\"click\", (e) => {\n            const optimisticDisplay = !tpl.display;\n            const originalTpl = allTemplatesData.find(t => t.id === tpl.id);\n            if (originalTpl) originalTpl.display = optimisticDisplay;\n            renderAllSections(allTemplatesData);\n            anvil.call(toggleItem, 'toggle_template_display', tpl.id, optimisticDisplay);\n          });\n            kebabMenu.appendChild(toggleItem);\n\n            kebabContainer.appendChild(kebabBtn);\n            kebabContainer.appendChild(kebabMenu);\n            actionsContainer.appendChild(kebabContainer);\n\n            const deleteBtn = document.createElement(\"button\");\n            deleteBtn.className = \"icon-button\";\n            deleteBtn.title = \"Delete\";\n            deleteBtn.innerHTML = '🗑️';\n            deleteBtn.addEventListener(\"click\", (e) => { e.stopPropagation(); anvil.call(deleteBtn, 'delete_template', tpl.id); });\n            actionsContainer.appendChild(deleteBtn);\n\n            li.appendChild(actionsContainer);\n\n            return li;\n          }\n\n            window.attachTemplatesEvents = function() {\n            document.getElementById('createBtn').addEventListener('click', (e) => anvil.call(e.target, 'open_template_editor'));\n            document.querySelector('.search-bar').addEventListener('input', (e) => {\n            const query = e.target.value.toLowerCase();\n            const filtered = query ? allTemplatesData.filter(t => (t.name || \"\").toLowerCase().includes(query)) : allTemplatesData;\n            renderAllSections(filtered);\n          });\n          };\n          }\n\n            window.attachTemplatesEvents();\n\n            if (!window.__session_handlers_initialized) {\n            window.__session_handlers_initialized = true;\n            window.setupSessionHandlers = function() {\n            document.addEventListener('visibilitychange', () => { if (document.visibilityState === 'visible') anvil.call(document.body, 'refresh_session_relay'); });\n            window.addEventListener('online', () => anvil.call(document.body, 'refresh_session_relay'));\n          };\n            setupSessionHandlers();\n          }\n            </script>\n  </body>\n</html>"
  type: HtmlTemplate
is_package: true
