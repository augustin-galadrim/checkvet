components:
- layout_properties: {slot: time_display_slot}
  name: time_display_1
  properties: {}
  type: form:Components.TimeDisplay
- layout_properties: {slot: default}
  name: header_nav_1
  properties: {active_tab: Templates/AI}
  type: form:Components.HeaderNav
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <title>Gestion des Templates/IA</title>
          <style>
            * {
              box-sizing: border-box;
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 0;
            }
            body {
              background-color: #f5f5f5;
              height: 100vh;
            }
            .container {
              display: flex;
              flex-direction: column;
              height: 100vh;
              max-width: 800px;
              margin: 0 auto;
              background-color: white;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              position: relative;
            }
            .fixed-section {
              background: white;
              z-index: 10;
            }
            .actions-row {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 15px 20px;
            }
            .left-section {
              display: flex;
              align-items: center;
              flex: 1;
              justify-content: space-between;
            }
            .buttons-container {
              display: flex;
              gap: 10px;
              align-items: center;
            }
            .create-button {
              padding: 8px 16px;
              background: #fff;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
              display: flex;
              align-items: center;
              gap: 5px;
            }
            .create-button:hover {
              background: #f5f5f5;
            }
            .personalize-button {
              padding: 8px 16px;
              background: #fff;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
            }
            .personalize-button:hover {
              background: #f5f5f5;
            }
            .time {
              color: #666;
              font-size: 14px;
            }
            .search-bar {
              display: block;
              width: calc(100% - 40px);
              padding: 8px;
              border: 1px solid #ddd;
              border-radius: 4px;
              margin: 0 20px 15px 20px;
            }
            .scrollable-content {
              flex: 1;
              overflow-y: auto;
              padding: 20px;
            }
            .template-list {
              list-style: none;
              margin: 0;
              padding: 0;
            }
            .template-item {
              display: flex;
              align-items: center;
              justify-content: space-between;
              padding: 12px;
              border: 1px solid #ddd;
              border-radius: 4px;
              margin-bottom: 8px;
              background: white;
            }
            .template-name {
              flex-grow: 1;
              margin-right: 10px;
            }
            .template-actions {
              display: flex;
              gap: 10px;
              align-items: center;
            }
            .edit-button, .toggle-button, .set-default-button {
              padding: 4px 8px;
              background: #f0f0f0;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
            }
            .default-indicator {
              padding: 4px 8px;
              background: #e0f2f1;
              border: 1px solid #00796b;
              color: #00796b;
              font-weight: bold;
              border-radius: 4px;
            }
            .delete-icon {
              color: #666;
              cursor: pointer;
            }
            .banner-message {
              position: absolute;
              top: 10px;
              left: 50%;
              transform: translateX(-50%);
              background: #fffae6;
              border: 1px solid #f0e68c;
              padding: 10px 20px;
              border-radius: 4px;
              font-weight: bold;
              color: #666;
              z-index: 1000;
              opacity: 0.95;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div id="bannerContainer"></div>
            <div class="fixed-section">
              <div anvil-slot="default"></div>
              <div class="actions-row">
                <div class="left-section">
                  <div class="buttons-container">
                    <button class="create-button" id="createBtn">+ Cr√©er</button>
                  </div>
                  <div anvil-slot="time_display_slot"></div>
                </div>
              </div>
              <input type="text" class="search-bar" placeholder="Rechercher">
            </div>
            <div class="scrollable-content">
              <ul class="template-list" id="templateList"></ul>
            </div>
          </div>

          <script>
            function showBanner(message) {
              const bannerContainer = document.getElementById("bannerContainer");
              if (!bannerContainer) return;
              const banner = document.createElement("div");
              banner.className = "banner-message";
              banner.textContent = message;
              bannerContainer.appendChild(banner);
              setTimeout(() => {
                bannerContainer.removeChild(banner);
              }, 3000);
            }

            if (!window.__templates_globals) {
              window.__templates_globals = true;

              window.populateTemplates = function(templates, defaultTemplateId, retryCount = 0) {
                const list = document.getElementById("templateList");

                if (list) {
                  list.innerHTML = "";
                  if (!templates || templates.length === 0) {
                    list.innerHTML = "<div style='text-align: center; color: #888;'>Aucun template √† afficher</div>";
                    return;
                  }
                  templates.forEach(tpl => {
                    const li = document.createElement("li");
                    li.className = "template-item";
                    li.dataset.id = tpl.id;

                    const spanName = document.createElement("span");
                    spanName.className = "template-name";
                    spanName.textContent = tpl.name || "Untitled Template";

                    const actionsDiv = document.createElement("div");
                    actionsDiv.className = "template-actions";

                    // Default button/indicator logic
                    if (tpl.id === defaultTemplateId) {
                      const defaultIndicator = document.createElement("span");
                      defaultIndicator.className = "default-indicator";
                      defaultIndicator.textContent = "‚≠ê Default";
                      actionsDiv.appendChild(defaultIndicator);
                    } else {
                      const setDefaultBtn = document.createElement("button");
                      setDefaultBtn.className = "set-default-button";
                      setDefaultBtn.textContent = "Set as Default";
                      setDefaultBtn.addEventListener("click", (event) => {
                        anvil.call(event.target, 'set_default_template', tpl.id);
                      });
                      actionsDiv.appendChild(setDefaultBtn);
                    }

                    const toggleBtn = document.createElement("button");
                    toggleBtn.className = "toggle-button";
                    toggleBtn.textContent = tpl.display ? "Hide" : "Show";
                    toggleBtn.addEventListener("click", (event) => {
                      const newDisplayState = !tpl.display;
                      anvil.call(event.target, 'toggle_template_display', tpl.id, newDisplayState);
                    });

                    const editBtn = document.createElement("button");
                    editBtn.className = "edit-button";
                    editBtn.textContent = "Modifier";
                    editBtn.addEventListener("click", (event) => {
                      anvil.call(event.target, 'open_template_editor', tpl.id);
                    });

                    const delIcon = document.createElement("span");
                    delIcon.className = "delete-icon";
                    delIcon.textContent = "üóëÔ∏è";
                    delIcon.addEventListener("click", (event) => {
                      event.stopPropagation();
                      anvil.call(event.target, 'delete_template', tpl.id);
                    });

                    actionsDiv.appendChild(toggleBtn);
                    actionsDiv.appendChild(editBtn);
                    actionsDiv.appendChild(delIcon);

                    li.appendChild(spanName);
                    li.appendChild(actionsDiv);
                    list.appendChild(li);
                  });
                  return;
                }

                if (retryCount >= 10) {
                  console.error("populateTemplates: #templateList element could not be found after multiple retries.");
                  return;
                }

                console.warn(`populateTemplates: #templateList not found. Retrying... (Attempt ${retryCount + 1})`);
                setTimeout(() => {
                  window.populateTemplates(templates, defaultTemplateId, retryCount + 1);
                }, 50);
              };
            }

            (function attachTemplatesEvents() {
              const createBtn = document.getElementById('createBtn');
              if (createBtn) {
                createBtn.replaceWith(createBtn.cloneNode(true));
                document.getElementById('createBtn').addEventListener('click', (event) => {
                  anvil.call(event.target, 'open_template_editor');
                });
              }

              const personalizeBtn = document.getElementById('personalizeBtn');
              if (personalizeBtn) {
                personalizeBtn.replaceWith(personalizeBtn.cloneNode(true));
                document.getElementById('personalizeBtn').addEventListener('click', (event) => {
                  showBanner("fonctionalit√© en cours de d√©veloppement par les √©quipes Checkvet");
                });
              }

              const searchInput = document.querySelector('.search-bar');
              if (searchInput) {
                searchInput.addEventListener('input', function(event) {
                  const query = event.target.value;
                  anvil.call(event.target, 'search_templates_client', query);
                });
              }
            })();

            if (!window.__session_handlers_initialized) {
              window.__session_handlers_initialized = true;
              window.setupSessionHandlers = function() {
                document.addEventListener('visibilitychange', function() {
                  if (document.visibilityState === 'visible') {
                    anvil.call(document.body, 'refresh_session_relay');
                  }
                });
                window.addEventListener('online', function() {
                  anvil.call(document.body, 'refresh_session_relay');
                });
              };
              setupSessionHandlers();
            }
          </script>
        </body>
      </html>
  type: HtmlTemplate
is_package: true
