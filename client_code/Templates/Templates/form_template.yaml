components:
- layout_properties: {slot: default}
  name: header_nav_1
  properties: {active_tab: Templates/AI}
  type: form:Components.HeaderNav
container:
  properties:
    html: |-
      <!DOCTYPE html>
      <html lang="fr">
        <head>
          <meta charset="UTF-8" />
          <title>Gestion des Templates/IA</title>
          <style>
            /* ---------------------------
            Global & Layout Styles
            --------------------------- */
            * {
              box-sizing: border-box;
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 0;
            }
            body {
              background-color: #f5f5f5;
              height: 100vh;
              overflow: hidden;
            }
            .container {
              display: flex;
              flex-direction: column;
              height: 100vh;
              max-width: 800px;
              margin: 0 auto;
              background-color: white;
              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
              position: relative;
            }
            .fixed-section {
              background: white;
              z-index: 10;
            }
            .nav-tabs {
              display: flex;
              width: 100%;
              border-bottom: 1px solid #ddd;
            }
            .nav-tab {
              flex: 1;
              padding: 8px 16px;
              cursor: pointer;
              border: 1px solid #ccc;
              border-bottom: none;
              background: #f8f8f8;
              font-size: 14px;
              position: relative;
              margin-right: -1px;
              text-align: center;
            }
            .nav-tab.active {
              background: #e5e5e5;
              border-top: 1px solid #999;
              border-left: 1px solid #999;
              border-right: 1px solid #999;
              border-bottom: 1px solid #e5e5e5;
              margin-bottom: -1px;
            }
            .actions-row {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 15px 20px;
            }
            .left-section {
              display: flex;
              align-items: center;
              flex: 1;
              justify-content: space-between;
            }
            /* Container for the two buttons */
            .buttons-container {
              display: flex;
              gap: 10px;
              align-items: center;
            }
            .create-button {
              padding: 8px 16px;
              background: #fff;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
              display: flex;
              align-items: center;
              gap: 5px;
            }
            .create-button:hover {
              background: #f5f5f5;
            }
            /* Style for the new personalize button */
            .personalize-button {
              padding: 8px 16px;
              background: #fff;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
            }
            .personalize-button:hover {
              background: #f5f5f5;
            }
            .time {
              color: #666;
              font-size: 14px;
            }
            .search-bar {
              display: block;
              width: calc(100% - 40px);
              padding: 8px;
              border: 1px solid #ddd;
              border-radius: 4px;
              margin: 0 20px 15px 20px;
            }
            .scrollable-content {
              flex: 1;
              overflow-y: auto;
              padding: 20px;
            }
            /* ---------------------------
            Template List Styles
            --------------------------- */
            .template-list {
              list-style: none;
              margin: 0;
              padding: 0;
            }
            .template-item {
              display: flex;
              align-items: center;
              justify-content: space-between;
              padding: 12px;
              border: 1px solid #ddd;
              border-radius: 4px;
              margin-bottom: 8px;
              background: white;
            }
            .template-name {
              flex-grow: 1;
              margin-right: 10px;
            }
            .template-actions {
              display: flex;
              gap: 10px;
              align-items: center;
            }
            .star-icon {
              cursor: pointer;
              font-size: 20px;
            }
            .edit-button {
              padding: 4px 8px;
              background: #f0f0f0;
              border: 1px solid #ddd;
              border-radius: 4px;
              cursor: pointer;
            }
            .delete-icon {
              color: #666;
              cursor: pointer;
            }
            /* ---------------------------
            Custom Scrollbar
            --------------------------- */
            .scrollable-content::-webkit-scrollbar {
              width: 8px;
            }
            .scrollable-content::-webkit-scrollbar-track {
              background: #f1f1f1;
            }
            .scrollable-content::-webkit-scrollbar-thumb {
              background: #888;
              border-radius: 4px;
            }
            .scrollable-content::-webkit-scrollbar-thumb:hover {
              background: #555;
            }
            /* ---------------------------
            Banner Message
            --------------------------- */
            .banner-message {
              position: absolute;
              top: 10px;
              left: 50%;
              transform: translateX(-50%);
              background: #fffae6;
              border: 1px solid #f0e68c;
              padding: 10px 20px;
              border-radius: 4px;
              font-weight: bold;
              color: #666;
              z-index: 1000;
              opacity: 0.95;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <!-- Ce conteneur de bannière affichera des messages temporaires -->
            <div id="bannerContainer"></div>

            <!-- Section fixe : Navigation & Actions -->
            <div class="fixed-section">
              <div anvil-slot="default"></div>
              <div class="actions-row">
                <div class="left-section">
                  <div class="buttons-container">
                    <button class="create-button" id="createBtn">+ Créer</button>
                    <button class="personalize-button" id="personalizeBtn">Personaliser votre IA</button>
                  </div>
                  <div class="time">--:--</div>
                </div>
              </div>
              <input type="text" class="search-bar" placeholder="Rechercher">
            </div>
            <!-- Liste défilante des templates -->
            <div class="scrollable-content">
              <ul class="template-list" id="templateList">
                <!-- Injecté dynamiquement par JS -->
              </ul>
            </div>
          </div>

          <script>
            // ------------------------------------------------------------
            // Utilitaire : Afficher un message de bannière temporaire
            // ------------------------------------------------------------
            function showBanner(message) {
              const bannerContainer = document.getElementById("bannerContainer");
              if (!bannerContainer) return;
              const banner = document.createElement("div");
              banner.className = "banner-message";
              banner.textContent = message;
              bannerContainer.appendChild(banner);
              setTimeout(() => {
                bannerContainer.removeChild(banner);
              }, 3000);
            }

            // ------------------------------------------------------------
            // 1) Déclarations globales & fonction populateTemplates
            // ------------------------------------------------------------
            if (!window.__templates_globals) {
              window.__templates_globals = true;

              window.populateTemplates = function(templates) {
                /*
                Format attendu pour chaque template :
                {
                  "template_name": "Un Nom",
                  "owner": ...,
                  "prompt": ...,
                  "human_readable": ...,
                  "priority": 0   // 0, 1 ou 2
                }
              */
                const list = document.getElementById("templateList");
                if (!list) {
                  console.log("populateTemplates: #templateList introuvable");
                  return;
                }
                list.innerHTML = "";
                templates.forEach(tpl => {
                  const li = document.createElement("li");
                  li.className = "template-item";
                  li.dataset.priority = tpl.priority || "0";
                  li.dataset.name = tpl.template_name;  // stockage de template_name

                  // Élément affichant le nom du template
                  const spanName = document.createElement("span");
                  spanName.className = "template-name";
                  spanName.textContent = tpl.template_name || "Template sans nom";

                  // Conteneur des actions
                  const actionsDiv = document.createElement("div");
                  actionsDiv.className = "template-actions";

                  // Icône d'étoile – sa couleur reflète la priorité actuelle :
                  // 0 : gris, 1 : jaune, 2 : vert.
                  const star = document.createElement("span");
                  star.className = "star-icon";
                  const prio = parseInt(tpl.priority) || 0;
                  if (prio === 2) {
                    star.style.color = "green";
                  } else if (prio === 1) {
                    star.style.color = "yellow";
                  } else {
                    star.style.color = "#ccc";
                  }
                  star.textContent = "★";
                  star.addEventListener("click", (event) => {
                    updateTemplatePriority(event, li);
                  });

                  // Bouton Modifier - now calls open_template_editor with the template name
                  const editBtn = document.createElement("button");
                  editBtn.className = "edit-button";
                  editBtn.textContent = "Modifier";
                  editBtn.addEventListener("click", (event) => {
                    // Get the template name and pass it to open_template_editor
                    const templateName = li.dataset.name;
                    console.log("Edit button clicked for template:", templateName);
                    anvil.call(event.target, 'open_template_editor', templateName);
                  });

                  // Icône de suppression – affiche une bannière lorsqu'elle est cliquée.
                  const delIcon = document.createElement("span");
                  delIcon.className = "delete-icon";
                  delIcon.textContent = "🗑";
                  delIcon.addEventListener("click", (event) => {
                    showBanner("fonctionalité en cours de développement par les équipes Checkvet");
                  });

                  actionsDiv.appendChild(star);
                  actionsDiv.appendChild(editBtn);
                  actionsDiv.appendChild(delIcon);

                  li.appendChild(spanName);
                  li.appendChild(actionsDiv);
                  list.appendChild(li);
                });
              };
            }

            // ------------------------------------------------------------
            // 2) Mise à jour de la priorité d'un template (logique du clic sur l'étoile)
            // ------------------------------------------------------------
            function updateTemplatePriority(event, tplElement) {
              const currentPriority = parseInt(tplElement.dataset.priority) || 0;
              let newPriority = (currentPriority + 1) % 3; // Cycle : 0 → 1 → 2 → 0

              // Si promotion au jaune (priorité 1), s'assurer qu'il y a au maximum 2 favoris jaunes
              if (newPriority === 1) {
                let yellowCount = 0;
                document.querySelectorAll('.template-item').forEach(item => {
                  if (item !== tplElement && item.dataset.priority === "1") {
                    yellowCount++;
                  }
                });
                if (yellowCount >= 2) {
                  alert("Nombre maximal de favoris jaunes atteint. Veuillez rétrograder un template avant de promouvoir celui-ci en jaune.");
                  return;
                }
              }

              // Si promotion au vert (priorité 2), rétrograder automatiquement tout autre template vert.
              if (newPriority === 2) {
                document.querySelectorAll('.template-item').forEach(item => {
                  if (item !== tplElement && item.dataset.priority === "2") {
                    item.dataset.priority = "0";
                    const starOther = item.querySelector('.star-icon');
                    if (starOther) starOther.style.color = "#ccc";
                    // Mettre à jour l'autre template sur le serveur en utilisant son template_name.
                    anvil.call(event.target, 'set_priority', item.dataset.name, 0);
                  }
                });
              }

              // Mettre à jour l'état visuel du template cliqué
              tplElement.dataset.priority = newPriority;
              const star = tplElement.querySelector('.star-icon');
              if (newPriority === 0) {
                star.style.color = "#ccc";
              } else if (newPriority === 1) {
                star.style.color = "yellow";
              } else if (newPriority === 2) {
                star.style.color = "green";
              }

              // Informer le serveur (via la méthode Python côté front) du changement de priorité.
              anvil.call(event.target, 'set_priority', tplElement.dataset.name, newPriority);
            }

            // ------------------------------------------------------------
            // 3) Attacher les écouteurs d'événements pour la navigation, les boutons et la barre de recherche
            // ------------------------------------------------------------
            (function attachTemplatesEvents() {
              console.log("TemplatesPage : Attachement des écouteurs d'événements...");

              // Onglets de navigation
              const tabs = document.querySelectorAll('.nav-tab');
              tabs.forEach(tab => {
                tab.addEventListener('click', (event) => {
                  const currentActive = document.querySelector('.nav-tab.active');
                  if (currentActive) currentActive.classList.remove('active');
                  tab.classList.add('active');

                  const tabText = tab.getAttribute("data-tab");
                  if (tabText === 'Production') {
                    anvil.call(event.target, 'open_production_form');
                  } else if (tabText === 'Archives') {
                    anvil.call(event.target, 'open_archives_form');
                  } else if (tabText === 'Paramètres') {
                    anvil.call(event.target, 'open_settings_form');
                  }
                  // Pour l'onglet Modèles/IA, nous sommes déjà sur cette page.
                });
              });

              // Bouton Créer - now opens the template editor directly
              const createBtn = document.getElementById('createBtn');
              if (createBtn) {
                createBtn.replaceWith(createBtn.cloneNode(true));
                const newCreateBtn = document.getElementById('createBtn');
                newCreateBtn.addEventListener('click', (event) => {
                  console.log("Create button clicked, opening template editor");
                  anvil.call(event.target, 'open_template_editor');
                });
              }

              // Bouton Personaliser votre IA – affiche une bannière lorsqu'il est cliqué
              const personalizeBtn = document.getElementById('personalizeBtn');
              if (personalizeBtn) {
                personalizeBtn.replaceWith(personalizeBtn.cloneNode(true));
                const newPersonalizeBtn = document.getElementById('personalizeBtn');
                newPersonalizeBtn.addEventListener('click', (event) => {
                  showBanner("fonctionalité en cours de développement par les équipes Checkvet");
                });
              }

              // ------------------------------------------------------------------------
              // Gestion de la barre de recherche pour les templates
              // ------------------------------------------------------------------------
              const searchInput = document.querySelector('.search-bar');
              if (searchInput) {
                searchInput.addEventListener('input', function(event) {
                  const query = event.target.value;
                  anvil.call(event.target, 'search_templates_client', query);
                });
              }

              console.log("TemplatesPage : Écouteurs d'événements attachés.");
            })();

            // ------------------------------------------------------------
            // 4) Affichage de l'heure
            // ------------------------------------------------------------
            function updateTime() {
              const now = new Date();
              const hrs = now.getHours().toString().padStart(2, '0');
              const mins = now.getMinutes().toString().padStart(2, '0');
              document.querySelector('.time').textContent = `${hrs}h${mins}`;
            }
            updateTime();
            setInterval(updateTime, 60000);
          </script>
          <!-- Add this simple script to your forms -->
          <script>
            // Initialize only once
            if (!window.__session_handlers_initialized) {
              window.__session_handlers_initialized = true;

              // Session handler setup
              window.setupSessionHandlers = function() {
                // Tab visibility change
                document.addEventListener('visibilitychange', function() {
                  if (document.visibilityState === 'visible') {
                    anvil.call(document.body, 'refresh_session_relay');
                  }
                });

                // Online status change
                window.addEventListener('online', function() {
                  anvil.call(document.body, 'refresh_session_relay');
                });
              };
            }
          </script>
        </body>
      </html>
  type: HtmlTemplate
is_package: true
